/* Generated by Cython 3.0.8 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/core/include/numpy/arrayscalars.h",
            "/private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/core/include/numpy/ndarrayobject.h",
            "/private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/core/include/numpy/ndarraytypes.h",
            "/private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/core/include/numpy/ufuncobject.h"
        ],
        "extra_compile_args": [
            "-stdlib=libc++"
        ],
        "extra_link_args": [
            "-stdlib=libc++"
        ],
        "include_dirs": [
            "/private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "name": "caiman.source_extraction.cnmf.oasis",
        "sources": [
            "caiman/source_extraction/cnmf/oasis.pyx"
        ]
    },
    "module_name": "caiman.source_extraction.cnmf.oasis"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_8" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030008F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__caiman__source_extraction__cnmf__oasis
#define __PYX_HAVE_API__caiman__source_extraction__cnmf__oasis
/* Early includes */
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include <math.h>
#include <stddef.h>
#include "pythread.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "caiman/source_extraction/cnmf/oasis.pyx",
  "<stringsource>",
  "__init__.cython-30.pxd",
  "contextvars.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* BufferFormatStructs.proto */
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* #### Code section: numeric_typedefs ### */

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":730
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":731
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":732
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":733
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":737
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":738
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":739
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":740
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":744
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":745
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":754
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":755
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":757
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":758
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":760
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":761
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":763
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":764
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":765
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "caiman/source_extraction/cnmf/oasis.pyx":15
 * from libcpp.vector cimport vector
 * 
 * ctypedef np.float32_t SINGLE             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef __pyx_t_5numpy_float32_t __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS;
struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1;
struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz;
struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool;
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;

/* "caiman/source_extraction/cnmf/oasis.pyx":18
 * 
 * 
 * cdef struct Pool:             # <<<<<<<<<<<<<<
 *     SINGLE v
 *     SINGLE w
 */
struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool {
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE v;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE w;
  Py_ssize_t t;
  Py_ssize_t l;
};
struct __pyx_defaults {
  PyObject *__pyx_arg_lam;
};
struct __pyx_defaults1 {
  PyObject *__pyx_arg_lam;
};

/* "caiman/source_extraction/cnmf/oasis.pyx":29
 * 
 * 
 * cdef class OASIS:             # <<<<<<<<<<<<<<
 *     """
 *     Deconvolution class implementing OASIS
 */
struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS {
  PyObject_HEAD
  Py_ssize_t i;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE v;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE w;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE g;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE lam;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE s_min;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE b;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE g2;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE d;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE r;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE yt;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  P;
  unsigned int t;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE h[0x3E8];
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE g12[0x3E8];
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE g11g11[0x3E8];
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE g11g12[0x3E8];
  std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE>  _y;
};


/* "caiman/source_extraction/cnmf/oasis.pyx":670
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 */
struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 {
  PyObject_HEAD
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_v_P;
  unsigned int __pyx_v_T;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_b;
  PyBoolObject *__pyx_v_b_nonneg;
  PyObject *__pyx_v_bar;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g;
  Py_ssize_t __pyx_v_i;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_lam;
  unsigned int __pyx_v_ma;
  int __pyx_v_optimize_g;
};


/* "caiman/source_extraction/cnmf/oasis.pyx":868
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */
struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz {
  PyObject_HEAD
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_Pl;
  PyObject *__pyx_v_Pt;
  PyObject *__pyx_v_y;
};


/* "caiman/source_extraction/cnmf/oasis.pyx":968
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */
struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz {
  PyObject_HEAD
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_Pl;
  PyObject *__pyx_v_Pt;
  PyObject *__pyx_v_y;
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_MultiplyCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseClosureNameError.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
#define __Pyx_HasAttr(o, n)  PyObject_HasAttrWithError(o, n)
#else
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_8
#define __PYX_HAVE_RT_ImportType_proto_3_0_8
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_8 {
   __Pyx_ImportType_CheckSize_Error_3_0_8 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_8 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_8 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size);
#endif

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool;
static PyObject* __pyx_convert__to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool s);
/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython.version" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "cython" */

/* Module declarations from "libc.math" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "caiman.source_extraction.cnmf.oasis" */
static PyObject *__pyx_f_6caiman_17source_extraction_4cnmf_5oasis_min1000(PyObject *); /*proto*/
static PyObject *__pyx_f_6caiman_17source_extraction_4cnmf_5oasis___pyx_unpickle_OASIS__set_state(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *, PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  const &); /*proto*/
static struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(PyObject *); /*proto*/
static std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE>  const &); /*proto*/
static std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE>  __pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, Py_ssize_t); /*proto*/
static int __Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(PyObject *, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, Py_ssize_t); /*proto*/
/* #### Code section: typeinfo ### */
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE = { "SINGLE", NULL, sizeof(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_long = { "long", NULL, sizeof(long), { 0 }, 0, __PYX_IS_UNSIGNED(long) ? 'U' : 'I', __PYX_IS_UNSIGNED(long), 0 };
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "caiman.source_extraction.cnmf.oasis"
extern int __pyx_module_is_main_caiman__source_extraction__cnmf__oasis;
int __pyx_module_is_main_caiman__source_extraction__cnmf__oasis = 0;

/* Implementation of "caiman.source_extraction.cnmf.oasis" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_OverflowError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_P[] = "P";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_Pl[] = "Pl";
static const char __pyx_k_Pt[] = "Pt";
static const char __pyx_k_aa[] = "aa";
static const char __pyx_k_bb[] = "bb";
static const char __pyx_k_cc[] = "cc";
static const char __pyx_k_db[] = "db";
static const char __pyx_k_ff[] = "ff";
static const char __pyx_k_g2[] = "g2";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_ll[] = "ll";
static const char __pyx_k_ma[] = "ma";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_sn[] = "sn";
static const char __pyx_k_yt[] = "yt";
static const char __pyx_k_yy[] = "yy";
static const char __pyx_k_RSS[] = "RSS";
static const char __pyx_k__29[] = ".";
static const char __pyx_k__30[] = "*";
static const char __pyx_k__62[] = "?";
static const char __pyx_k_bar[] = "bar";
static const char __pyx_k_baz[] = "baz";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_fit[] = "fit";
static const char __pyx_k_foo[] = "foo";
static const char __pyx_k_g12[] = "g12";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_inf[] = "inf";
static const char __pyx_k_lam[] = "lam";
static const char __pyx_k_lls[] = "lls";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_num[] = "num";
static const char __pyx_k_opt[] = "opt";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tmp[] = "tmp";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dlam[] = "dlam";
static const char __pyx_k_dphi[] = "dphi";
static const char __pyx_k_ftol[] = "ftol";
static const char __pyx_k_gtol[] = "gtol";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tmp2[] = "tmp2";
static const char __pyx_k_xtol[] = "xtol";
static const char __pyx_k_yt_2[] = "_yt";
static const char __pyx_k_OASIS[] = "OASIS";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_fluor[] = "fluor";
static const char __pyx_k_get_c[] = "get_c";
static const char __pyx_k_get_s[] = "get_s";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_oasis[] = "oasis";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ravel[] = "ravel";
static const char __pyx_k_s_min[] = "s_min";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_bounds[] = "bounds";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_g11g11[] = "g11g11";
static const char __pyx_k_g11g12[] = "g11g12";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_maxfun[] = "maxfun";
static const char __pyx_k_method[] = "method";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_thresh[] = "thresh";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_argsort[] = "argsort";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_maxiter[] = "maxiter";
static const char __pyx_k_newpool[] = "newpool";
static const char __pyx_k_options[] = "options";
static const char __pyx_k_penalty[] = "penalty";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_L_BFGS_B[] = "L-BFGS-B";
static const char __pyx_k_b_nonneg[] = "b_nonneg";
static const char __pyx_k_decimate[] = "decimate";
static const char __pyx_k_fit_next[] = "fit_next";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_max_iter[] = "max_iter";
static const char __pyx_k_minimize[] = "minimize";
static const char __pyx_k_oasisAR1[] = "oasisAR1";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_OASIS_fit[] = "OASIS.fit";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_fminbound[] = "fminbound";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_optimize_b[] = "optimize_b";
static const char __pyx_k_optimize_g[] = "optimize_g";
static const char __pyx_k_percentile[] = "percentile";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_zeros_like[] = "zeros_like";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_OASIS_get_c[] = "OASIS.get_c";
static const char __pyx_k_OASIS_get_s[] = "OASIS.get_s";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_g_converged[] = "g_converged";
static const char __pyx_k_oasis1strun[] = "oasis1strun";
static const char __pyx_k_fit_next_tmp[] = "fit_next_tmp";
static const char __pyx_k_idx_from_end[] = "idx_from_end";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_OverflowError[] = "OverflowError";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_get_l_of_pool[] = "get_l_of_pool";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_set_poolvalue[] = "set_poolvalue";
static const char __pyx_k_OASIS_fit_next[] = "OASIS.fit_next";
static const char __pyx_k_scipy_optimize[] = "scipy.optimize";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_remove_last_pool[] = "remove_last_pool";
static const char __pyx_k_num_empty_samples[] = "num_empty_samples";
static const char __pyx_k_OASIS_fit_next_tmp[] = "OASIS.fit_next_tmp";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_c_of_last_pool[] = "get_c_of_last_pool";
static const char __pyx_k_get_l_of_last_pool[] = "get_l_of_last_pool";
static const char __pyx_k_pyx_unpickle_OASIS[] = "__pyx_unpickle_OASIS";
static const char __pyx_k_OASIS_get_l_of_pool[] = "OASIS.get_l_of_pool";
static const char __pyx_k_OASIS_set_poolvalue[] = "OASIS.set_poolvalue";
static const char __pyx_k_constrained_oasisAR1[] = "constrained_oasisAR1";
static const char __pyx_k_OASIS___reduce_cython[] = "OASIS.__reduce_cython__";
static const char __pyx_k_OASIS_remove_last_pool[] = "OASIS.remove_last_pool";
static const char __pyx_k_OASIS___setstate_cython[] = "OASIS.__setstate_cython__";
static const char __pyx_k_OASIS_get_c_of_last_pool[] = "OASIS.get_c_of_last_pool";
static const char __pyx_k_OASIS_get_l_of_last_pool[] = "OASIS.get_l_of_last_pool";
static const char __pyx_k_constrained_oasisAR1_locals_bar[] = "constrained_oasisAR1.<locals>.bar.<locals>.foo";
static const char __pyx_k_constrained_oasisAR1_locals_baz[] = "constrained_oasisAR1.<locals>.baz.<locals>.<lambda>";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Extract_neural_activity_from_a_f[] = "Extract neural activity from a fluorescence trace using OASIS,\nan active set method for sparse nonnegative deconvolution\nCreated on Mon Apr 4 18:21:13 2016\n@author: Johannes Friedrich\n";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x427cb6f, 0x3fa9078, 0x85da4ff) = (P, _y, b, d, g, g11g11, g11g12, g12, g2, h, i, lam, r, s_min, t, v, w, yt))";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'v'";
static const char __pyx_k_caiman_source_extraction_cnmf_oa[] = "caiman/source_extraction/cnmf/oasis.pyx";
static const char __pyx_k_constrained_oasisAR1_locals_oasi[] = "constrained_oasisAR1.<locals>.oasis1strun";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_constrained_oasisAR1_locals_bar_2[] = "constrained_oasisAR1.<locals>.bar";
static const char __pyx_k_constrained_oasisAR1_locals_baz_2[] = "constrained_oasisAR1.<locals>.baz";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'w'";
static const char __pyx_k_No_value_specified_for_struct_at_3[] = "No value specified for struct attribute 't'";
static const char __pyx_k_No_value_specified_for_struct_at_4[] = "No value specified for struct attribute 'l'";
static const char __pyx_k_caiman_source_extraction_cnmf_oa_2[] = "caiman.source_extraction.cnmf.oasis";
static const char __pyx_k_constrained_oasisAR1_locals_oasi_2[] = "constrained_oasisAR1.<locals>.oasis";
/* #### Code section: decls ### */
static int __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS___init__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_g, PyObject *__pyx_v_lam, PyObject *__pyx_v_s_min, PyObject *__pyx_v_b, PyObject *__pyx_v_num_empty_samples, PyObject *__pyx_v_g2); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2fit_next(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_yt); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_4fit_next_tmp(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_yt, PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_6fit(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_8get_c(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_10get_s(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_12get_l_of_last_pool(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_14get_c_of_last_pool(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_16remove_last_pool(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_18get_l_of_pool(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_idx_from_end); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_20set_poolvalue(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_val, PyObject *__pyx_v_idx_from_end); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1P___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1g___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2g2___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3lam___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5s_min___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1b___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1t___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1c___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1s___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_22__reduce_cython__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_24__setstate_cython__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_oasisAR1(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_lam, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_s_min); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_oasis1strun(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g, PyArrayObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_2oasis(CYTHON_UNUSED PyObject *__pyx_self, std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_v_P, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g, PyArrayObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_6__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_foo(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_t, PyObject *__pyx_v_l, PyObject *__pyx_v_q, PyObject *__pyx_v_g, PyObject *__pyx_v_lam); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_4bar(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_g, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_6baz(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_8__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_2foo(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_t, PyObject *__pyx_v_l, PyObject *__pyx_v_q, PyObject *__pyx_v_b, PyObject *__pyx_v_g, PyObject *__pyx_v_lam); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_8bar(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_opt, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_10baz(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_2constrained_oasisAR1(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_sn, PyBoolObject *__pyx_v_optimize_b, PyBoolObject *__pyx_v_b_nonneg, int __pyx_v_optimize_g, int __pyx_v_decimate, int __pyx_v_max_iter, int __pyx_v_penalty, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_s_min); /* proto */
static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_4__pyx_unpickle_OASIS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis_OASIS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS;
  PyObject *__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1;
  PyObject *__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz;
  PyObject *__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz;
  #endif
  PyTypeObject *__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS;
  PyTypeObject *__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1;
  PyTypeObject *__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz;
  PyTypeObject *__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_n_s_IndexError;
  PyObject *__pyx_n_s_KeyError;
  PyObject *__pyx_kp_u_L_BFGS_B;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
  PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
  PyObject *__pyx_kp_s_No_value_specified_for_struct_at_3;
  PyObject *__pyx_kp_s_No_value_specified_for_struct_at_4;
  PyObject *__pyx_n_s_OASIS;
  PyObject *__pyx_n_s_OASIS___reduce_cython;
  PyObject *__pyx_n_s_OASIS___setstate_cython;
  PyObject *__pyx_n_s_OASIS_fit;
  PyObject *__pyx_n_s_OASIS_fit_next;
  PyObject *__pyx_n_s_OASIS_fit_next_tmp;
  PyObject *__pyx_n_s_OASIS_get_c;
  PyObject *__pyx_n_s_OASIS_get_c_of_last_pool;
  PyObject *__pyx_n_s_OASIS_get_l_of_last_pool;
  PyObject *__pyx_n_s_OASIS_get_l_of_pool;
  PyObject *__pyx_n_s_OASIS_get_s;
  PyObject *__pyx_n_s_OASIS_remove_last_pool;
  PyObject *__pyx_n_s_OASIS_set_poolvalue;
  PyObject *__pyx_n_s_OverflowError;
  PyObject *__pyx_n_s_P;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_Pl;
  PyObject *__pyx_n_s_Pt;
  PyObject *__pyx_n_s_RSS;
  PyObject *__pyx_n_s_T;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_u__29;
  PyObject *__pyx_n_s__30;
  PyObject *__pyx_n_s__62;
  PyObject *__pyx_n_s_aa;
  PyObject *__pyx_n_s_append;
  PyObject *__pyx_n_s_arange;
  PyObject *__pyx_n_s_argsort;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_b;
  PyObject *__pyx_n_s_b_nonneg;
  PyObject *__pyx_n_s_bar;
  PyObject *__pyx_n_s_baz;
  PyObject *__pyx_n_s_bb;
  PyObject *__pyx_n_s_bounds;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_kp_s_caiman_source_extraction_cnmf_oa;
  PyObject *__pyx_n_s_caiman_source_extraction_cnmf_oa_2;
  PyObject *__pyx_n_s_cc;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_constrained_oasisAR1;
  PyObject *__pyx_n_s_constrained_oasisAR1_locals_bar;
  PyObject *__pyx_n_s_constrained_oasisAR1_locals_bar_2;
  PyObject *__pyx_n_s_constrained_oasisAR1_locals_baz;
  PyObject *__pyx_n_s_constrained_oasisAR1_locals_baz_2;
  PyObject *__pyx_n_s_constrained_oasisAR1_locals_oasi;
  PyObject *__pyx_n_s_constrained_oasisAR1_locals_oasi_2;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_n_s_count;
  PyObject *__pyx_n_s_db;
  PyObject *__pyx_n_s_decimate;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_dlam;
  PyObject *__pyx_n_s_dot;
  PyObject *__pyx_n_s_dphi;
  PyObject *__pyx_n_s_dtype;
  PyObject *__pyx_n_s_empty;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_exp;
  PyObject *__pyx_n_s_ff;
  PyObject *__pyx_n_s_fit;
  PyObject *__pyx_n_s_fit_next;
  PyObject *__pyx_n_s_fit_next_tmp;
  PyObject *__pyx_n_s_float32;
  PyObject *__pyx_n_u_float32;
  PyObject *__pyx_n_s_fluor;
  PyObject *__pyx_n_s_fminbound;
  PyObject *__pyx_n_s_foo;
  PyObject *__pyx_n_u_ftol;
  PyObject *__pyx_n_s_g;
  PyObject *__pyx_n_s_g11g11;
  PyObject *__pyx_n_s_g11g12;
  PyObject *__pyx_n_s_g12;
  PyObject *__pyx_n_s_g2;
  PyObject *__pyx_n_s_g_converged;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get_c;
  PyObject *__pyx_n_s_get_c_of_last_pool;
  PyObject *__pyx_n_s_get_l_of_last_pool;
  PyObject *__pyx_n_s_get_l_of_pool;
  PyObject *__pyx_n_s_get_s;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_u_gtol;
  PyObject *__pyx_n_s_h;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_idx;
  PyObject *__pyx_n_s_idx_from_end;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_inf;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_j;
  PyObject *__pyx_n_s_k;
  PyObject *__pyx_n_s_l;
  PyObject *__pyx_n_s_lam;
  PyObject *__pyx_n_s_ll;
  PyObject *__pyx_n_s_lls;
  PyObject *__pyx_n_s_ma;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_max;
  PyObject *__pyx_n_s_max_iter;
  PyObject *__pyx_n_s_maxfun;
  PyObject *__pyx_n_u_maxiter;
  PyObject *__pyx_n_s_mean;
  PyObject *__pyx_n_s_method;
  PyObject *__pyx_n_s_minimize;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_n_s_newpool;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_num;
  PyObject *__pyx_n_s_num_empty_samples;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_s_oasis;
  PyObject *__pyx_n_s_oasis1strun;
  PyObject *__pyx_n_s_oasisAR1;
  PyObject *__pyx_n_s_opt;
  PyObject *__pyx_n_s_optimize_b;
  PyObject *__pyx_n_s_optimize_g;
  PyObject *__pyx_n_s_options;
  PyObject *__pyx_n_s_p;
  PyObject *__pyx_n_s_penalty;
  PyObject *__pyx_n_s_percentile;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_pos;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_OASIS;
  PyObject *__pyx_n_s_q;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_ravel;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_remove_last_pool;
  PyObject *__pyx_n_s_res;
  PyObject *__pyx_n_s_reshape;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_n_s_s_min;
  PyObject *__pyx_n_s_scipy_optimize;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_set_poolvalue;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_sn;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_sum;
  PyObject *__pyx_n_s_t;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_thresh;
  PyObject *__pyx_n_s_tmp;
  PyObject *__pyx_n_s_tmp2;
  PyObject *__pyx_n_s_unique;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_val;
  PyObject *__pyx_n_s_w;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_u_x;
  PyObject *__pyx_n_s_xtol;
  PyObject *__pyx_n_s_y;
  PyObject *__pyx_n_s_yt;
  PyObject *__pyx_n_s_yt_2;
  PyObject *__pyx_n_s_yy;
  PyObject *__pyx_n_s_zeros;
  PyObject *__pyx_n_s_zeros_like;
  PyObject *__pyx_float__001;
  PyObject *__pyx_float__999;
  PyObject *__pyx_float_1eneg_4;
  PyObject *__pyx_float_1eneg_9;
  PyObject *__pyx_float_1eneg_04;
  PyObject *__pyx_float_1eneg_05;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_15;
  PyObject *__pyx_int_50;
  PyObject *__pyx_int_1000;
  PyObject *__pyx_int_66752632;
  PyObject *__pyx_int_69716847;
  PyObject *__pyx_int_140354815;
  PyObject *__pyx_int_neg_1;
  PyBoolObject *__pyx_k__9;
  PyBoolObject *__pyx_k__10;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_slice__7;
  PyObject *__pyx_slice__8;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_slice__27;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__41;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);
  Py_CLEAR(clear_module_state->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS);
  Py_CLEAR(clear_module_state->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1);
  Py_CLEAR(clear_module_state->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1);
  Py_CLEAR(clear_module_state->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz);
  Py_CLEAR(clear_module_state->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz);
  Py_CLEAR(clear_module_state->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz);
  Py_CLEAR(clear_module_state->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_IndexError);
  Py_CLEAR(clear_module_state->__pyx_n_s_KeyError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_L_BFGS_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_value_specified_for_struct_at);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_value_specified_for_struct_at_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_value_specified_for_struct_at_3);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_value_specified_for_struct_at_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_fit);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_fit_next);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_fit_next_tmp);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_get_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_get_c_of_last_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_get_l_of_last_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_get_l_of_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_get_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_remove_last_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_OASIS_set_poolvalue);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverflowError);
  Py_CLEAR(clear_module_state->__pyx_n_s_P);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pl);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pt);
  Py_CLEAR(clear_module_state->__pyx_n_s_RSS);
  Py_CLEAR(clear_module_state->__pyx_n_s_T);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_u__29);
  Py_CLEAR(clear_module_state->__pyx_n_s__30);
  Py_CLEAR(clear_module_state->__pyx_n_s__62);
  Py_CLEAR(clear_module_state->__pyx_n_s_aa);
  Py_CLEAR(clear_module_state->__pyx_n_s_append);
  Py_CLEAR(clear_module_state->__pyx_n_s_arange);
  Py_CLEAR(clear_module_state->__pyx_n_s_argsort);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_b_nonneg);
  Py_CLEAR(clear_module_state->__pyx_n_s_bar);
  Py_CLEAR(clear_module_state->__pyx_n_s_baz);
  Py_CLEAR(clear_module_state->__pyx_n_s_bb);
  Py_CLEAR(clear_module_state->__pyx_n_s_bounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_kp_s_caiman_source_extraction_cnmf_oa);
  Py_CLEAR(clear_module_state->__pyx_n_s_caiman_source_extraction_cnmf_oa_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_cc);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_constrained_oasisAR1);
  Py_CLEAR(clear_module_state->__pyx_n_s_constrained_oasisAR1_locals_bar);
  Py_CLEAR(clear_module_state->__pyx_n_s_constrained_oasisAR1_locals_bar_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_constrained_oasisAR1_locals_baz);
  Py_CLEAR(clear_module_state->__pyx_n_s_constrained_oasisAR1_locals_baz_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_constrained_oasisAR1_locals_oasi);
  Py_CLEAR(clear_module_state->__pyx_n_s_constrained_oasisAR1_locals_oasi_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimate);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_dlam);
  Py_CLEAR(clear_module_state->__pyx_n_s_dot);
  Py_CLEAR(clear_module_state->__pyx_n_s_dphi);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_empty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_exp);
  Py_CLEAR(clear_module_state->__pyx_n_s_ff);
  Py_CLEAR(clear_module_state->__pyx_n_s_fit);
  Py_CLEAR(clear_module_state->__pyx_n_s_fit_next);
  Py_CLEAR(clear_module_state->__pyx_n_s_fit_next_tmp);
  Py_CLEAR(clear_module_state->__pyx_n_s_float32);
  Py_CLEAR(clear_module_state->__pyx_n_u_float32);
  Py_CLEAR(clear_module_state->__pyx_n_s_fluor);
  Py_CLEAR(clear_module_state->__pyx_n_s_fminbound);
  Py_CLEAR(clear_module_state->__pyx_n_s_foo);
  Py_CLEAR(clear_module_state->__pyx_n_u_ftol);
  Py_CLEAR(clear_module_state->__pyx_n_s_g);
  Py_CLEAR(clear_module_state->__pyx_n_s_g11g11);
  Py_CLEAR(clear_module_state->__pyx_n_s_g11g12);
  Py_CLEAR(clear_module_state->__pyx_n_s_g12);
  Py_CLEAR(clear_module_state->__pyx_n_s_g2);
  Py_CLEAR(clear_module_state->__pyx_n_s_g_converged);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_c_of_last_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_l_of_last_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_l_of_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_u_gtol);
  Py_CLEAR(clear_module_state->__pyx_n_s_h);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx_from_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_inf);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_j);
  Py_CLEAR(clear_module_state->__pyx_n_s_k);
  Py_CLEAR(clear_module_state->__pyx_n_s_l);
  Py_CLEAR(clear_module_state->__pyx_n_s_lam);
  Py_CLEAR(clear_module_state->__pyx_n_s_ll);
  Py_CLEAR(clear_module_state->__pyx_n_s_lls);
  Py_CLEAR(clear_module_state->__pyx_n_s_ma);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxfun);
  Py_CLEAR(clear_module_state->__pyx_n_u_maxiter);
  Py_CLEAR(clear_module_state->__pyx_n_s_mean);
  Py_CLEAR(clear_module_state->__pyx_n_s_method);
  Py_CLEAR(clear_module_state->__pyx_n_s_minimize);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_n_s_newpool);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_num);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_empty_samples);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_s_oasis);
  Py_CLEAR(clear_module_state->__pyx_n_s_oasis1strun);
  Py_CLEAR(clear_module_state->__pyx_n_s_oasisAR1);
  Py_CLEAR(clear_module_state->__pyx_n_s_opt);
  Py_CLEAR(clear_module_state->__pyx_n_s_optimize_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_optimize_g);
  Py_CLEAR(clear_module_state->__pyx_n_s_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_penalty);
  Py_CLEAR(clear_module_state->__pyx_n_s_percentile);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_pos);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_OASIS);
  Py_CLEAR(clear_module_state->__pyx_n_s_q);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_ravel);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_remove_last_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_res);
  Py_CLEAR(clear_module_state->__pyx_n_s_reshape);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_min);
  Py_CLEAR(clear_module_state->__pyx_n_s_scipy_optimize);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_poolvalue);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_sn);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_sum);
  Py_CLEAR(clear_module_state->__pyx_n_s_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_thresh);
  Py_CLEAR(clear_module_state->__pyx_n_s_tmp);
  Py_CLEAR(clear_module_state->__pyx_n_s_tmp2);
  Py_CLEAR(clear_module_state->__pyx_n_s_unique);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_val);
  Py_CLEAR(clear_module_state->__pyx_n_s_w);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_u_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_xtol);
  Py_CLEAR(clear_module_state->__pyx_n_s_y);
  Py_CLEAR(clear_module_state->__pyx_n_s_yt);
  Py_CLEAR(clear_module_state->__pyx_n_s_yt_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_yy);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeros);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeros_like);
  Py_CLEAR(clear_module_state->__pyx_float__001);
  Py_CLEAR(clear_module_state->__pyx_float__999);
  Py_CLEAR(clear_module_state->__pyx_float_1eneg_4);
  Py_CLEAR(clear_module_state->__pyx_float_1eneg_9);
  Py_CLEAR(clear_module_state->__pyx_float_1eneg_04);
  Py_CLEAR(clear_module_state->__pyx_float_1eneg_05);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_15);
  Py_CLEAR(clear_module_state->__pyx_int_50);
  Py_CLEAR(clear_module_state->__pyx_int_1000);
  Py_CLEAR(clear_module_state->__pyx_int_66752632);
  Py_CLEAR(clear_module_state->__pyx_int_69716847);
  Py_CLEAR(clear_module_state->__pyx_int_140354815);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_k__9);
  Py_CLEAR(clear_module_state->__pyx_k__10);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_slice__7);
  Py_CLEAR(clear_module_state->__pyx_slice__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_slice__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__41);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);
  Py_VISIT(traverse_module_state->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS);
  Py_VISIT(traverse_module_state->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1);
  Py_VISIT(traverse_module_state->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1);
  Py_VISIT(traverse_module_state->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz);
  Py_VISIT(traverse_module_state->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz);
  Py_VISIT(traverse_module_state->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz);
  Py_VISIT(traverse_module_state->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_IndexError);
  Py_VISIT(traverse_module_state->__pyx_n_s_KeyError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_L_BFGS_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_value_specified_for_struct_at);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_value_specified_for_struct_at_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_value_specified_for_struct_at_3);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_value_specified_for_struct_at_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_fit);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_fit_next);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_fit_next_tmp);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_get_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_get_c_of_last_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_get_l_of_last_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_get_l_of_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_get_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_remove_last_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_OASIS_set_poolvalue);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverflowError);
  Py_VISIT(traverse_module_state->__pyx_n_s_P);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pl);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pt);
  Py_VISIT(traverse_module_state->__pyx_n_s_RSS);
  Py_VISIT(traverse_module_state->__pyx_n_s_T);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_u__29);
  Py_VISIT(traverse_module_state->__pyx_n_s__30);
  Py_VISIT(traverse_module_state->__pyx_n_s__62);
  Py_VISIT(traverse_module_state->__pyx_n_s_aa);
  Py_VISIT(traverse_module_state->__pyx_n_s_append);
  Py_VISIT(traverse_module_state->__pyx_n_s_arange);
  Py_VISIT(traverse_module_state->__pyx_n_s_argsort);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_b_nonneg);
  Py_VISIT(traverse_module_state->__pyx_n_s_bar);
  Py_VISIT(traverse_module_state->__pyx_n_s_baz);
  Py_VISIT(traverse_module_state->__pyx_n_s_bb);
  Py_VISIT(traverse_module_state->__pyx_n_s_bounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_kp_s_caiman_source_extraction_cnmf_oa);
  Py_VISIT(traverse_module_state->__pyx_n_s_caiman_source_extraction_cnmf_oa_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_cc);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_constrained_oasisAR1);
  Py_VISIT(traverse_module_state->__pyx_n_s_constrained_oasisAR1_locals_bar);
  Py_VISIT(traverse_module_state->__pyx_n_s_constrained_oasisAR1_locals_bar_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_constrained_oasisAR1_locals_baz);
  Py_VISIT(traverse_module_state->__pyx_n_s_constrained_oasisAR1_locals_baz_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_constrained_oasisAR1_locals_oasi);
  Py_VISIT(traverse_module_state->__pyx_n_s_constrained_oasisAR1_locals_oasi_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimate);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_dlam);
  Py_VISIT(traverse_module_state->__pyx_n_s_dot);
  Py_VISIT(traverse_module_state->__pyx_n_s_dphi);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_empty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_exp);
  Py_VISIT(traverse_module_state->__pyx_n_s_ff);
  Py_VISIT(traverse_module_state->__pyx_n_s_fit);
  Py_VISIT(traverse_module_state->__pyx_n_s_fit_next);
  Py_VISIT(traverse_module_state->__pyx_n_s_fit_next_tmp);
  Py_VISIT(traverse_module_state->__pyx_n_s_float32);
  Py_VISIT(traverse_module_state->__pyx_n_u_float32);
  Py_VISIT(traverse_module_state->__pyx_n_s_fluor);
  Py_VISIT(traverse_module_state->__pyx_n_s_fminbound);
  Py_VISIT(traverse_module_state->__pyx_n_s_foo);
  Py_VISIT(traverse_module_state->__pyx_n_u_ftol);
  Py_VISIT(traverse_module_state->__pyx_n_s_g);
  Py_VISIT(traverse_module_state->__pyx_n_s_g11g11);
  Py_VISIT(traverse_module_state->__pyx_n_s_g11g12);
  Py_VISIT(traverse_module_state->__pyx_n_s_g12);
  Py_VISIT(traverse_module_state->__pyx_n_s_g2);
  Py_VISIT(traverse_module_state->__pyx_n_s_g_converged);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_c_of_last_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_l_of_last_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_l_of_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_u_gtol);
  Py_VISIT(traverse_module_state->__pyx_n_s_h);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx_from_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_inf);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_j);
  Py_VISIT(traverse_module_state->__pyx_n_s_k);
  Py_VISIT(traverse_module_state->__pyx_n_s_l);
  Py_VISIT(traverse_module_state->__pyx_n_s_lam);
  Py_VISIT(traverse_module_state->__pyx_n_s_ll);
  Py_VISIT(traverse_module_state->__pyx_n_s_lls);
  Py_VISIT(traverse_module_state->__pyx_n_s_ma);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxfun);
  Py_VISIT(traverse_module_state->__pyx_n_u_maxiter);
  Py_VISIT(traverse_module_state->__pyx_n_s_mean);
  Py_VISIT(traverse_module_state->__pyx_n_s_method);
  Py_VISIT(traverse_module_state->__pyx_n_s_minimize);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_n_s_newpool);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_num);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_empty_samples);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_s_oasis);
  Py_VISIT(traverse_module_state->__pyx_n_s_oasis1strun);
  Py_VISIT(traverse_module_state->__pyx_n_s_oasisAR1);
  Py_VISIT(traverse_module_state->__pyx_n_s_opt);
  Py_VISIT(traverse_module_state->__pyx_n_s_optimize_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_optimize_g);
  Py_VISIT(traverse_module_state->__pyx_n_s_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_penalty);
  Py_VISIT(traverse_module_state->__pyx_n_s_percentile);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_pos);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_OASIS);
  Py_VISIT(traverse_module_state->__pyx_n_s_q);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_ravel);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_remove_last_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_res);
  Py_VISIT(traverse_module_state->__pyx_n_s_reshape);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_min);
  Py_VISIT(traverse_module_state->__pyx_n_s_scipy_optimize);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_poolvalue);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_sn);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_sum);
  Py_VISIT(traverse_module_state->__pyx_n_s_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_thresh);
  Py_VISIT(traverse_module_state->__pyx_n_s_tmp);
  Py_VISIT(traverse_module_state->__pyx_n_s_tmp2);
  Py_VISIT(traverse_module_state->__pyx_n_s_unique);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_val);
  Py_VISIT(traverse_module_state->__pyx_n_s_w);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_u_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_xtol);
  Py_VISIT(traverse_module_state->__pyx_n_s_y);
  Py_VISIT(traverse_module_state->__pyx_n_s_yt);
  Py_VISIT(traverse_module_state->__pyx_n_s_yt_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_yy);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeros);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeros_like);
  Py_VISIT(traverse_module_state->__pyx_float__001);
  Py_VISIT(traverse_module_state->__pyx_float__999);
  Py_VISIT(traverse_module_state->__pyx_float_1eneg_4);
  Py_VISIT(traverse_module_state->__pyx_float_1eneg_9);
  Py_VISIT(traverse_module_state->__pyx_float_1eneg_04);
  Py_VISIT(traverse_module_state->__pyx_float_1eneg_05);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_15);
  Py_VISIT(traverse_module_state->__pyx_int_50);
  Py_VISIT(traverse_module_state->__pyx_int_1000);
  Py_VISIT(traverse_module_state->__pyx_int_66752632);
  Py_VISIT(traverse_module_state->__pyx_int_69716847);
  Py_VISIT(traverse_module_state->__pyx_int_140354815);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_k__9);
  Py_VISIT(traverse_module_state->__pyx_k__10);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_slice__7);
  Py_VISIT(traverse_module_state->__pyx_slice__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_slice__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__41);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS __pyx_mstate_global->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS
#define __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 __pyx_mstate_global->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1
#define __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz __pyx_mstate_global->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz
#define __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz __pyx_mstate_global->__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz
#endif
#define __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS __pyx_mstate_global->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS
#define __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 __pyx_mstate_global->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1
#define __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz __pyx_mstate_global->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz
#define __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz __pyx_mstate_global->__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_n_s_IndexError __pyx_mstate_global->__pyx_n_s_IndexError
#define __pyx_n_s_KeyError __pyx_mstate_global->__pyx_n_s_KeyError
#define __pyx_kp_u_L_BFGS_B __pyx_mstate_global->__pyx_kp_u_L_BFGS_B
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_kp_s_No_value_specified_for_struct_at __pyx_mstate_global->__pyx_kp_s_No_value_specified_for_struct_at
#define __pyx_kp_s_No_value_specified_for_struct_at_2 __pyx_mstate_global->__pyx_kp_s_No_value_specified_for_struct_at_2
#define __pyx_kp_s_No_value_specified_for_struct_at_3 __pyx_mstate_global->__pyx_kp_s_No_value_specified_for_struct_at_3
#define __pyx_kp_s_No_value_specified_for_struct_at_4 __pyx_mstate_global->__pyx_kp_s_No_value_specified_for_struct_at_4
#define __pyx_n_s_OASIS __pyx_mstate_global->__pyx_n_s_OASIS
#define __pyx_n_s_OASIS___reduce_cython __pyx_mstate_global->__pyx_n_s_OASIS___reduce_cython
#define __pyx_n_s_OASIS___setstate_cython __pyx_mstate_global->__pyx_n_s_OASIS___setstate_cython
#define __pyx_n_s_OASIS_fit __pyx_mstate_global->__pyx_n_s_OASIS_fit
#define __pyx_n_s_OASIS_fit_next __pyx_mstate_global->__pyx_n_s_OASIS_fit_next
#define __pyx_n_s_OASIS_fit_next_tmp __pyx_mstate_global->__pyx_n_s_OASIS_fit_next_tmp
#define __pyx_n_s_OASIS_get_c __pyx_mstate_global->__pyx_n_s_OASIS_get_c
#define __pyx_n_s_OASIS_get_c_of_last_pool __pyx_mstate_global->__pyx_n_s_OASIS_get_c_of_last_pool
#define __pyx_n_s_OASIS_get_l_of_last_pool __pyx_mstate_global->__pyx_n_s_OASIS_get_l_of_last_pool
#define __pyx_n_s_OASIS_get_l_of_pool __pyx_mstate_global->__pyx_n_s_OASIS_get_l_of_pool
#define __pyx_n_s_OASIS_get_s __pyx_mstate_global->__pyx_n_s_OASIS_get_s
#define __pyx_n_s_OASIS_remove_last_pool __pyx_mstate_global->__pyx_n_s_OASIS_remove_last_pool
#define __pyx_n_s_OASIS_set_poolvalue __pyx_mstate_global->__pyx_n_s_OASIS_set_poolvalue
#define __pyx_n_s_OverflowError __pyx_mstate_global->__pyx_n_s_OverflowError
#define __pyx_n_s_P __pyx_mstate_global->__pyx_n_s_P
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_Pl __pyx_mstate_global->__pyx_n_s_Pl
#define __pyx_n_s_Pt __pyx_mstate_global->__pyx_n_s_Pt
#define __pyx_n_s_RSS __pyx_mstate_global->__pyx_n_s_RSS
#define __pyx_n_s_T __pyx_mstate_global->__pyx_n_s_T
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_u__29 __pyx_mstate_global->__pyx_kp_u__29
#define __pyx_n_s__30 __pyx_mstate_global->__pyx_n_s__30
#define __pyx_n_s__62 __pyx_mstate_global->__pyx_n_s__62
#define __pyx_n_s_aa __pyx_mstate_global->__pyx_n_s_aa
#define __pyx_n_s_append __pyx_mstate_global->__pyx_n_s_append
#define __pyx_n_s_arange __pyx_mstate_global->__pyx_n_s_arange
#define __pyx_n_s_argsort __pyx_mstate_global->__pyx_n_s_argsort
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_b __pyx_mstate_global->__pyx_n_s_b
#define __pyx_n_s_b_nonneg __pyx_mstate_global->__pyx_n_s_b_nonneg
#define __pyx_n_s_bar __pyx_mstate_global->__pyx_n_s_bar
#define __pyx_n_s_baz __pyx_mstate_global->__pyx_n_s_baz
#define __pyx_n_s_bb __pyx_mstate_global->__pyx_n_s_bb
#define __pyx_n_s_bounds __pyx_mstate_global->__pyx_n_s_bounds
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_kp_s_caiman_source_extraction_cnmf_oa __pyx_mstate_global->__pyx_kp_s_caiman_source_extraction_cnmf_oa
#define __pyx_n_s_caiman_source_extraction_cnmf_oa_2 __pyx_mstate_global->__pyx_n_s_caiman_source_extraction_cnmf_oa_2
#define __pyx_n_s_cc __pyx_mstate_global->__pyx_n_s_cc
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_constrained_oasisAR1 __pyx_mstate_global->__pyx_n_s_constrained_oasisAR1
#define __pyx_n_s_constrained_oasisAR1_locals_bar __pyx_mstate_global->__pyx_n_s_constrained_oasisAR1_locals_bar
#define __pyx_n_s_constrained_oasisAR1_locals_bar_2 __pyx_mstate_global->__pyx_n_s_constrained_oasisAR1_locals_bar_2
#define __pyx_n_s_constrained_oasisAR1_locals_baz __pyx_mstate_global->__pyx_n_s_constrained_oasisAR1_locals_baz
#define __pyx_n_s_constrained_oasisAR1_locals_baz_2 __pyx_mstate_global->__pyx_n_s_constrained_oasisAR1_locals_baz_2
#define __pyx_n_s_constrained_oasisAR1_locals_oasi __pyx_mstate_global->__pyx_n_s_constrained_oasisAR1_locals_oasi
#define __pyx_n_s_constrained_oasisAR1_locals_oasi_2 __pyx_mstate_global->__pyx_n_s_constrained_oasisAR1_locals_oasi_2
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_n_s_count __pyx_mstate_global->__pyx_n_s_count
#define __pyx_n_s_db __pyx_mstate_global->__pyx_n_s_db
#define __pyx_n_s_decimate __pyx_mstate_global->__pyx_n_s_decimate
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_dlam __pyx_mstate_global->__pyx_n_s_dlam
#define __pyx_n_s_dot __pyx_mstate_global->__pyx_n_s_dot
#define __pyx_n_s_dphi __pyx_mstate_global->__pyx_n_s_dphi
#define __pyx_n_s_dtype __pyx_mstate_global->__pyx_n_s_dtype
#define __pyx_n_s_empty __pyx_mstate_global->__pyx_n_s_empty
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_exp __pyx_mstate_global->__pyx_n_s_exp
#define __pyx_n_s_ff __pyx_mstate_global->__pyx_n_s_ff
#define __pyx_n_s_fit __pyx_mstate_global->__pyx_n_s_fit
#define __pyx_n_s_fit_next __pyx_mstate_global->__pyx_n_s_fit_next
#define __pyx_n_s_fit_next_tmp __pyx_mstate_global->__pyx_n_s_fit_next_tmp
#define __pyx_n_s_float32 __pyx_mstate_global->__pyx_n_s_float32
#define __pyx_n_u_float32 __pyx_mstate_global->__pyx_n_u_float32
#define __pyx_n_s_fluor __pyx_mstate_global->__pyx_n_s_fluor
#define __pyx_n_s_fminbound __pyx_mstate_global->__pyx_n_s_fminbound
#define __pyx_n_s_foo __pyx_mstate_global->__pyx_n_s_foo
#define __pyx_n_u_ftol __pyx_mstate_global->__pyx_n_u_ftol
#define __pyx_n_s_g __pyx_mstate_global->__pyx_n_s_g
#define __pyx_n_s_g11g11 __pyx_mstate_global->__pyx_n_s_g11g11
#define __pyx_n_s_g11g12 __pyx_mstate_global->__pyx_n_s_g11g12
#define __pyx_n_s_g12 __pyx_mstate_global->__pyx_n_s_g12
#define __pyx_n_s_g2 __pyx_mstate_global->__pyx_n_s_g2
#define __pyx_n_s_g_converged __pyx_mstate_global->__pyx_n_s_g_converged
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get_c __pyx_mstate_global->__pyx_n_s_get_c
#define __pyx_n_s_get_c_of_last_pool __pyx_mstate_global->__pyx_n_s_get_c_of_last_pool
#define __pyx_n_s_get_l_of_last_pool __pyx_mstate_global->__pyx_n_s_get_l_of_last_pool
#define __pyx_n_s_get_l_of_pool __pyx_mstate_global->__pyx_n_s_get_l_of_pool
#define __pyx_n_s_get_s __pyx_mstate_global->__pyx_n_s_get_s
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_u_gtol __pyx_mstate_global->__pyx_n_u_gtol
#define __pyx_n_s_h __pyx_mstate_global->__pyx_n_s_h
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_idx __pyx_mstate_global->__pyx_n_s_idx
#define __pyx_n_s_idx_from_end __pyx_mstate_global->__pyx_n_s_idx_from_end
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_inf __pyx_mstate_global->__pyx_n_s_inf
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_j __pyx_mstate_global->__pyx_n_s_j
#define __pyx_n_s_k __pyx_mstate_global->__pyx_n_s_k
#define __pyx_n_s_l __pyx_mstate_global->__pyx_n_s_l
#define __pyx_n_s_lam __pyx_mstate_global->__pyx_n_s_lam
#define __pyx_n_s_ll __pyx_mstate_global->__pyx_n_s_ll
#define __pyx_n_s_lls __pyx_mstate_global->__pyx_n_s_lls
#define __pyx_n_s_ma __pyx_mstate_global->__pyx_n_s_ma
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_max __pyx_mstate_global->__pyx_n_s_max
#define __pyx_n_s_max_iter __pyx_mstate_global->__pyx_n_s_max_iter
#define __pyx_n_s_maxfun __pyx_mstate_global->__pyx_n_s_maxfun
#define __pyx_n_u_maxiter __pyx_mstate_global->__pyx_n_u_maxiter
#define __pyx_n_s_mean __pyx_mstate_global->__pyx_n_s_mean
#define __pyx_n_s_method __pyx_mstate_global->__pyx_n_s_method
#define __pyx_n_s_minimize __pyx_mstate_global->__pyx_n_s_minimize
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_n_s_newpool __pyx_mstate_global->__pyx_n_s_newpool
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_num __pyx_mstate_global->__pyx_n_s_num
#define __pyx_n_s_num_empty_samples __pyx_mstate_global->__pyx_n_s_num_empty_samples
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor
#define __pyx_n_s_oasis __pyx_mstate_global->__pyx_n_s_oasis
#define __pyx_n_s_oasis1strun __pyx_mstate_global->__pyx_n_s_oasis1strun
#define __pyx_n_s_oasisAR1 __pyx_mstate_global->__pyx_n_s_oasisAR1
#define __pyx_n_s_opt __pyx_mstate_global->__pyx_n_s_opt
#define __pyx_n_s_optimize_b __pyx_mstate_global->__pyx_n_s_optimize_b
#define __pyx_n_s_optimize_g __pyx_mstate_global->__pyx_n_s_optimize_g
#define __pyx_n_s_options __pyx_mstate_global->__pyx_n_s_options
#define __pyx_n_s_p __pyx_mstate_global->__pyx_n_s_p
#define __pyx_n_s_penalty __pyx_mstate_global->__pyx_n_s_penalty
#define __pyx_n_s_percentile __pyx_mstate_global->__pyx_n_s_percentile
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_pos __pyx_mstate_global->__pyx_n_s_pos
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_OASIS __pyx_mstate_global->__pyx_n_s_pyx_unpickle_OASIS
#define __pyx_n_s_q __pyx_mstate_global->__pyx_n_s_q
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_ravel __pyx_mstate_global->__pyx_n_s_ravel
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_remove_last_pool __pyx_mstate_global->__pyx_n_s_remove_last_pool
#define __pyx_n_s_res __pyx_mstate_global->__pyx_n_s_res
#define __pyx_n_s_reshape __pyx_mstate_global->__pyx_n_s_reshape
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_n_s_s_min __pyx_mstate_global->__pyx_n_s_s_min
#define __pyx_n_s_scipy_optimize __pyx_mstate_global->__pyx_n_s_scipy_optimize
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_set_poolvalue __pyx_mstate_global->__pyx_n_s_set_poolvalue
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_sn __pyx_mstate_global->__pyx_n_s_sn
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_sum __pyx_mstate_global->__pyx_n_s_sum
#define __pyx_n_s_t __pyx_mstate_global->__pyx_n_s_t
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_thresh __pyx_mstate_global->__pyx_n_s_thresh
#define __pyx_n_s_tmp __pyx_mstate_global->__pyx_n_s_tmp
#define __pyx_n_s_tmp2 __pyx_mstate_global->__pyx_n_s_tmp2
#define __pyx_n_s_unique __pyx_mstate_global->__pyx_n_s_unique
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_val __pyx_mstate_global->__pyx_n_s_val
#define __pyx_n_s_w __pyx_mstate_global->__pyx_n_s_w
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_u_x __pyx_mstate_global->__pyx_n_u_x
#define __pyx_n_s_xtol __pyx_mstate_global->__pyx_n_s_xtol
#define __pyx_n_s_y __pyx_mstate_global->__pyx_n_s_y
#define __pyx_n_s_yt __pyx_mstate_global->__pyx_n_s_yt
#define __pyx_n_s_yt_2 __pyx_mstate_global->__pyx_n_s_yt_2
#define __pyx_n_s_yy __pyx_mstate_global->__pyx_n_s_yy
#define __pyx_n_s_zeros __pyx_mstate_global->__pyx_n_s_zeros
#define __pyx_n_s_zeros_like __pyx_mstate_global->__pyx_n_s_zeros_like
#define __pyx_float__001 __pyx_mstate_global->__pyx_float__001
#define __pyx_float__999 __pyx_mstate_global->__pyx_float__999
#define __pyx_float_1eneg_4 __pyx_mstate_global->__pyx_float_1eneg_4
#define __pyx_float_1eneg_9 __pyx_mstate_global->__pyx_float_1eneg_9
#define __pyx_float_1eneg_04 __pyx_mstate_global->__pyx_float_1eneg_04
#define __pyx_float_1eneg_05 __pyx_mstate_global->__pyx_float_1eneg_05
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_15 __pyx_mstate_global->__pyx_int_15
#define __pyx_int_50 __pyx_mstate_global->__pyx_int_50
#define __pyx_int_1000 __pyx_mstate_global->__pyx_int_1000
#define __pyx_int_66752632 __pyx_mstate_global->__pyx_int_66752632
#define __pyx_int_69716847 __pyx_mstate_global->__pyx_int_69716847
#define __pyx_int_140354815 __pyx_mstate_global->__pyx_int_140354815
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_k__9 __pyx_mstate_global->__pyx_k__9
#define __pyx_k__10 __pyx_mstate_global->__pyx_k__10
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_slice__7 __pyx_mstate_global->__pyx_slice__7
#define __pyx_slice__8 __pyx_mstate_global->__pyx_slice__8
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_slice__27 __pyx_mstate_global->__pyx_slice__27
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__41 __pyx_mstate_global->__pyx_tuple__41
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
/* #### Code section: module_code ### */

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert__to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":12
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool")
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

static struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(PyObject *__pyx_v_obj) {
  struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", 1);

  /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 */
  __pyx_t_1 = (!PyMapping_Check(__pyx_v_obj));
  if (__pyx_t_1) {

    /* "FromPyStructUtility":15
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = __Pyx_RaiseUnexpectedTypeError(((char const *)"a mapping"), __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 15, __pyx_L1_error)

    /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 */
  }

  /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['v']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":18
 * 
 *     try:
 *         value = obj['v']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'v'")
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_v); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 18, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_value = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['v']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "FromPyStructUtility":19
 *     try:
 *         value = obj['v']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":20
 *         value = obj['v']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'v'")             # <<<<<<<<<<<<<<
 *     result.v = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 20, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 20, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;

    /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['v']
 *     except KeyError:
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":21
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['w']
 */
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_10 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_v_result.v = __pyx_t_10;

  /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['w']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":23
 *     result.v = value
 *     try:
 *         value = obj['w']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'w'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_w); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['w']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":24
 *     try:
 *         value = obj['w']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":25
 *         value = obj['w']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'w'")             # <<<<<<<<<<<<<<
 *     result.w = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 25, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 25, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;

    /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['w']
 *     except KeyError:
 */
    __pyx_L14_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":26
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['t']
 */
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_10 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_v_result.w = __pyx_t_10;

  /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['t']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":28
 *     result.w = value
 *     try:
 *         value = obj['t']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 't'")
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_t); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 28, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['t']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L25_try_end;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":29
 *     try:
 *         value = obj['t']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 29, __pyx_L22_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":30
 *         value = obj['t']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 't'")             # <<<<<<<<<<<<<<
 *     result.t = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 30, __pyx_L22_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 30, __pyx_L22_except_error)
    }
    goto __pyx_L22_except_error;

    /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['t']
 *     except KeyError:
 */
    __pyx_L22_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L25_try_end:;
  }

  /* "FromPyStructUtility":31
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['l']
 */
  __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_v_result.t = __pyx_t_11;

  /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['l']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":33
 *     result.t = value
 *     try:
 *         value = obj['l']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'l'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_l); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 33, __pyx_L28_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['l']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L33_try_end;
    __pyx_L28_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":34
 *     try:
 *         value = obj['l']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'l'")
 *     result.l = value
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 34, __pyx_L30_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":35
 *         value = obj['l']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'l'")             # <<<<<<<<<<<<<<
 *     result.l = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 35, __pyx_L30_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 35, __pyx_L30_except_error)
    }
    goto __pyx_L30_except_error;

    /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['l']
 *     except KeyError:
 */
    __pyx_L30_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L33_try_end:;
  }

  /* "FromPyStructUtility":36
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'l'")
 *     result.l = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 36, __pyx_L1_error)
  __pyx_v_result.l = __pyx_t_11;

  /* "FromPyStructUtility":37
 *         raise ValueError("No value specified for struct attribute 'l'")
 *     result.l = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":12
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool")
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool")
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(PyObject *__pyx_v_o) {
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert__from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool")
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE>  __pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely((__pyx_t_5 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":114
 * 
 * @cname("__Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef inline list __Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", 1);

  /* "carray.to_py":117
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":118
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":119
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":120
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":121
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":122
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":114
 * 
 * @cname("__Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef inline list __Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":126
 * 
 * @cname("__Pyx_carray_to_tuple___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef inline tuple __Pyx_carray_to_tuple___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", 1);

  /* "carray.to_py":129
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":130
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":131
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":132
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":133
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":134
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":126
 * 
 * @cname("__Pyx_carray_to_tuple___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef inline tuple __Pyx_carray_to_tuple___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.from_py":79
 * 
 * @cname("__Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef int __Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

static int __Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(PyObject *__pyx_v_o, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_11;
  char const *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", 1);

  /* "carray.from_py":80
 * @cname("__Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef int __Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length             # <<<<<<<<<<<<<<
 *     try:
 *         i = len(o)
 */
  __pyx_v_i = __pyx_v_length;

  /* "carray.from_py":81
 * cdef int __Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "carray.from_py":82
 *     cdef Py_ssize_t i = length
 *     try:
 *         i = len(o)             # <<<<<<<<<<<<<<
 *     except (TypeError, OverflowError):
 *         pass
 */
      __pyx_t_4 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 82, __pyx_L3_error)
      __pyx_v_i = __pyx_t_4;

      /* "carray.from_py":81
 * cdef int __Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "carray.from_py":83
 *     try:
 *         i = len(o)
 *     except (TypeError, OverflowError):             # <<<<<<<<<<<<<<
 *         pass
 *     if i == length:
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches2(__pyx_builtin_TypeError, __pyx_builtin_OverflowError);
    if (__pyx_t_5) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "carray.from_py":81
 * cdef int __Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "carray.from_py":85
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  __pyx_t_6 = (__pyx_v_i == __pyx_v_length);
  if (__pyx_t_6) {

    /* "carray.from_py":86
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
      __pyx_t_7 = __pyx_v_o; __Pyx_INCREF(__pyx_t_7);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 86, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 86, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 86, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(1, 86, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 86, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 86, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(1, 86, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 86, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 86, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_v_i = __pyx_t_4;
      __pyx_t_4 = (__pyx_t_4 + 1);

      /* "carray.from_py":87
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      __pyx_t_6 = (__pyx_v_i >= __pyx_v_length);
      if (__pyx_t_6) {

        /* "carray.from_py":88
 *         for i, item in enumerate(o):
 *             if i >= length:
 *                 break             # <<<<<<<<<<<<<<
 *             v[i] = item
 *         else:
 */
        goto __pyx_L11_break;

        /* "carray.from_py":87
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      }

      /* "carray.from_py":89
 *             if i >= length:
 *                 break
 *             v[i] = item             # <<<<<<<<<<<<<<
 *         else:
 *             i += 1  # convert index to length
 */
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely((__pyx_t_11 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 89, __pyx_L1_error)
      (__pyx_v_v[__pyx_v_i]) = __pyx_t_11;

      /* "carray.from_py":86
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L13_for_else;
    __pyx_L11_break:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L14_for_end;
    /*else*/ {
      __pyx_L13_for_else:;

      /* "carray.from_py":91
 *             v[i] = item
 *         else:
 *             i += 1  # convert index to length             # <<<<<<<<<<<<<<
 *             if i == length:
 *                 return 0
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "carray.from_py":92
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      __pyx_t_6 = (__pyx_v_i == __pyx_v_length);
      if (__pyx_t_6) {

        /* "carray.from_py":93
 *             i += 1  # convert index to length
 *             if i == length:
 *                 return 0             # <<<<<<<<<<<<<<
 * 
 *     PyErr_Format(
 */
        __pyx_r = 0;
        goto __pyx_L0;

        /* "carray.from_py":92
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      }
    }
    __pyx_L14_for_end:;

    /* "carray.from_py":85
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  }

  /* "carray.from_py":98
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 *          if i >= length else             # <<<<<<<<<<<<<<
 *          "not enough values found during array assignment, expected %zd, got %zd"),
 *         length, i)
 */
  __pyx_t_6 = (__pyx_v_i >= __pyx_v_length);
  if (__pyx_t_6) {
    __pyx_t_12 = ((char const *)"too many values found during array assignment, expected %zd");
  } else {
    __pyx_t_12 = ((char const *)"not enough values found during array assignment, expected %zd, got %zd");
  }

  /* "carray.from_py":95
 *                 return 0
 * 
 *     PyErr_Format(             # <<<<<<<<<<<<<<
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 */
  __pyx_t_7 = PyErr_Format(__pyx_builtin_IndexError, __pyx_t_12, __pyx_v_length, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "carray.from_py":79
 * 
 * @cname("__Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE")
 * cdef int __Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("carray.from_py.__Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":245
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":248
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":245
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":251
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":254
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":251
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":260
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":263
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":268
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":263
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":271
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":275
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":271
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":278
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":281
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":278
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":284
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":290
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":284
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":776
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":776
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":786
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":790
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":792
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":968
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":969
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":970
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 970, __pyx_L1_error)

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":968
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":972
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":973
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":974
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":975
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":974
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":976
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":972
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":980
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":981
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":982
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 982, __pyx_L3_error)

      /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":981
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":983
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 983, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":984
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 984, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 984, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":981
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":980
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":986
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":987
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":988
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 988, __pyx_L3_error)

      /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":987
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":989
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 989, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":990
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 990, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 990, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":987
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":986
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":992
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 1);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":993
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":994
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 994, __pyx_L3_error)

      /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":993
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":995
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 995, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":996
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 996, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 996, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":993
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":992
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":999
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1011
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":999
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1014
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1026
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1014
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1029
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1036
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1029
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1039
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1043
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1039
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1046
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1050
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1046
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self):
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self):
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":25
 * 
 * 
 * cdef min1000(a):             # <<<<<<<<<<<<<<
 *     return a if a < 1000 else 1000
 * 
 */

static PyObject *__pyx_f_6caiman_17source_extraction_4cnmf_5oasis_min1000(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min1000", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":26
 * 
 * cdef min1000(a):
 *     return a if a < 1000 else 1000             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_a, __pyx_int_1000, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_v_a);
    __pyx_t_1 = __pyx_v_a;
  } else {
    __Pyx_INCREF(__pyx_int_1000);
    __pyx_t_1 = __pyx_int_1000;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":25
 * 
 * 
 * cdef min1000(a):             # <<<<<<<<<<<<<<
 *     return a if a < 1000 else 1000
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.min1000", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":83
 *         vector[SINGLE] _y
 * 
 *     def __init__(self, g, lam=0, s_min=0, b=0, num_empty_samples=0, g2=0):             # <<<<<<<<<<<<<<
 *         # save the parameters as attributes
 *         # self.p = len(np.ravel(g))
 */

/* Python wrapper */
static int __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_lam = 0;
  PyObject *__pyx_v_s_min = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_num_empty_samples = 0;
  PyObject *__pyx_v_g2 = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_g,&__pyx_n_s_lam,&__pyx_n_s_s_min,&__pyx_n_s_b,&__pyx_n_s_num_empty_samples,&__pyx_n_s_g2,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[4] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[5] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_g)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lam);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s_min);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num_empty_samples);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_g2);
          if (value) { values[5] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 83, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_g = values[0];
    __pyx_v_lam = values[1];
    __pyx_v_s_min = values[2];
    __pyx_v_b = values[3];
    __pyx_v_num_empty_samples = values[4];
    __pyx_v_g2 = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 6, __pyx_nargs); __PYX_ERR(0, 83, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS___init__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self), __pyx_v_g, __pyx_v_lam, __pyx_v_s_min, __pyx_v_b, __pyx_v_num_empty_samples, __pyx_v_g2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS___init__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_g, PyObject *__pyx_v_lam, PyObject *__pyx_v_s_min, PyObject *__pyx_v_b, PyObject *__pyx_v_num_empty_samples, PyObject *__pyx_v_g2) {
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_lg;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_ld;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_lr;
  Py_ssize_t __pyx_v_k;
  struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_v_newpool;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  unsigned int __pyx_t_10;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_11;
  std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE>  __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":89
 *         cdef Py_ssize_t k
 *         cdef Pool newpool
 *         self.g = g             # <<<<<<<<<<<<<<
 *         self.g2 = g2
 *         self.lam = lam
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_g); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_v_self->g = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":90
 *         cdef Pool newpool
 *         self.g = g
 *         self.g2 = g2             # <<<<<<<<<<<<<<
 *         self.lam = lam
 *         self.s_min = s_min
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_g2); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_v_self->g2 = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":91
 *         self.g = g
 *         self.g2 = g2
 *         self.lam = lam             # <<<<<<<<<<<<<<
 *         self.s_min = s_min
 *         self.b = b
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_lam); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_v_self->lam = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":92
 *         self.g2 = g2
 *         self.lam = lam
 *         self.s_min = s_min             # <<<<<<<<<<<<<<
 *         self.b = b
 *         self.P = []
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_s_min); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_v_self->s_min = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":93
 *         self.lam = lam
 *         self.s_min = s_min
 *         self.b = b             # <<<<<<<<<<<<<<
 *         self.P = []
 *         # precompute
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_b); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L1_error)
  __pyx_v_self->b = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":94
 *         self.s_min = s_min
 *         self.b = b
 *         self.P = []             # <<<<<<<<<<<<<<
 *         # precompute
 *         if g2 == 0:  # AR(1)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->P = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "caiman/source_extraction/cnmf/oasis.pyx":96
 *         self.P = []
 *         # precompute
 *         if g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             # calc explicit kernel h just once; length should be >=max ISI
 *             lg = log(g)
 */
  __pyx_t_4 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_g2, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 96, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":98
 *         if g2 == 0:  # AR(1)
 *             # calc explicit kernel h just once; length should be >=max ISI
 *             lg = log(g)             # <<<<<<<<<<<<<<
 *             for k in range(1000):
 *                 self.h[k] = exp(lg * k)
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_g); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L1_error)
    __pyx_v_lg = log(__pyx_t_5);

    /* "caiman/source_extraction/cnmf/oasis.pyx":99
 *             # calc explicit kernel h just once; length should be >=max ISI
 *             lg = log(g)
 *             for k in range(1000):             # <<<<<<<<<<<<<<
 *                 self.h[k] = exp(lg * k)
 *             if num_empty_samples > 0:
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 0x3E8; __pyx_t_6+=1) {
      __pyx_v_k = __pyx_t_6;

      /* "caiman/source_extraction/cnmf/oasis.pyx":100
 *             lg = log(g)
 *             for k in range(1000):
 *                 self.h[k] = exp(lg * k)             # <<<<<<<<<<<<<<
 *             if num_empty_samples > 0:
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 */
      (__pyx_v_self->h[__pyx_v_k]) = exp((__pyx_v_lg * __pyx_v_k));
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":101
 *             for k in range(1000):
 *                 self.h[k] = exp(lg * k)
 *             if num_empty_samples > 0:             # <<<<<<<<<<<<<<
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_num_empty_samples, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":102
 *                 self.h[k] = exp(lg * k)
 *             if num_empty_samples > 0:
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)             # <<<<<<<<<<<<<<
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 */
      __pyx_t_2 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_v_num_empty_samples, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyNumber_Power(__pyx_v_g, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_7, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_7, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_newpool.w = __pyx_t_1;

      /* "caiman/source_extraction/cnmf/oasis.pyx":103
 *             if num_empty_samples > 0:
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples             # <<<<<<<<<<<<<<
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples
 */
      __pyx_t_1 = 0.0;
      __pyx_t_6 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num_empty_samples); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L1_error)
      __pyx_v_newpool.v = __pyx_t_1;
      __pyx_v_newpool.t = __pyx_t_6;
      __pyx_v_newpool.l = __pyx_t_9;

      /* "caiman/source_extraction/cnmf/oasis.pyx":104
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)             # <<<<<<<<<<<<<<
 *                 self.t = num_empty_samples
 *                 self.i = 0  # index of last pool
 */
      try {
        __pyx_v_self->P.push_back(__pyx_v_newpool);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 104, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":105
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples             # <<<<<<<<<<<<<<
 *                 self.i = 0  # index of last pool
 *             else:
 */
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_empty_samples); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
      __pyx_v_self->t = __pyx_t_10;

      /* "caiman/source_extraction/cnmf/oasis.pyx":106
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples
 *                 self.i = 0  # index of last pool             # <<<<<<<<<<<<<<
 *             else:
 *                 self.t = 0
 */
      __pyx_v_self->i = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":101
 *             for k in range(1000):
 *                 self.h[k] = exp(lg * k)
 *             if num_empty_samples > 0:             # <<<<<<<<<<<<<<
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 */
      goto __pyx_L6;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":108
 *                 self.i = 0  # index of last pool
 *             else:
 *                 self.t = 0             # <<<<<<<<<<<<<<
 *                 self.i = -1
 *         else:  # AR(2)
 */
    /*else*/ {
      __pyx_v_self->t = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":109
 *             else:
 *                 self.t = 0
 *                 self.i = -1             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             self.d = (g + sqrt(g * g + 4 * g2)) / 2
 */
      __pyx_v_self->i = -1L;
    }
    __pyx_L6:;

    /* "caiman/source_extraction/cnmf/oasis.pyx":96
 *         self.P = []
 *         # precompute
 *         if g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             # calc explicit kernel h just once; length should be >=max ISI
 *             lg = log(g)
 */
    goto __pyx_L3;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":111
 *                 self.i = -1
 *         else:  # AR(2)
 *             self.d = (g + sqrt(g * g + 4 * g2)) / 2             # <<<<<<<<<<<<<<
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2
 *             ld = log(self.d)
 */
  /*else*/ {
    __pyx_t_7 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_MultiplyCObj(__pyx_int_4, __pyx_v_g2, 4, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyNumber_Add(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(sqrt(__pyx_t_5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyNumber_Add(__pyx_v_g, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_8, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->d = __pyx_t_1;

    /* "caiman/source_extraction/cnmf/oasis.pyx":112
 *         else:  # AR(2)
 *             self.d = (g + sqrt(g * g + 4 * g2)) / 2
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2             # <<<<<<<<<<<<<<
 *             ld = log(self.d)
 *             if self.d == self.r:
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_MultiplyCObj(__pyx_int_4, __pyx_v_g2, 4, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble(sqrt(__pyx_t_5)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Subtract(__pyx_v_g, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_8, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_self->r = __pyx_t_1;

    /* "caiman/source_extraction/cnmf/oasis.pyx":113
 *             self.d = (g + sqrt(g * g + 4 * g2)) / 2
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2
 *             ld = log(self.d)             # <<<<<<<<<<<<<<
 *             if self.d == self.r:
 *                 for k in range(1000):
 */
    __pyx_v_ld = log(__pyx_v_self->d);

    /* "caiman/source_extraction/cnmf/oasis.pyx":114
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2
 *             ld = log(self.d)
 *             if self.d == self.r:             # <<<<<<<<<<<<<<
 *                 for k in range(1000):
 *                     self.h[k] = exp(ld * k) * (k + 1)
 */
    __pyx_t_4 = (__pyx_v_self->d == __pyx_v_self->r);
    if (__pyx_t_4) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":115
 *             ld = log(self.d)
 *             if self.d == self.r:
 *                 for k in range(1000):             # <<<<<<<<<<<<<<
 *                     self.h[k] = exp(ld * k) * (k + 1)
 *             else:
 */
      for (__pyx_t_9 = 0; __pyx_t_9 < 0x3E8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "caiman/source_extraction/cnmf/oasis.pyx":116
 *             if self.d == self.r:
 *                 for k in range(1000):
 *                     self.h[k] = exp(ld * k) * (k + 1)             # <<<<<<<<<<<<<<
 *             else:
 *                 lr = log(self.r)
 */
        (__pyx_v_self->h[__pyx_v_k]) = (exp((__pyx_v_ld * __pyx_v_k)) * (__pyx_v_k + 1));
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":114
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2
 *             ld = log(self.d)
 *             if self.d == self.r:             # <<<<<<<<<<<<<<
 *                 for k in range(1000):
 *                     self.h[k] = exp(ld * k) * (k + 1)
 */
      goto __pyx_L7;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":118
 *                     self.h[k] = exp(ld * k) * (k + 1)
 *             else:
 *                 lr = log(self.r)             # <<<<<<<<<<<<<<
 *                 lg = self.d - self.r
 *                 for k in range(1, 1001):
 */
    /*else*/ {
      __pyx_v_lr = log(__pyx_v_self->r);

      /* "caiman/source_extraction/cnmf/oasis.pyx":119
 *             else:
 *                 lr = log(self.r)
 *                 lg = self.d - self.r             # <<<<<<<<<<<<<<
 *                 for k in range(1, 1001):
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg
 */
      __pyx_v_lg = (__pyx_v_self->d - __pyx_v_self->r);

      /* "caiman/source_extraction/cnmf/oasis.pyx":120
 *                 lr = log(self.r)
 *                 lg = self.d - self.r
 *                 for k in range(1, 1001):             # <<<<<<<<<<<<<<
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg
 *             self.g12[0] = 0
 */
      for (__pyx_t_9 = 1; __pyx_t_9 < 0x3E9; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "caiman/source_extraction/cnmf/oasis.pyx":121
 *                 lg = self.d - self.r
 *                 for k in range(1, 1001):
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg             # <<<<<<<<<<<<<<
 *             self.g12[0] = 0
 *             for k in range(1, 1000):
 */
        __pyx_t_5 = (exp((__pyx_v_ld * __pyx_v_k)) - exp((__pyx_v_lr * __pyx_v_k)));
        if (unlikely(__pyx_v_lg == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 121, __pyx_L1_error)
        }
        (__pyx_v_self->h[(__pyx_v_k - 1)]) = (__pyx_t_5 / ((double)__pyx_v_lg));
      }
    }
    __pyx_L7:;

    /* "caiman/source_extraction/cnmf/oasis.pyx":122
 *                 for k in range(1, 1001):
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg
 *             self.g12[0] = 0             # <<<<<<<<<<<<<<
 *             for k in range(1, 1000):
 *                 self.g12[k] = g2 * self.h[k - 1]
 */
    (__pyx_v_self->g12[0]) = 0.0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":123
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg
 *             self.g12[0] = 0
 *             for k in range(1, 1000):             # <<<<<<<<<<<<<<
 *                 self.g12[k] = g2 * self.h[k - 1]
 *             self.g11g11[0] = 1  # h[0] * h[0]
 */
    for (__pyx_t_9 = 1; __pyx_t_9 < 0x3E8; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "caiman/source_extraction/cnmf/oasis.pyx":124
 *             self.g12[0] = 0
 *             for k in range(1, 1000):
 *                 self.g12[k] = g2 * self.h[k - 1]             # <<<<<<<<<<<<<<
 *             self.g11g11[0] = 1  # h[0] * h[0]
 *             self.g11g12[0] = 0  # h[0] * g12[0]
 */
      __pyx_t_7 = PyFloat_FromDouble((__pyx_v_self->h[(__pyx_v_k - 1)])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyNumber_Multiply(__pyx_v_g2, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      (__pyx_v_self->g12[__pyx_v_k]) = __pyx_t_1;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":125
 *             for k in range(1, 1000):
 *                 self.g12[k] = g2 * self.h[k - 1]
 *             self.g11g11[0] = 1  # h[0] * h[0]             # <<<<<<<<<<<<<<
 *             self.g11g12[0] = 0  # h[0] * g12[0]
 *             for k in range(1, 1000):
 */
    (__pyx_v_self->g11g11[0]) = 1.0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":126
 *                 self.g12[k] = g2 * self.h[k - 1]
 *             self.g11g11[0] = 1  # h[0] * h[0]
 *             self.g11g12[0] = 0  # h[0] * g12[0]             # <<<<<<<<<<<<<<
 *             for k in range(1, 1000):
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 */
    (__pyx_v_self->g11g12[0]) = 0.0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":127
 *             self.g11g11[0] = 1  # h[0] * h[0]
 *             self.g11g12[0] = 0  # h[0] * g12[0]
 *             for k in range(1, 1000):             # <<<<<<<<<<<<<<
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 */
    for (__pyx_t_9 = 1; __pyx_t_9 < 0x3E8; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "caiman/source_extraction/cnmf/oasis.pyx":128
 *             self.g11g12[0] = 0  # h[0] * g12[0]
 *             for k in range(1, 1000):
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]             # <<<<<<<<<<<<<<
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 *             if num_empty_samples > 0:
 */
      (__pyx_v_self->g11g11[__pyx_v_k]) = ((__pyx_v_self->g11g11[(__pyx_v_k - 1)]) + ((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->h[__pyx_v_k])));

      /* "caiman/source_extraction/cnmf/oasis.pyx":129
 *             for k in range(1, 1000):
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]             # <<<<<<<<<<<<<<
 *             if num_empty_samples > 0:
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 */
      (__pyx_v_self->g11g12[__pyx_v_k]) = ((__pyx_v_self->g11g12[(__pyx_v_k - 1)]) + ((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->g12[__pyx_v_k])));
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":130
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 *             if num_empty_samples > 0:             # <<<<<<<<<<<<<<
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 */
    __pyx_t_8 = PyObject_RichCompare(__pyx_v_num_empty_samples, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 130, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_4) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":131
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 *             if num_empty_samples > 0:
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples             # <<<<<<<<<<<<<<
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples
 */
      __pyx_t_1 = 0.0;
      __pyx_t_11 = 0.0;
      __pyx_t_9 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num_empty_samples); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L1_error)
      __pyx_v_newpool.v = __pyx_t_1;
      __pyx_v_newpool.w = __pyx_t_11;
      __pyx_v_newpool.t = __pyx_t_9;
      __pyx_v_newpool.l = __pyx_t_6;

      /* "caiman/source_extraction/cnmf/oasis.pyx":132
 *             if num_empty_samples > 0:
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)             # <<<<<<<<<<<<<<
 *                 self.t = num_empty_samples
 *                 self.i = 0  # index of last pool
 */
      try {
        __pyx_v_self->P.push_back(__pyx_v_newpool);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 132, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":133
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples             # <<<<<<<<<<<<<<
 *                 self.i = 0  # index of last pool
 *             else:
 */
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_empty_samples); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L1_error)
      __pyx_v_self->t = __pyx_t_10;

      /* "caiman/source_extraction/cnmf/oasis.pyx":134
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples
 *                 self.i = 0  # index of last pool             # <<<<<<<<<<<<<<
 *             else:
 *                 self.t = 0
 */
      __pyx_v_self->i = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":130
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 *             if num_empty_samples > 0:             # <<<<<<<<<<<<<<
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 */
      goto __pyx_L16;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":136
 *                 self.i = 0  # index of last pool
 *             else:
 *                 self.t = 0             # <<<<<<<<<<<<<<
 *                 self.i = -1
 *             self._y = [0] * num_empty_samples
 */
    /*else*/ {
      __pyx_v_self->t = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":137
 *             else:
 *                 self.t = 0
 *                 self.i = -1             # <<<<<<<<<<<<<<
 *             self._y = [0] * num_empty_samples
 * 
 */
      __pyx_v_self->i = -1L;
    }
    __pyx_L16:;

    /* "caiman/source_extraction/cnmf/oasis.pyx":138
 *                 self.t = 0
 *                 self.i = -1
 *             self._y = [0] * num_empty_samples             # <<<<<<<<<<<<<<
 * 
 *     def fit_next(self, yt):
 */
    __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_8, 0, __pyx_int_0)) __PYX_ERR(0, 138, __pyx_L1_error);
    { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_8, __pyx_v_num_empty_samples); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_temp);
      __Pyx_DECREF(__pyx_t_8);
      __pyx_t_8 = __pyx_temp;
    }
    __pyx_t_12 = __pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_self->_y = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_12);
  }
  __pyx_L3:;

  /* "caiman/source_extraction/cnmf/oasis.pyx":83
 *         vector[SINGLE] _y
 * 
 *     def __init__(self, g, lam=0, s_min=0, b=0, num_empty_samples=0, g2=0):             # <<<<<<<<<<<<<<
 *         # save the parameters as attributes
 *         # self.p = len(np.ravel(g))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":140
 *             self._y = [0] * num_empty_samples
 * 
 *     def fit_next(self, yt):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3fit_next(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2fit_next, "\n        fit next time step t\n        ");
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3fit_next = {"fit_next", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3fit_next, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2fit_next};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3fit_next(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_yt = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fit_next (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_yt,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_yt)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "fit_next") < 0)) __PYX_ERR(0, 140, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_yt = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fit_next", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 140, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.fit_next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2fit_next(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self), __pyx_v_yt);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2fit_next(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_yt) {
  struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_v_newpool;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_5;
  unsigned int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_9;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_10;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_11;
  int __pyx_t_12;
  double __pyx_t_13;
  int __pyx_t_14;
  double __pyx_t_15;
  int __pyx_t_16;
  double __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fit_next", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":148
 *         cdef np.ndarray[SINGLE, ndim = 1] h, g12, g11g11, g11g12
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 */
  __pyx_t_1 = (__pyx_v_self->g2 == 0.0);
  if (__pyx_t_1) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":149
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             self.P.push_back(newpool)
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_yt, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->lam * (1.0 - __pyx_v_self->g))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_newpool.v = __pyx_t_5;

    /* "caiman/source_extraction/cnmf/oasis.pyx":150
 *         if self.g2 == 0:  # AR(1)
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1             # <<<<<<<<<<<<<<
 *             self.P.push_back(newpool)
 *             self.t += 1
 */
    __pyx_t_5 = 1.0;
    __pyx_t_6 = __pyx_v_self->t;
    __pyx_t_7 = 1;
    __pyx_v_newpool.w = __pyx_t_5;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_7;

    /* "caiman/source_extraction/cnmf/oasis.pyx":151
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             self.P.push_back(newpool)             # <<<<<<<<<<<<<<
 *             self.t += 1
 *             self.i += 1
 */
    try {
      __pyx_v_self->P.push_back(__pyx_v_newpool);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 151, __pyx_L1_error)
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":152
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             self.P.push_back(newpool)
 *             self.t += 1             # <<<<<<<<<<<<<<
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 */
    __pyx_v_self->t = (__pyx_v_self->t + 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":153
 *             self.P.push_back(newpool)
 *             self.t += 1
 *             self.i += 1             # <<<<<<<<<<<<<<
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +
 */
    __pyx_v_self->i = (__pyx_v_self->i + 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":154
 *             self.t += 1
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +
 *                     self.s_min > self.P[self.i].v / self.P[self.i].w)):
 */
    while (1) {
      __pyx_t_8 = (__pyx_v_self->i > 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L6_bool_binop_done;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":155
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +             # <<<<<<<<<<<<<<
 *                     self.s_min > self.P[self.i].v / self.P[self.i].w)):
 *                 self.i -= 1
 */
      __pyx_t_5 = (__pyx_v_self->P[(__pyx_v_self->i - 1)]).v;
      __pyx_t_9 = (__pyx_v_self->P[(__pyx_v_self->i - 1)]).w;
      if (unlikely(__pyx_t_9 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 155, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":156
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +
 *                     self.s_min > self.P[self.i].v / self.P[self.i].w)):             # <<<<<<<<<<<<<<
 *                 self.i -= 1
 *                 # merge two pools
 */
      __pyx_t_10 = (__pyx_v_self->P[__pyx_v_self->i]).v;
      __pyx_t_11 = (__pyx_v_self->P[__pyx_v_self->i]).w;
      if (unlikely(__pyx_t_11 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 156, __pyx_L1_error)
      }
      __pyx_t_8 = ((((__pyx_t_5 / __pyx_t_9) * pow(((double)__pyx_v_self->g), ((double)(__pyx_v_self->P[(__pyx_v_self->i - 1)]).l))) + __pyx_v_self->s_min) > (__pyx_t_10 / __pyx_t_11));
      __pyx_t_1 = __pyx_t_8;
      __pyx_L6_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":157
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +
 *                     self.s_min > self.P[self.i].v / self.P[self.i].w)):
 *                 self.i -= 1             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 self.P[self.i].v += self.P[self.i + 1].v * self.g**self.P[self.i].l
 */
      __pyx_v_self->i = (__pyx_v_self->i - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":159
 *                 self.i -= 1
 *                 # merge two pools
 *                 self.P[self.i].v += self.P[self.i + 1].v * self.g**self.P[self.i].l             # <<<<<<<<<<<<<<
 *                 self.P[self.i].w += self.P[self.i + 1].w * self.g**(2 * self.P[self.i].l)
 *                 self.P[self.i].l += self.P[self.i + 1].l
 */
      __pyx_t_7 = __pyx_v_self->i;
      (__pyx_v_self->P[__pyx_t_7]).v = ((__pyx_v_self->P[__pyx_t_7]).v + ((__pyx_v_self->P[(__pyx_v_self->i + 1)]).v * pow(((double)__pyx_v_self->g), ((double)(__pyx_v_self->P[__pyx_v_self->i]).l))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":160
 *                 # merge two pools
 *                 self.P[self.i].v += self.P[self.i + 1].v * self.g**self.P[self.i].l
 *                 self.P[self.i].w += self.P[self.i + 1].w * self.g**(2 * self.P[self.i].l)             # <<<<<<<<<<<<<<
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 self.P.pop_back()
 */
      __pyx_t_7 = __pyx_v_self->i;
      (__pyx_v_self->P[__pyx_t_7]).w = ((__pyx_v_self->P[__pyx_t_7]).w + ((__pyx_v_self->P[(__pyx_v_self->i + 1)]).w * pow(((double)__pyx_v_self->g), ((double)(2 * (__pyx_v_self->P[__pyx_v_self->i]).l)))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":161
 *                 self.P[self.i].v += self.P[self.i + 1].v * self.g**self.P[self.i].l
 *                 self.P[self.i].w += self.P[self.i + 1].w * self.g**(2 * self.P[self.i].l)
 *                 self.P[self.i].l += self.P[self.i + 1].l             # <<<<<<<<<<<<<<
 *                 self.P.pop_back()
 *         else:  # AR(2)
 */
      __pyx_t_7 = __pyx_v_self->i;
      (__pyx_v_self->P[__pyx_t_7]).l = ((__pyx_v_self->P[__pyx_t_7]).l + (__pyx_v_self->P[(__pyx_v_self->i + 1)]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":162
 *                 self.P[self.i].w += self.P[self.i + 1].w * self.g**(2 * self.P[self.i].l)
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 self.P.pop_back()             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             self._y.push_back(yt - self.b - self.lam * (1 - self.g - self.g2))
 */
      __pyx_v_self->P.pop_back();
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":148
 *         cdef np.ndarray[SINGLE, ndim = 1] h, g12, g11g11, g11g12
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 */
    goto __pyx_L3;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":164
 *                 self.P.pop_back()
 *         else:  # AR(2)
 *             self._y.push_back(yt - self.b - self.lam * (1 - self.g - self.g2))             # <<<<<<<<<<<<<<
 *             newpool.v = fmax(0, self._y[self.t])
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 */
  /*else*/ {
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_yt, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->lam * ((1.0 - __pyx_v_self->g) - __pyx_v_self->g2))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_11 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_self->_y.push_back(__pyx_t_11);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 164, __pyx_L1_error)
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":165
 *         else:  # AR(2)
 *             self._y.push_back(yt - self.b - self.lam * (1 - self.g - self.g2))
 *             newpool.v = fmax(0, self._y[self.t])             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             self.P.push_back(newpool)
 */
    __pyx_v_newpool.v = fmax(0.0, (__pyx_v_self->_y[__pyx_v_self->t]));

    /* "caiman/source_extraction/cnmf/oasis.pyx":166
 *             self._y.push_back(yt - self.b - self.lam * (1 - self.g - self.g2))
 *             newpool.v = fmax(0, self._y[self.t])
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1             # <<<<<<<<<<<<<<
 *             self.P.push_back(newpool)
 *             self.t += 1
 */
    __pyx_t_11 = __pyx_v_newpool.v;
    __pyx_t_6 = __pyx_v_self->t;
    __pyx_t_7 = 1;
    __pyx_v_newpool.w = __pyx_t_11;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_7;

    /* "caiman/source_extraction/cnmf/oasis.pyx":167
 *             newpool.v = fmax(0, self._y[self.t])
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             self.P.push_back(newpool)             # <<<<<<<<<<<<<<
 *             self.t += 1
 *             self.i += 1
 */
    try {
      __pyx_v_self->P.push_back(__pyx_v_newpool);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 167, __pyx_L1_error)
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":168
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             self.P.push_back(newpool)
 *             self.t += 1             # <<<<<<<<<<<<<<
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 */
    __pyx_v_self->t = (__pyx_v_self->t + 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":169
 *             self.P.push_back(newpool)
 *             self.t += 1
 *             self.i += 1             # <<<<<<<<<<<<<<
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /
 */
    __pyx_v_self->i = (__pyx_v_self->i + 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":170
 *             self.t += 1
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    (((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /
 *                         (self.d - self.r))
 */
    while (1) {
      __pyx_t_8 = (__pyx_v_self->i > 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":182
 *                         self.g12[self.P[self.i - 1].l] * self.P[self.i - 2].w)) >
 *                        self.P[self.i].v - self.s_min)
 *                     if self.i > 1 else             # <<<<<<<<<<<<<<
 *                     (self.P[self.i - 1].w * self.d > self.P[self.i].v - self.s_min))):
 *                 self.i -= 1
 */
      __pyx_t_12 = (__pyx_v_self->i > 1);
      if (__pyx_t_12) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":178
 *                         self.P[self.i - 2].w * self.d**(self.P[self.i - 1].l + 2) * \
 *                         (self.P[self.i - 1].l + 1)))
 *                        if self.P[self.i - 1].l >= 1000 else             # <<<<<<<<<<<<<<
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +
 *                         self.g12[self.P[self.i - 1].l] * self.P[self.i - 2].w)) >
 */
        __pyx_t_14 = ((__pyx_v_self->P[(__pyx_v_self->i - 1)]).l >= 0x3E8);
        if (__pyx_t_14) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":173
 *                    (((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /
 *                         (self.d - self.r))
 *                        if self.d != self.r else             # <<<<<<<<<<<<<<
 *                        (self.P[self.i - 1].v * self.d**self.P[self.i - 1].l * \
 *                         (self.P[self.i - 1].l + 1) -
 */
          __pyx_t_16 = (__pyx_v_self->d != __pyx_v_self->r);
          if (__pyx_t_16) {

            /* "caiman/source_extraction/cnmf/oasis.pyx":171
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /             # <<<<<<<<<<<<<<
 *                         (self.d - self.r))
 *                        if self.d != self.r else
 */
            __pyx_t_17 = ((__pyx_v_self->P[(__pyx_v_self->i - 1)]).v * pow(((double)__pyx_v_self->d), ((double)((__pyx_v_self->P[(__pyx_v_self->i - 1)]).l + 1))));

            /* "caiman/source_extraction/cnmf/oasis.pyx":172
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /
 *                         (self.d - self.r))             # <<<<<<<<<<<<<<
 *                        if self.d != self.r else
 *                        (self.P[self.i - 1].v * self.d**self.P[self.i - 1].l * \
 */
            __pyx_t_11 = (__pyx_v_self->d - __pyx_v_self->r);

            /* "caiman/source_extraction/cnmf/oasis.pyx":171
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /             # <<<<<<<<<<<<<<
 *                         (self.d - self.r))
 *                        if self.d != self.r else
 */
            if (unlikely(__pyx_t_11 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 171, __pyx_L1_error)
            }
            __pyx_t_15 = (__pyx_t_17 / ((double)__pyx_t_11));
          } else {

            /* "caiman/source_extraction/cnmf/oasis.pyx":175
 *                        if self.d != self.r else
 *                        (self.P[self.i - 1].v * self.d**self.P[self.i - 1].l * \
 *                         (self.P[self.i - 1].l + 1) -             # <<<<<<<<<<<<<<
 *                         self.P[self.i - 2].w * self.d**(self.P[self.i - 1].l + 2) * \
 *                         (self.P[self.i - 1].l + 1)))
 */
            __pyx_t_15 = ((((__pyx_v_self->P[(__pyx_v_self->i - 1)]).v * pow(((double)__pyx_v_self->d), ((double)(__pyx_v_self->P[(__pyx_v_self->i - 1)]).l))) * ((__pyx_v_self->P[(__pyx_v_self->i - 1)]).l + 1)) - (((__pyx_v_self->P[(__pyx_v_self->i - 2)]).w * pow(((double)__pyx_v_self->d), ((double)((__pyx_v_self->P[(__pyx_v_self->i - 1)]).l + 2)))) * ((__pyx_v_self->P[(__pyx_v_self->i - 1)]).l + 1)));
          }
          __pyx_t_13 = __pyx_t_15;
        } else {

          /* "caiman/source_extraction/cnmf/oasis.pyx":179
 *                         (self.P[self.i - 1].l + 1)))
 *                        if self.P[self.i - 1].l >= 1000 else
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +             # <<<<<<<<<<<<<<
 *                         self.g12[self.P[self.i - 1].l] * self.P[self.i - 2].w)) >
 *                        self.P[self.i].v - self.s_min)
 */
          __pyx_t_13 = (((__pyx_v_self->h[(__pyx_v_self->P[(__pyx_v_self->i - 1)]).l]) * (__pyx_v_self->P[(__pyx_v_self->i - 1)]).v) + ((__pyx_v_self->g12[(__pyx_v_self->P[(__pyx_v_self->i - 1)]).l]) * (__pyx_v_self->P[(__pyx_v_self->i - 2)]).w));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":181
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +
 *                         self.g12[self.P[self.i - 1].l] * self.P[self.i - 2].w)) >
 *                        self.P[self.i].v - self.s_min)             # <<<<<<<<<<<<<<
 *                     if self.i > 1 else
 *                     (self.P[self.i - 1].w * self.d > self.P[self.i].v - self.s_min))):
 */
        __pyx_t_8 = (__pyx_t_13 > ((__pyx_v_self->P[__pyx_v_self->i]).v - __pyx_v_self->s_min));
      } else {

        /* "caiman/source_extraction/cnmf/oasis.pyx":183
 *                        self.P[self.i].v - self.s_min)
 *                     if self.i > 1 else
 *                     (self.P[self.i - 1].w * self.d > self.P[self.i].v - self.s_min))):             # <<<<<<<<<<<<<<
 *                 self.i -= 1
 *                 # merge two pools
 */
        __pyx_t_8 = (((__pyx_v_self->P[(__pyx_v_self->i - 1)]).w * __pyx_v_self->d) > ((__pyx_v_self->P[__pyx_v_self->i]).v - __pyx_v_self->s_min));
      }
      __pyx_t_1 = __pyx_t_8;
      __pyx_L10_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":184
 *                     if self.i > 1 else
 *                     (self.P[self.i - 1].w * self.d > self.P[self.i].v - self.s_min))):
 *                 self.i -= 1             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 self.P[self.i].l += self.P[self.i + 1].l
 */
      __pyx_v_self->i = (__pyx_v_self->i - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":186
 *                 self.i -= 1
 *                 # merge two pools
 *                 self.P[self.i].l += self.P[self.i + 1].l             # <<<<<<<<<<<<<<
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:
 */
      __pyx_t_7 = __pyx_v_self->i;
      (__pyx_v_self->P[__pyx_t_7]).l = ((__pyx_v_self->P[__pyx_t_7]).l + (__pyx_v_self->P[(__pyx_v_self->i + 1)]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":187
 *                 # merge two pools
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 k = self.P[self.i].l - 1             # <<<<<<<<<<<<<<
 *                 if self.i > 0:
 *                     if k >= 1000:
 */
      __pyx_v_k = ((__pyx_v_self->P[__pyx_v_self->i]).l - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":188
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:             # <<<<<<<<<<<<<<
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 */
      __pyx_t_1 = (__pyx_v_self->i > 0);
      if (__pyx_t_1) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":189
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:
 *                     if k >= 1000:             # <<<<<<<<<<<<<<
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 */
        __pyx_t_1 = (__pyx_v_k >= 0x3E8);
        if (__pyx_t_1) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":190
 *                 if self.i > 0:
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate             # <<<<<<<<<<<<<<
 *                     tmp = 0
 *                     for j in range(min1000(self.P[self.i].l)):
 */
          __pyx_v_k = 0x3E7;

          /* "caiman/source_extraction/cnmf/oasis.pyx":189
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:
 *                     if k >= 1000:             # <<<<<<<<<<<<<<
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 */
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":191
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0             # <<<<<<<<<<<<<<
 *                     for j in range(min1000(self.P[self.i].l)):
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 */
        __pyx_v_tmp = 0.0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":192
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 *                     for j in range(min1000(self.P[self.i].l)):             # <<<<<<<<<<<<<<
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /
 */
        __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __pyx_f_6caiman_17source_extraction_4cnmf_5oasis_min1000(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_18 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_18 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_19 = __pyx_t_18;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_19; __pyx_t_7+=1) {
          __pyx_v_j = __pyx_t_7;

          /* "caiman/source_extraction/cnmf/oasis.pyx":193
 *                     tmp = 0
 *                     for j in range(min1000(self.P[self.i].l)):
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]             # <<<<<<<<<<<<<<
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /
 *                                         self.g11g11[k])
 */
          __pyx_v_tmp = (__pyx_v_tmp + ((__pyx_v_self->h[__pyx_v_j]) * (__pyx_v_self->_y[((__pyx_v_self->P[__pyx_v_self->i]).t + __pyx_v_j)])));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":194
 *                     for j in range(min1000(self.P[self.i].l)):
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /             # <<<<<<<<<<<<<<
 *                                         self.g11g11[k])
 *                     self.P[self.i].w = (self.h[k] * self.P[self.i].v +
 */
        __pyx_t_11 = (__pyx_v_tmp - ((__pyx_v_self->g11g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_self->i - 1)]).w));

        /* "caiman/source_extraction/cnmf/oasis.pyx":195
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /
 *                                         self.g11g11[k])             # <<<<<<<<<<<<<<
 *                     self.P[self.i].w = (self.h[k] * self.P[self.i].v +
 *                                         self.g12[k] * self.P[self.i - 1].w)
 */
        if (unlikely((__pyx_v_self->g11g11[__pyx_v_k]) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 194, __pyx_L1_error)
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":194
 *                     for j in range(min1000(self.P[self.i].l)):
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /             # <<<<<<<<<<<<<<
 *                                         self.g11g11[k])
 *                     self.P[self.i].w = (self.h[k] * self.P[self.i].v +
 */
        (__pyx_v_self->P[__pyx_v_self->i]).v = (__pyx_t_11 / (__pyx_v_self->g11g11[__pyx_v_k]));

        /* "caiman/source_extraction/cnmf/oasis.pyx":196
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /
 *                                         self.g11g11[k])
 *                     self.P[self.i].w = (self.h[k] * self.P[self.i].v +             # <<<<<<<<<<<<<<
 *                                         self.g12[k] * self.P[self.i - 1].w)
 *                 else:  # update first pool
 */
        (__pyx_v_self->P[__pyx_v_self->i]).w = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_self->i]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_self->i - 1)]).w));

        /* "caiman/source_extraction/cnmf/oasis.pyx":188
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:             # <<<<<<<<<<<<<<
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 */
        goto __pyx_L12;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":199
 *                                         self.g12[k] * self.P[self.i - 1].w)
 *                 else:  # update first pool
 *                     tmp = 0             # <<<<<<<<<<<<<<
 *                     for j in range(self.P[self.i].l):
 *                         tmp += self.d**j * self._y[j]
 */
      /*else*/ {
        __pyx_v_tmp = 0.0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":200
 *                 else:  # update first pool
 *                     tmp = 0
 *                     for j in range(self.P[self.i].l):             # <<<<<<<<<<<<<<
 *                         tmp += self.d**j * self._y[j]
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /
 */
        __pyx_t_7 = (__pyx_v_self->P[__pyx_v_self->i]).l;
        __pyx_t_20 = __pyx_t_7;
        for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
          __pyx_v_j = __pyx_t_21;

          /* "caiman/source_extraction/cnmf/oasis.pyx":201
 *                     tmp = 0
 *                     for j in range(self.P[self.i].l):
 *                         tmp += self.d**j * self._y[j]             # <<<<<<<<<<<<<<
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 */
          __pyx_v_tmp = (__pyx_v_tmp + (pow(((double)__pyx_v_self->d), ((double)__pyx_v_j)) * (__pyx_v_self->_y[__pyx_v_j])));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":202
 *                     for j in range(self.P[self.i].l):
 *                         tmp += self.d**j * self._y[j]
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /             # <<<<<<<<<<<<<<
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v
 */
        __pyx_t_11 = (__pyx_v_tmp * (1.0 - (__pyx_v_self->d * __pyx_v_self->d)));

        /* "caiman/source_extraction/cnmf/oasis.pyx":203
 *                         tmp += self.d**j * self._y[j]
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                             (1 - self.d**(2 * self.P[self.i].l)))             # <<<<<<<<<<<<<<
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v
 *                 self.P.pop_back()
 */
        __pyx_t_13 = (1.0 - pow(((double)__pyx_v_self->d), ((double)(2 * (__pyx_v_self->P[__pyx_v_self->i]).l))));

        /* "caiman/source_extraction/cnmf/oasis.pyx":202
 *                     for j in range(self.P[self.i].l):
 *                         tmp += self.d**j * self._y[j]
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /             # <<<<<<<<<<<<<<
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v
 */
        if (unlikely(__pyx_t_13 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 202, __pyx_L1_error)
        }
        (__pyx_v_self->P[__pyx_v_self->i]).v = fmax(0.0, (((double)__pyx_t_11) / __pyx_t_13));

        /* "caiman/source_extraction/cnmf/oasis.pyx":204
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v             # <<<<<<<<<<<<<<
 *                 self.P.pop_back()
 * 
 */
        (__pyx_v_self->P[__pyx_v_self->i]).w = (pow(((double)__pyx_v_self->d), ((double)__pyx_v_k)) * (__pyx_v_self->P[__pyx_v_self->i]).v);
      }
      __pyx_L12:;

      /* "caiman/source_extraction/cnmf/oasis.pyx":205
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v
 *                 self.P.pop_back()             # <<<<<<<<<<<<<<
 * 
 *     def fit_next_tmp(self, yt, num):
 */
      __pyx_v_self->P.pop_back();
    }
  }
  __pyx_L3:;

  /* "caiman/source_extraction/cnmf/oasis.pyx":140
 *             self._y = [0] * num_empty_samples
 * 
 *     def fit_next(self, yt):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.fit_next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":207
 *                 self.P.pop_back()
 * 
 *     def fit_next_tmp(self, yt, num):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t temporarily and return denoised calcium for last num time steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5fit_next_tmp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_4fit_next_tmp, "\n        fit next time step t temporarily and return denoised calcium for last num time steps\n        ");
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5fit_next_tmp = {"fit_next_tmp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5fit_next_tmp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_4fit_next_tmp};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5fit_next_tmp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_yt = 0;
  PyObject *__pyx_v_num = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fit_next_tmp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_yt,&__pyx_n_s_num,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_yt)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("fit_next_tmp", 1, 2, 2, 1); __PYX_ERR(0, 207, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "fit_next_tmp") < 0)) __PYX_ERR(0, 207, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_yt = values[0];
    __pyx_v_num = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fit_next_tmp", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 207, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.fit_next_tmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_4fit_next_tmp(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self), __pyx_v_yt, __pyx_v_num);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_4fit_next_tmp(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_yt, PyObject *__pyx_v_num) {
  struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_v_newpool;
  PyArrayObject *__pyx_v_c = 0;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_tmp2;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_tmp;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v__yt;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_5;
  unsigned int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  double __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  double __pyx_t_22;
  int __pyx_t_23;
  double __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fit_next_tmp", 1);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "caiman/source_extraction/cnmf/oasis.pyx":215
 *         cdef Py_ssize_t t, j, k, tmp2
 *         cdef SINGLE tmp, _yt
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 */
  __pyx_t_1 = (__pyx_v_self->g2 == 0.0);
  if (__pyx_t_1) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":216
 *         cdef SINGLE tmp, _yt
 *         if self.g2 == 0:  # AR(1)
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             j = self.i
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_yt, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->lam * (1.0 - __pyx_v_self->g))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_newpool.v = __pyx_t_5;

    /* "caiman/source_extraction/cnmf/oasis.pyx":217
 *         if self.g2 == 0:  # AR(1)
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1             # <<<<<<<<<<<<<<
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 */
    __pyx_t_5 = 1.0;
    __pyx_t_6 = __pyx_v_self->t;
    __pyx_t_7 = 1;
    __pyx_v_newpool.w = __pyx_t_5;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_7;

    /* "caiman/source_extraction/cnmf/oasis.pyx":218
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             j = self.i             # <<<<<<<<<<<<<<
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >
 */
    __pyx_t_7 = __pyx_v_self->i;
    __pyx_v_j = __pyx_t_7;

    /* "caiman/source_extraction/cnmf/oasis.pyx":219
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >
 *                     newpool.v / newpool.w)):
 */
    while (1) {
      __pyx_t_8 = (__pyx_v_j >= 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L6_bool_binop_done;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":220
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >             # <<<<<<<<<<<<<<
 *                     newpool.v / newpool.w)):
 *                 # merge two pools
 */
      __pyx_t_5 = (__pyx_v_self->P[__pyx_v_j]).v;
      __pyx_t_9 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_9 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 220, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":221
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >
 *                     newpool.v / newpool.w)):             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 newpool.v = self.P[j].v + newpool.v * self.g**self.P[j].l
 */
      if (unlikely(__pyx_v_newpool.w == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 221, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":220
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >             # <<<<<<<<<<<<<<
 *                     newpool.v / newpool.w)):
 *                 # merge two pools
 */
      __pyx_t_8 = ((((__pyx_t_5 / __pyx_t_9) * pow(((double)__pyx_v_self->g), ((double)(__pyx_v_self->P[__pyx_v_j]).l))) + __pyx_v_self->s_min) > (__pyx_v_newpool.v / __pyx_v_newpool.w));
      __pyx_t_1 = __pyx_t_8;
      __pyx_L6_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":223
 *                     newpool.v / newpool.w)):
 *                 # merge two pools
 *                 newpool.v = self.P[j].v + newpool.v * self.g**self.P[j].l             # <<<<<<<<<<<<<<
 *                 newpool.w = self.P[j].w + newpool.w * self.g**(2 * self.P[j].l)
 *                 newpool.t = self.P[j].t
 */
      __pyx_v_newpool.v = ((__pyx_v_self->P[__pyx_v_j]).v + (__pyx_v_newpool.v * pow(((double)__pyx_v_self->g), ((double)(__pyx_v_self->P[__pyx_v_j]).l))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":224
 *                 # merge two pools
 *                 newpool.v = self.P[j].v + newpool.v * self.g**self.P[j].l
 *                 newpool.w = self.P[j].w + newpool.w * self.g**(2 * self.P[j].l)             # <<<<<<<<<<<<<<
 *                 newpool.t = self.P[j].t
 *                 newpool.l = self.P[j].l + newpool.l
 */
      __pyx_v_newpool.w = ((__pyx_v_self->P[__pyx_v_j]).w + (__pyx_v_newpool.w * pow(((double)__pyx_v_self->g), ((double)(2 * (__pyx_v_self->P[__pyx_v_j]).l)))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":225
 *                 newpool.v = self.P[j].v + newpool.v * self.g**self.P[j].l
 *                 newpool.w = self.P[j].w + newpool.w * self.g**(2 * self.P[j].l)
 *                 newpool.t = self.P[j].t             # <<<<<<<<<<<<<<
 *                 newpool.l = self.P[j].l + newpool.l
 *                 j -= 1
 */
      __pyx_t_7 = (__pyx_v_self->P[__pyx_v_j]).t;
      __pyx_v_newpool.t = __pyx_t_7;

      /* "caiman/source_extraction/cnmf/oasis.pyx":226
 *                 newpool.w = self.P[j].w + newpool.w * self.g**(2 * self.P[j].l)
 *                 newpool.t = self.P[j].t
 *                 newpool.l = self.P[j].l + newpool.l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *             # return deconvolved activity for last num time steps
 */
      __pyx_v_newpool.l = ((__pyx_v_self->P[__pyx_v_j]).l + __pyx_v_newpool.l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":227
 *                 newpool.t = self.P[j].t
 *                 newpool.l = self.P[j].l + newpool.l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":229
 *                 j -= 1
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')             # <<<<<<<<<<<<<<
 *             t = num
 *             tmp = fmax(newpool.v, 0) / newpool.w
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_num);
    __Pyx_GIVEREF(__pyx_v_num);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_num)) __PYX_ERR(0, 229, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 229, __pyx_L1_error)
    __pyx_t_11 = ((PyArrayObject *)__pyx_t_10);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_12 < 0)) {
        PyErr_Fetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_15);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
        }
        __pyx_t_13 = __pyx_t_14 = __pyx_t_15 = 0;
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 229, __pyx_L1_error)
    }
    __pyx_t_11 = 0;
    __pyx_v_c = ((PyArrayObject *)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":230
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')
 *             t = num             # <<<<<<<<<<<<<<
 *             tmp = fmax(newpool.v, 0) / newpool.w
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000
 */
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L1_error)
    __pyx_v_t = __pyx_t_7;

    /* "caiman/source_extraction/cnmf/oasis.pyx":231
 *             c = np.zeros(num, dtype='float32')
 *             t = num
 *             tmp = fmax(newpool.v, 0) / newpool.w             # <<<<<<<<<<<<<<
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):
 */
    __pyx_t_16 = fmax(__pyx_v_newpool.v, 0.0);
    if (unlikely(__pyx_v_newpool.w == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 231, __pyx_L1_error)
    }
    __pyx_v_tmp = (__pyx_t_16 / ((double)__pyx_v_newpool.w));

    /* "caiman/source_extraction/cnmf/oasis.pyx":232
 *             t = num
 *             tmp = fmax(newpool.v, 0) / newpool.w
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = tmp * self.h[k]
 */
    __pyx_t_1 = (__pyx_v_newpool.l <= __pyx_v_t);
    if (__pyx_t_1) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":233
 *             tmp = fmax(newpool.v, 0) / newpool.w
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):             # <<<<<<<<<<<<<<
 *                     c[k + t - newpool.l] = tmp * self.h[k]
 *             else:
 */
      __pyx_t_7 = __pyx_v_newpool.l;
      __pyx_t_17 = __pyx_t_7;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_k = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":234
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *             else:
 *                 tmp2 = 1000 - newpool.l + t
 */
        __pyx_t_19 = ((__pyx_v_k + __pyx_v_t) - __pyx_v_newpool.l);
        __pyx_t_12 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 234, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":232
 *             t = num
 *             tmp = fmax(newpool.v, 0) / newpool.w
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = tmp * self.h[k]
 */
      goto __pyx_L8;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":236
 *                     c[k + t - newpool.l] = tmp * self.h[k]
 *             else:
 *                 tmp2 = 1000 - newpool.l + t             # <<<<<<<<<<<<<<
 *                 for k in range(t if t < tmp2 else tmp2):
 *                     c[k] = tmp * self.h[k + newpool.l - t]
 */
    /*else*/ {
      __pyx_v_tmp2 = ((0x3E8 - __pyx_v_newpool.l) + __pyx_v_t);

      /* "caiman/source_extraction/cnmf/oasis.pyx":237
 *             else:
 *                 tmp2 = 1000 - newpool.l + t
 *                 for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                     c[k] = tmp * self.h[k + newpool.l - t]
 *                 # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
      __pyx_t_1 = (__pyx_v_t < __pyx_v_tmp2);
      if (__pyx_t_1) {
        __pyx_t_7 = __pyx_v_t;
      } else {
        __pyx_t_7 = __pyx_v_tmp2;
      }
      __pyx_t_17 = __pyx_t_7;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_k = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":238
 *                 tmp2 = 1000 - newpool.l + t
 *                 for k in range(t if t < tmp2 else tmp2):
 *                     c[k] = tmp * self.h[k + newpool.l - t]             # <<<<<<<<<<<<<<
 *                 # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 *                 # if tmp2 <= 0:
 */
        __pyx_t_19 = __pyx_v_k;
        __pyx_t_12 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 238, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[((__pyx_v_k + __pyx_v_newpool.l) - __pyx_v_t)]));
      }
    }
    __pyx_L8:;

    /* "caiman/source_extraction/cnmf/oasis.pyx":247
 *                 #     for k in range(tmp2, t):
 *                 #         c[k] = c[k - 1] * self.g
 *             t -= newpool.l             # <<<<<<<<<<<<<<
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 */
    __pyx_v_t = (__pyx_v_t - __pyx_v_newpool.l);

    /* "caiman/source_extraction/cnmf/oasis.pyx":248
 *                 #         c[k] = c[k - 1] * self.g
 *             t -= newpool.l
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 */
    while (1) {
      __pyx_t_1 = (__pyx_v_t > 0);
      if (!__pyx_t_1) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":249
 *             t -= newpool.l
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w             # <<<<<<<<<<<<<<
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):
 */
      __pyx_t_16 = fmax((__pyx_v_self->P[__pyx_v_j]).v, 0.0);
      __pyx_t_9 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_9 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 249, __pyx_L1_error)
      }
      __pyx_v_tmp = (__pyx_t_16 / ((double)__pyx_t_9));

      /* "caiman/source_extraction/cnmf/oasis.pyx":250
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 */
      __pyx_t_1 = ((__pyx_v_self->P[__pyx_v_j]).l <= __pyx_v_t);
      if (__pyx_t_1) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":251
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):             # <<<<<<<<<<<<<<
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 *                 else:
 */
        __pyx_t_7 = (__pyx_v_self->P[__pyx_v_j]).l;
        __pyx_t_17 = __pyx_t_7;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":252
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 */
          __pyx_t_19 = ((__pyx_v_k + __pyx_v_t) - (__pyx_v_self->P[__pyx_v_j]).l);
          __pyx_t_12 = -1;
          if (__pyx_t_19 < 0) {
            __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 252, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":250
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 */
        goto __pyx_L15;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":254
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t             # <<<<<<<<<<<<<<
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]
 */
      /*else*/ {
        __pyx_v_tmp2 = ((0x3E8 - (__pyx_v_self->P[__pyx_v_j]).l) + __pyx_v_t);

        /* "caiman/source_extraction/cnmf/oasis.pyx":255
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
        __pyx_t_1 = (__pyx_v_t < __pyx_v_tmp2);
        if (__pyx_t_1) {
          __pyx_t_7 = __pyx_v_t;
        } else {
          __pyx_t_7 = __pyx_v_tmp2;
        }
        __pyx_t_17 = __pyx_t_7;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":256
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]             # <<<<<<<<<<<<<<
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 *                     # if tmp2 <= 0:
 */
          __pyx_t_19 = __pyx_v_k;
          __pyx_t_12 = -1;
          if (__pyx_t_19 < 0) {
            __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 256, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]));
        }
      }
      __pyx_L15:;

      /* "caiman/source_extraction/cnmf/oasis.pyx":265
 *                     #     for k in range(tmp2, t):
 *                     #         c[k] = c[k - 1] * self.g
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *         else:
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":266
 *                     #         c[k] = c[k - 1] * self.g
 *                 t -= self.P[j].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *         else:
 *             _yt = yt - self.b - self.lam * (1 - self.g - self.g2)
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":215
 *         cdef Py_ssize_t t, j, k, tmp2
 *         cdef SINGLE tmp, _yt
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 */
    goto __pyx_L3;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":268
 *                 j -= 1
 *         else:
 *             _yt = yt - self.b - self.lam * (1 - self.g - self.g2)             # <<<<<<<<<<<<<<
 *             newpool.v = fmax(0, _yt)
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 */
  /*else*/ {
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_yt, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyFloat_FromDouble((__pyx_v_self->lam * ((1.0 - __pyx_v_self->g) - __pyx_v_self->g2))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_9 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v__yt = __pyx_t_9;

    /* "caiman/source_extraction/cnmf/oasis.pyx":269
 *         else:
 *             _yt = yt - self.b - self.lam * (1 - self.g - self.g2)
 *             newpool.v = fmax(0, _yt)             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             j = self.i
 */
    __pyx_v_newpool.v = fmax(0.0, __pyx_v__yt);

    /* "caiman/source_extraction/cnmf/oasis.pyx":270
 *             _yt = yt - self.b - self.lam * (1 - self.g - self.g2)
 *             newpool.v = fmax(0, _yt)
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1             # <<<<<<<<<<<<<<
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 */
    __pyx_t_9 = __pyx_v_newpool.v;
    __pyx_t_6 = __pyx_v_self->t;
    __pyx_t_7 = 1;
    __pyx_v_newpool.w = __pyx_t_9;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_7;

    /* "caiman/source_extraction/cnmf/oasis.pyx":271
 *             newpool.v = fmax(0, _yt)
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             j = self.i             # <<<<<<<<<<<<<<
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) / (self.d - self.r)
 */
    __pyx_t_7 = __pyx_v_self->i;
    __pyx_v_j = __pyx_t_7;

    /* "caiman/source_extraction/cnmf/oasis.pyx":272
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) / (self.d - self.r)
 *                        if self.d != self.r else
 */
    while (1) {
      __pyx_t_8 = (__pyx_v_j >= 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L22_bool_binop_done;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":281
 *                         self.g12[self.P[j].l] * self.P[j - 1].w)) >
 *                        newpool.v - self.s_min)
 *                     if j > 0 else             # <<<<<<<<<<<<<<
 *                     (self.P[j].w * self.d > newpool.v - self.s_min))):
 *                 # merge two pools
 */
      __pyx_t_20 = (__pyx_v_j > 0);
      if (__pyx_t_20) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":277
 *                        (self.P[j].v * self.d**self.P[j].l * (self.P[j].l + 1)) -
 *                        self.P[j - 1].w * self.d**(self.P[j].l + 2) * (self.P[j].l + 1))
 *                        if self.P[j].l >= 1000 else             # <<<<<<<<<<<<<<
 *                        (self.h[self.P[j].l] * self.P[j].v +
 *                         self.g12[self.P[j].l] * self.P[j - 1].w)) >
 */
        __pyx_t_21 = ((__pyx_v_self->P[__pyx_v_j]).l >= 0x3E8);
        if (__pyx_t_21) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":274
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) / (self.d - self.r)
 *                        if self.d != self.r else             # <<<<<<<<<<<<<<
 *                        (self.P[j].v * self.d**self.P[j].l * (self.P[j].l + 1)) -
 *                        self.P[j - 1].w * self.d**(self.P[j].l + 2) * (self.P[j].l + 1))
 */
          __pyx_t_23 = (__pyx_v_self->d != __pyx_v_self->r);
          if (__pyx_t_23) {

            /* "caiman/source_extraction/cnmf/oasis.pyx":273
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) / (self.d - self.r)             # <<<<<<<<<<<<<<
 *                        if self.d != self.r else
 *                        (self.P[j].v * self.d**self.P[j].l * (self.P[j].l + 1)) -
 */
            __pyx_t_24 = ((__pyx_v_self->P[__pyx_v_j]).v * pow(((double)__pyx_v_self->d), ((double)((__pyx_v_self->P[__pyx_v_j]).l + 1))));
            __pyx_t_9 = (__pyx_v_self->d - __pyx_v_self->r);
            if (unlikely(__pyx_t_9 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 273, __pyx_L1_error)
            }
            __pyx_t_22 = (__pyx_t_24 / ((double)__pyx_t_9));
          } else {

            /* "caiman/source_extraction/cnmf/oasis.pyx":275
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) / (self.d - self.r)
 *                        if self.d != self.r else
 *                        (self.P[j].v * self.d**self.P[j].l * (self.P[j].l + 1)) -             # <<<<<<<<<<<<<<
 *                        self.P[j - 1].w * self.d**(self.P[j].l + 2) * (self.P[j].l + 1))
 *                        if self.P[j].l >= 1000 else
 */
            __pyx_t_22 = ((((__pyx_v_self->P[__pyx_v_j]).v * pow(((double)__pyx_v_self->d), ((double)(__pyx_v_self->P[__pyx_v_j]).l))) * ((__pyx_v_self->P[__pyx_v_j]).l + 1)) - (((__pyx_v_self->P[(__pyx_v_j - 1)]).w * pow(((double)__pyx_v_self->d), ((double)((__pyx_v_self->P[__pyx_v_j]).l + 2)))) * ((__pyx_v_self->P[__pyx_v_j]).l + 1)));
          }
          __pyx_t_16 = __pyx_t_22;
        } else {

          /* "caiman/source_extraction/cnmf/oasis.pyx":278
 *                        self.P[j - 1].w * self.d**(self.P[j].l + 2) * (self.P[j].l + 1))
 *                        if self.P[j].l >= 1000 else
 *                        (self.h[self.P[j].l] * self.P[j].v +             # <<<<<<<<<<<<<<
 *                         self.g12[self.P[j].l] * self.P[j - 1].w)) >
 *                        newpool.v - self.s_min)
 */
          __pyx_t_16 = (((__pyx_v_self->h[(__pyx_v_self->P[__pyx_v_j]).l]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[(__pyx_v_self->P[__pyx_v_j]).l]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":280
 *                        (self.h[self.P[j].l] * self.P[j].v +
 *                         self.g12[self.P[j].l] * self.P[j - 1].w)) >
 *                        newpool.v - self.s_min)             # <<<<<<<<<<<<<<
 *                     if j > 0 else
 *                     (self.P[j].w * self.d > newpool.v - self.s_min))):
 */
        __pyx_t_8 = (__pyx_t_16 > (__pyx_v_newpool.v - __pyx_v_self->s_min));
      } else {

        /* "caiman/source_extraction/cnmf/oasis.pyx":282
 *                        newpool.v - self.s_min)
 *                     if j > 0 else
 *                     (self.P[j].w * self.d > newpool.v - self.s_min))):             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 newpool.l += self.P[j].l
 */
        __pyx_t_8 = (((__pyx_v_self->P[__pyx_v_j]).w * __pyx_v_self->d) > (__pyx_v_newpool.v - __pyx_v_self->s_min));
      }
      __pyx_t_1 = __pyx_t_8;
      __pyx_L22_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":284
 *                     (self.P[j].w * self.d > newpool.v - self.s_min))):
 *                 # merge two pools
 *                 newpool.l += self.P[j].l             # <<<<<<<<<<<<<<
 *                 newpool.t = self.P[j].t
 *                 k = newpool.l - 1
 */
      __pyx_v_newpool.l = (__pyx_v_newpool.l + (__pyx_v_self->P[__pyx_v_j]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":285
 *                 # merge two pools
 *                 newpool.l += self.P[j].l
 *                 newpool.t = self.P[j].t             # <<<<<<<<<<<<<<
 *                 k = newpool.l - 1
 *                 if j > 0:
 */
      __pyx_t_7 = (__pyx_v_self->P[__pyx_v_j]).t;
      __pyx_v_newpool.t = __pyx_t_7;

      /* "caiman/source_extraction/cnmf/oasis.pyx":286
 *                 newpool.l += self.P[j].l
 *                 newpool.t = self.P[j].t
 *                 k = newpool.l - 1             # <<<<<<<<<<<<<<
 *                 if j > 0:
 *                     if k >= 1000:
 */
      __pyx_v_k = (__pyx_v_newpool.l - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":287
 *                 newpool.t = self.P[j].t
 *                 k = newpool.l - 1
 *                 if j > 0:             # <<<<<<<<<<<<<<
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 */
      __pyx_t_1 = (__pyx_v_j > 0);
      if (__pyx_t_1) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":288
 *                 k = newpool.l - 1
 *                 if j > 0:
 *                     if k >= 1000:             # <<<<<<<<<<<<<<
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 */
        __pyx_t_1 = (__pyx_v_k >= 0x3E8);
        if (__pyx_t_1) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":289
 *                 if j > 0:
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate             # <<<<<<<<<<<<<<
 *                     tmp = 0
 *                     for tmp2 in range(k):
 */
          __pyx_v_k = 0x3E7;

          /* "caiman/source_extraction/cnmf/oasis.pyx":288
 *                 k = newpool.l - 1
 *                 if j > 0:
 *                     if k >= 1000:             # <<<<<<<<<<<<<<
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 */
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":290
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0             # <<<<<<<<<<<<<<
 *                     for tmp2 in range(k):
 *                         tmp += self.h[tmp2] * self._y[newpool.t + tmp2]
 */
        __pyx_v_tmp = 0.0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":291
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 *                     for tmp2 in range(k):             # <<<<<<<<<<<<<<
 *                         tmp += self.h[tmp2] * self._y[newpool.t + tmp2]
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 */
        __pyx_t_7 = __pyx_v_k;
        __pyx_t_17 = __pyx_t_7;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_tmp2 = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":292
 *                     tmp = 0
 *                     for tmp2 in range(k):
 *                         tmp += self.h[tmp2] * self._y[newpool.t + tmp2]             # <<<<<<<<<<<<<<
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t +
 */
          __pyx_v_tmp = (__pyx_v_tmp + ((__pyx_v_self->h[__pyx_v_tmp2]) * (__pyx_v_self->_y[(__pyx_v_newpool.t + __pyx_v_tmp2)])));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":295
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t +
 *                                         k < self._y.size() else _yt)             # <<<<<<<<<<<<<<
 *                     newpool.v = (tmp - self.g11g12[k] * self.P[j-1].w) / self.g11g11[k]
 *                     newpool.w = self.h[k] * newpool.v + self.g12[k] * self.P[j-1].w
 */
        __pyx_t_1 = ((__pyx_v_newpool.t + __pyx_v_k) < __pyx_v_self->_y.size());
        if (__pyx_t_1) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":294
 *                         tmp += self.h[tmp2] * self._y[newpool.t + tmp2]
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t +             # <<<<<<<<<<<<<<
 *                                         k < self._y.size() else _yt)
 *                     newpool.v = (tmp - self.g11g12[k] * self.P[j-1].w) / self.g11g11[k]
 */
          __pyx_t_9 = (__pyx_v_self->_y[(__pyx_v_newpool.t + __pyx_v_k)]);
        } else {

          /* "caiman/source_extraction/cnmf/oasis.pyx":295
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t +
 *                                         k < self._y.size() else _yt)             # <<<<<<<<<<<<<<
 *                     newpool.v = (tmp - self.g11g12[k] * self.P[j-1].w) / self.g11g11[k]
 *                     newpool.w = self.h[k] * newpool.v + self.g12[k] * self.P[j-1].w
 */
          __pyx_t_9 = __pyx_v__yt;
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":294
 *                         tmp += self.h[tmp2] * self._y[newpool.t + tmp2]
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t +             # <<<<<<<<<<<<<<
 *                                         k < self._y.size() else _yt)
 *                     newpool.v = (tmp - self.g11g12[k] * self.P[j-1].w) / self.g11g11[k]
 */
        __pyx_v_tmp = (__pyx_v_tmp + ((__pyx_v_self->h[__pyx_v_k]) * __pyx_t_9));

        /* "caiman/source_extraction/cnmf/oasis.pyx":296
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t +
 *                                         k < self._y.size() else _yt)
 *                     newpool.v = (tmp - self.g11g12[k] * self.P[j-1].w) / self.g11g11[k]             # <<<<<<<<<<<<<<
 *                     newpool.w = self.h[k] * newpool.v + self.g12[k] * self.P[j-1].w
 *                 else:  # update first pool
 */
        __pyx_t_9 = (__pyx_v_tmp - ((__pyx_v_self->g11g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        if (unlikely((__pyx_v_self->g11g11[__pyx_v_k]) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 296, __pyx_L1_error)
        }
        __pyx_v_newpool.v = (__pyx_t_9 / (__pyx_v_self->g11g11[__pyx_v_k]));

        /* "caiman/source_extraction/cnmf/oasis.pyx":297
 *                                         k < self._y.size() else _yt)
 *                     newpool.v = (tmp - self.g11g12[k] * self.P[j-1].w) / self.g11g11[k]
 *                     newpool.w = self.h[k] * newpool.v + self.g12[k] * self.P[j-1].w             # <<<<<<<<<<<<<<
 *                 else:  # update first pool
 *                     tmp = 0
 */
        __pyx_v_newpool.w = (((__pyx_v_self->h[__pyx_v_k]) * __pyx_v_newpool.v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));

        /* "caiman/source_extraction/cnmf/oasis.pyx":287
 *                 newpool.t = self.P[j].t
 *                 k = newpool.l - 1
 *                 if j > 0:             # <<<<<<<<<<<<<<
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 */
        goto __pyx_L24;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":299
 *                     newpool.w = self.h[k] * newpool.v + self.g12[k] * self.P[j-1].w
 *                 else:  # update first pool
 *                     tmp = 0             # <<<<<<<<<<<<<<
 *                     for tmp2 in range(k):
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 */
      /*else*/ {
        __pyx_v_tmp = 0.0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":300
 *                 else:  # update first pool
 *                     tmp = 0
 *                     for tmp2 in range(k):             # <<<<<<<<<<<<<<
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 *                     tmp += self.d**k * self._yt
 */
        __pyx_t_7 = __pyx_v_k;
        __pyx_t_17 = __pyx_t_7;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_tmp2 = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":301
 *                     tmp = 0
 *                     for tmp2 in range(k):
 *                         tmp += self.d**tmp2 * self._y[tmp2]             # <<<<<<<<<<<<<<
 *                     tmp += self.d**k * self._yt
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /
 */
          __pyx_v_tmp = (__pyx_v_tmp + (pow(((double)__pyx_v_self->d), ((double)__pyx_v_tmp2)) * (__pyx_v_self->_y[__pyx_v_tmp2])));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":302
 *                     for tmp2 in range(k):
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 *                     tmp += self.d**k * self._yt             # <<<<<<<<<<<<<<
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                      (1 - self.d**(2 * newpool.l)))
 */
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_tmp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = PyFloat_FromDouble(pow(((double)__pyx_v_self->d), ((double)__pyx_v_k))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_yt_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyNumber_Multiply(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_tmp = __pyx_t_9;

        /* "caiman/source_extraction/cnmf/oasis.pyx":303
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 *                     tmp += self.d**k * self._yt
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /             # <<<<<<<<<<<<<<
 *                                      (1 - self.d**(2 * newpool.l)))
 *                     newpool.w = self.d**k * newpool.v
 */
        __pyx_t_9 = (__pyx_v_tmp * (1.0 - (__pyx_v_self->d * __pyx_v_self->d)));

        /* "caiman/source_extraction/cnmf/oasis.pyx":304
 *                     tmp += self.d**k * self._yt
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                      (1 - self.d**(2 * newpool.l)))             # <<<<<<<<<<<<<<
 *                     newpool.w = self.d**k * newpool.v
 *                 j -= 1
 */
        __pyx_t_16 = (1.0 - pow(((double)__pyx_v_self->d), ((double)(2 * __pyx_v_newpool.l))));

        /* "caiman/source_extraction/cnmf/oasis.pyx":303
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 *                     tmp += self.d**k * self._yt
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /             # <<<<<<<<<<<<<<
 *                                      (1 - self.d**(2 * newpool.l)))
 *                     newpool.w = self.d**k * newpool.v
 */
        if (unlikely(__pyx_t_16 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 303, __pyx_L1_error)
        }
        __pyx_v_newpool.v = fmax(0.0, (((double)__pyx_t_9) / __pyx_t_16));

        /* "caiman/source_extraction/cnmf/oasis.pyx":305
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                      (1 - self.d**(2 * newpool.l)))
 *                     newpool.w = self.d**k * newpool.v             # <<<<<<<<<<<<<<
 *                 j -= 1
 *             # return deconvolved activity for last num time steps
 */
        __pyx_v_newpool.w = (pow(((double)__pyx_v_self->d), ((double)__pyx_v_k)) * __pyx_v_newpool.v);
      }
      __pyx_L24:;

      /* "caiman/source_extraction/cnmf/oasis.pyx":306
 *                                      (1 - self.d**(2 * newpool.l)))
 *                     newpool.w = self.d**k * newpool.v
 *                 j -= 1             # <<<<<<<<<<<<<<
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":308
 *                 j -= 1
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')             # <<<<<<<<<<<<<<
 *             t = num
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_num);
    __Pyx_GIVEREF(__pyx_v_num);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_num)) __PYX_ERR(0, 308, __pyx_L1_error);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_11 = ((PyArrayObject *)__pyx_t_10);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_12 < 0)) {
        PyErr_Fetch(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_13);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_15, __pyx_t_14, __pyx_t_13);
        }
        __pyx_t_15 = __pyx_t_14 = __pyx_t_13 = 0;
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 308, __pyx_L1_error)
    }
    __pyx_t_11 = 0;
    __pyx_v_c = ((PyArrayObject *)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":309
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')
 *             t = num             # <<<<<<<<<<<<<<
 * 
 *             if j == -1:  # newpool is first and only pool
 */
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
    __pyx_v_t = __pyx_t_7;

    /* "caiman/source_extraction/cnmf/oasis.pyx":311
 *             t = num
 * 
 *             if j == -1:  # newpool is first and only pool             # <<<<<<<<<<<<<<
 *                 c[0] = newpool.v * self.d**(newpool.l - t)
 *                 for k in range(1, t):
 */
    __pyx_t_1 = (__pyx_v_j == -1L);
    if (__pyx_t_1) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":312
 * 
 *             if j == -1:  # newpool is first and only pool
 *                 c[0] = newpool.v * self.d**(newpool.l - t)             # <<<<<<<<<<<<<<
 *                 for k in range(1, t):
 *                     c[k] = c[k - 1] * self.d
 */
      __pyx_t_19 = 0;
      __pyx_t_12 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        __PYX_ERR(0, 312, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_newpool.v * pow(((double)__pyx_v_self->d), ((double)(__pyx_v_newpool.l - __pyx_v_t))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":313
 *             if j == -1:  # newpool is first and only pool
 *                 c[0] = newpool.v * self.d**(newpool.l - t)
 *                 for k in range(1, t):             # <<<<<<<<<<<<<<
 *                     c[k] = c[k - 1] * self.d
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000
 */
      __pyx_t_7 = __pyx_v_t;
      __pyx_t_17 = __pyx_t_7;
      for (__pyx_t_18 = 1; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_k = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":314
 *                 c[0] = newpool.v * self.d**(newpool.l - t)
 *                 for k in range(1, t):
 *                     c[k] = c[k - 1] * self.d             # <<<<<<<<<<<<<<
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):
 */
        __pyx_t_19 = (__pyx_v_k - 1);
        __pyx_t_12 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 314, __pyx_L1_error)
        }
        __pyx_t_25 = __pyx_v_k;
        __pyx_t_12 = -1;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 314, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_c.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides)) * __pyx_v_self->d);
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":311
 *             t = num
 * 
 *             if j == -1:  # newpool is first and only pool             # <<<<<<<<<<<<<<
 *                 c[0] = newpool.v * self.d**(newpool.l - t)
 *                 for k in range(1, t):
 */
      goto __pyx_L30;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":315
 *                 for k in range(1, t):
 *                     c[k] = c[k - 1] * self.d
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = self.h[k] * newpool.v + \
 */
    __pyx_t_1 = (__pyx_v_newpool.l <= __pyx_v_t);
    if (__pyx_t_1) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":316
 *                     c[k] = c[k - 1] * self.d
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):             # <<<<<<<<<<<<<<
 *                     c[k + t - newpool.l] = self.h[k] * newpool.v + \
 *                         self.g12[k] * self.P[j].w
 */
      __pyx_t_7 = __pyx_v_newpool.l;
      __pyx_t_17 = __pyx_t_7;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_k = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":317
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = self.h[k] * newpool.v + \             # <<<<<<<<<<<<<<
 *                         self.g12[k] * self.P[j].w
 *             else:
 */
        __pyx_t_19 = ((__pyx_v_k + __pyx_v_t) - __pyx_v_newpool.l);
        __pyx_t_12 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 317, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * __pyx_v_newpool.v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_j]).w));
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":315
 *                 for k in range(1, t):
 *                     c[k] = c[k - 1] * self.d
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = self.h[k] * newpool.v + \
 */
      goto __pyx_L30;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":320
 *                         self.g12[k] * self.P[j].w
 *             else:
 *                 tmp2 = 1000 - newpool.l + t             # <<<<<<<<<<<<<<
 *                 for k in range(t if t < tmp2 else tmp2):
 *                     c[k] = self.h[k + newpool.l - t] * newpool.v + \
 */
    /*else*/ {
      __pyx_v_tmp2 = ((0x3E8 - __pyx_v_newpool.l) + __pyx_v_t);

      /* "caiman/source_extraction/cnmf/oasis.pyx":321
 *             else:
 *                 tmp2 = 1000 - newpool.l + t
 *                 for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                     c[k] = self.h[k + newpool.l - t] * newpool.v + \
 *                         self.g12[k + newpool.l - t] * self.P[j].w
 */
      __pyx_t_1 = (__pyx_v_t < __pyx_v_tmp2);
      if (__pyx_t_1) {
        __pyx_t_7 = __pyx_v_t;
      } else {
        __pyx_t_7 = __pyx_v_tmp2;
      }
      __pyx_t_17 = __pyx_t_7;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_k = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":322
 *                 tmp2 = 1000 - newpool.l + t
 *                 for k in range(t if t < tmp2 else tmp2):
 *                     c[k] = self.h[k + newpool.l - t] * newpool.v + \             # <<<<<<<<<<<<<<
 *                         self.g12[k + newpool.l - t] * self.P[j].w
 *                 # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
        __pyx_t_19 = __pyx_v_k;
        __pyx_t_12 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 322, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[((__pyx_v_k + __pyx_v_newpool.l) - __pyx_v_t)]) * __pyx_v_newpool.v) + ((__pyx_v_self->g12[((__pyx_v_k + __pyx_v_newpool.l) - __pyx_v_t)]) * (__pyx_v_self->P[__pyx_v_j]).w));
      }
    }
    __pyx_L30:;

    /* "caiman/source_extraction/cnmf/oasis.pyx":332
 *                 #     for k in range(tmp2, t):
 *                 #         c[k] = c[k - 1] * self.d
 *             t -= newpool.l             # <<<<<<<<<<<<<<
 *             while t > 0:
 *                 if j == 0:  # first pool
 */
    __pyx_v_t = (__pyx_v_t - __pyx_v_newpool.l);

    /* "caiman/source_extraction/cnmf/oasis.pyx":333
 *                 #         c[k] = c[k - 1] * self.d
 *             t -= newpool.l
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 if j == 0:  # first pool
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 */
    while (1) {
      __pyx_t_1 = (__pyx_v_t > 0);
      if (!__pyx_t_1) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":334
 *             t -= newpool.l
 *             while t > 0:
 *                 if j == 0:  # first pool             # <<<<<<<<<<<<<<
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 *                     for k in range(1, t):
 */
      __pyx_t_1 = (__pyx_v_j == 0);
      if (__pyx_t_1) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":335
 *             while t > 0:
 *                 if j == 0:  # first pool
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)             # <<<<<<<<<<<<<<
 *                     for k in range(1, t):
 *                         c[k] = c[k - 1] * self.d
 */
        __pyx_t_19 = 0;
        __pyx_t_12 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 335, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = ((__pyx_v_self->P[0]).v * pow(((double)__pyx_v_self->d), ((double)((__pyx_v_self->P[0]).l - __pyx_v_t))));

        /* "caiman/source_extraction/cnmf/oasis.pyx":336
 *                 if j == 0:  # first pool
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 *                     for k in range(1, t):             # <<<<<<<<<<<<<<
 *                         c[k] = c[k - 1] * self.d
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 */
        __pyx_t_7 = __pyx_v_t;
        __pyx_t_17 = __pyx_t_7;
        for (__pyx_t_18 = 1; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":337
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 *                     for k in range(1, t):
 *                         c[k] = c[k - 1] * self.d             # <<<<<<<<<<<<<<
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):
 */
          __pyx_t_19 = (__pyx_v_k - 1);
          __pyx_t_12 = -1;
          if (__pyx_t_19 < 0) {
            __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 337, __pyx_L1_error)
          }
          __pyx_t_25 = __pyx_v_k;
          __pyx_t_12 = -1;
          if (__pyx_t_25 < 0) {
            __pyx_t_25 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_25 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 337, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_c.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides)) * __pyx_v_self->d);
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":334
 *             t -= newpool.l
 *             while t > 0:
 *                 if j == 0:  # first pool             # <<<<<<<<<<<<<<
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 *                     for k in range(1, t):
 */
        goto __pyx_L39;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":338
 *                     for k in range(1, t):
 *                         c[k] = c[k - 1] * self.d
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 */
      __pyx_t_1 = ((__pyx_v_self->P[__pyx_v_j]).l <= __pyx_v_t);
      if (__pyx_t_1) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":339
 *                         c[k] = c[k - 1] * self.d
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):             # <<<<<<<<<<<<<<
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 *                             self.g12[k] * self.P[j - 1].w
 */
        __pyx_t_7 = (__pyx_v_self->P[__pyx_v_j]).l;
        __pyx_t_17 = __pyx_t_7;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":340
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \             # <<<<<<<<<<<<<<
 *                             self.g12[k] * self.P[j - 1].w
 *                 else:
 */
          __pyx_t_19 = ((__pyx_v_k + __pyx_v_t) - (__pyx_v_self->P[__pyx_v_j]).l);
          __pyx_t_12 = -1;
          if (__pyx_t_19 < 0) {
            __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 340, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":338
 *                     for k in range(1, t):
 *                         c[k] = c[k - 1] * self.d
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 */
        goto __pyx_L39;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":343
 *                             self.g12[k] * self.P[j - 1].w
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t             # <<<<<<<<<<<<<<
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \
 */
      /*else*/ {
        __pyx_v_tmp2 = ((0x3E8 - (__pyx_v_self->P[__pyx_v_j]).l) + __pyx_v_t);

        /* "caiman/source_extraction/cnmf/oasis.pyx":344
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \
 *                             self.g12[k + self.P[j].l - t] * self.P[j - 1].w
 */
        __pyx_t_1 = (__pyx_v_t < __pyx_v_tmp2);
        if (__pyx_t_1) {
          __pyx_t_7 = __pyx_v_t;
        } else {
          __pyx_t_7 = __pyx_v_tmp2;
        }
        __pyx_t_17 = __pyx_t_7;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":345
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \             # <<<<<<<<<<<<<<
 *                             self.g12[k + self.P[j].l - t] * self.P[j - 1].w
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
          __pyx_t_19 = __pyx_v_k;
          __pyx_t_12 = -1;
          if (__pyx_t_19 < 0) {
            __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 345, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }
      }
      __pyx_L39:;

      /* "caiman/source_extraction/cnmf/oasis.pyx":355
 *                     #     for k in range(tmp2, t):
 *                     #         c[k] = c[k - 1] * self.d
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 * 
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":356
 *                     #         c[k] = c[k - 1] * self.d
 *                 t -= self.P[j].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 * 
 *         return c
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }
  }
  __pyx_L3:;

  /* "caiman/source_extraction/cnmf/oasis.pyx":358
 *                 j -= 1
 * 
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def fit(self, y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":207
 *                 self.P.pop_back()
 * 
 *     def fit_next_tmp(self, yt, num):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t temporarily and return denoised calcium for last num time steps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.fit_next_tmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":360
 *         return c
 * 
 *     def fit(self, y):             # <<<<<<<<<<<<<<
 *         """
 *         fit all time steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_7fit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_6fit, "\n        fit all time steps\n        ");
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_7fit = {"fit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_7fit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_6fit};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_7fit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_y = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fit (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "fit") < 0)) __PYX_ERR(0, 360, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_y = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fit", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 360, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_6fit(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self), __pyx_v_y);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_6fit(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_y) {
  PyObject *__pyx_v_yt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fit", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":364
 *         fit all time steps
 *         """
 *         for yt in y:             # <<<<<<<<<<<<<<
 *             self.fit_next(yt)
 *         return self
 */
  if (likely(PyList_CheckExact(__pyx_v_y)) || PyTuple_CheckExact(__pyx_v_y)) {
    __pyx_t_1 = __pyx_v_y; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 364, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 364, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 364, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 364, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 364, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_yt, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":365
 *         """
 *         for yt in y:
 *             self.fit_next(yt)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fit_next); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_yt};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":364
 *         fit all time steps
 *         """
 *         for yt in y:             # <<<<<<<<<<<<<<
 *             self.fit_next(yt)
 *         return self
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":366
 *         for yt in y:
 *             self.fit_next(yt)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def get_c(self, num):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":360
 *         return c
 * 
 *     def fit(self, y):             # <<<<<<<<<<<<<<
 *         """
 *         fit all time steps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_yt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":368
 *         return self
 * 
 *     def get_c(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium for last num time steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_9get_c(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_8get_c, "\n        return denoised calcium for last num time steps\n        ");
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_9get_c = {"get_c", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_9get_c, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_8get_c};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_9get_c(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_num = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 368, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_c") < 0)) __PYX_ERR(0, 368, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_num = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_c", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 368, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.get_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_8get_c(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self), __pyx_v_num);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_8get_c(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_num) {
  PyArrayObject *__pyx_v_c = 0;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_tmp2;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_12;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_c", 1);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "caiman/source_extraction/cnmf/oasis.pyx":375
 *         cdef Py_ssize_t t, j, k, tmp2
 *         cdef SINGLE tmp
 *         t = num             # <<<<<<<<<<<<<<
 *         c = np.zeros(t, dtype='float32')
 *         j = self.i
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L1_error)
  __pyx_v_t = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":376
 *         cdef SINGLE tmp
 *         t = num
 *         c = np.zeros(t, dtype='float32')             # <<<<<<<<<<<<<<
 *         j = self.i
 *         if self.g2 == 0:  # AR(1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 376, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":377
 *         t = num
 *         c = np.zeros(t, dtype='float32')
 *         j = self.i             # <<<<<<<<<<<<<<
 *         if self.g2 == 0:  # AR(1)
 *             while t > 0:
 */
  __pyx_t_1 = __pyx_v_self->i;
  __pyx_v_j = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":378
 *         c = np.zeros(t, dtype='float32')
 *         j = self.i
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 */
  __pyx_t_11 = (__pyx_v_self->g2 == 0.0);
  if (__pyx_t_11) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":379
 *         j = self.i
 *         if self.g2 == 0:  # AR(1)
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 *                 if self.P[j].l <= t:
 */
    while (1) {
      __pyx_t_11 = (__pyx_v_t > 0);
      if (!__pyx_t_11) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":380
 *         if self.g2 == 0:  # AR(1)
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)             # <<<<<<<<<<<<<<
 *                 if self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):
 */
      __pyx_t_12 = (__pyx_v_self->P[__pyx_v_j]).v;
      __pyx_t_13 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_13 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 380, __pyx_L1_error)
      }
      __pyx_v_tmp = fmax((__pyx_t_12 / __pyx_t_13), 0.0);

      /* "caiman/source_extraction/cnmf/oasis.pyx":381
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 *                 if self.P[j].l <= t:             # <<<<<<<<<<<<<<
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 */
      __pyx_t_11 = ((__pyx_v_self->P[__pyx_v_j]).l <= __pyx_v_t);
      if (__pyx_t_11) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":382
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 *                 if self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):             # <<<<<<<<<<<<<<
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 *                     # # more accurate exponential decay, but maybe simple truncation suffices
 */
        __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 382, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = __pyx_f_6caiman_17source_extraction_4cnmf_5oasis_min1000(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_15 = __pyx_t_14;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_15; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "caiman/source_extraction/cnmf/oasis.pyx":383
 *                 if self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *                     # # more accurate exponential decay, but maybe simple truncation suffices
 *                     # for k in range(1000 + t - self.P[j].l, t):
 */
          __pyx_t_16 = ((__pyx_v_k + __pyx_v_t) - (__pyx_v_self->P[__pyx_v_j]).l);
          __pyx_t_7 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 383, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":381
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 *                 if self.P[j].l <= t:             # <<<<<<<<<<<<<<
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 */
        goto __pyx_L6;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":388
 *                     #     c[k] = c[k - 1] * self.g
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t             # <<<<<<<<<<<<<<
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]
 */
      /*else*/ {
        __pyx_v_tmp2 = ((0x3E8 - (__pyx_v_self->P[__pyx_v_j]).l) + __pyx_v_t);

        /* "caiman/source_extraction/cnmf/oasis.pyx":389
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
        __pyx_t_11 = (__pyx_v_t < __pyx_v_tmp2);
        if (__pyx_t_11) {
          __pyx_t_1 = __pyx_v_t;
        } else {
          __pyx_t_1 = __pyx_v_tmp2;
        }
        __pyx_t_17 = __pyx_t_1;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":390
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]             # <<<<<<<<<<<<<<
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 *                     # if tmp2 <= 0:
 */
          __pyx_t_16 = __pyx_v_k;
          __pyx_t_7 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 390, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]));
        }
      }
      __pyx_L6:;

      /* "caiman/source_extraction/cnmf/oasis.pyx":399
 *                     #     for k in range(tmp2, t):
 *                     #         c[k] = c[k - 1] * self.g
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *         else:  # AR(2)
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":400
 *                     #         c[k] = c[k - 1] * self.g
 *                 t -= self.P[j].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             while t > 0:
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":378
 *         c = np.zeros(t, dtype='float32')
 *         j = self.i
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 */
    goto __pyx_L3;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":402
 *                 j -= 1
 *         else:  # AR(2)
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 if j == 0:  # first pool
 *                     for k in range(t):
 */
  /*else*/ {
    while (1) {
      __pyx_t_11 = (__pyx_v_t > 0);
      if (!__pyx_t_11) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":403
 *         else:  # AR(2)
 *             while t > 0:
 *                 if j == 0:  # first pool             # <<<<<<<<<<<<<<
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 */
      __pyx_t_11 = (__pyx_v_j == 0);
      if (__pyx_t_11) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":404
 *             while t > 0:
 *                 if j == 0:  # first pool
 *                     for k in range(t):             # <<<<<<<<<<<<<<
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 *                 elif self.P[j].l <= t:
 */
        __pyx_t_1 = __pyx_v_t;
        __pyx_t_17 = __pyx_t_1;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":405
 *                 if j == 0:  # first pool
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)             # <<<<<<<<<<<<<<
 *                 elif self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):
 */
          __pyx_t_16 = __pyx_v_k;
          __pyx_t_7 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 405, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides) = ((__pyx_v_self->P[0]).v * pow(((double)__pyx_v_self->d), ((double)((__pyx_v_k + (__pyx_v_self->P[0]).l) - __pyx_v_t))));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":403
 *         else:  # AR(2)
 *             while t > 0:
 *                 if j == 0:  # first pool             # <<<<<<<<<<<<<<
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 */
        goto __pyx_L13;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":406
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 *                 elif self.P[j].l <= t:             # <<<<<<<<<<<<<<
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 */
      __pyx_t_11 = ((__pyx_v_self->P[__pyx_v_j]).l <= __pyx_v_t);
      if (__pyx_t_11) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":407
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 *                 elif self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):             # <<<<<<<<<<<<<<
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 *                             self.g12[k] * self.P[j - 1].w
 */
        __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = __pyx_f_6caiman_17source_extraction_4cnmf_5oasis_min1000(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_5); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_15 = __pyx_t_14;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_15; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "caiman/source_extraction/cnmf/oasis.pyx":408
 *                 elif self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \             # <<<<<<<<<<<<<<
 *                             self.g12[k] * self.P[j - 1].w
 *                     # # more accurate exponential decay, but maybe simple truncation suffices
 */
          __pyx_t_16 = ((__pyx_v_k + __pyx_v_t) - (__pyx_v_self->P[__pyx_v_j]).l);
          __pyx_t_7 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 408, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":406
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 *                 elif self.P[j].l <= t:             # <<<<<<<<<<<<<<
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 */
        goto __pyx_L13;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":414
 *                     #     c[k] = c[k - 1] * self.d
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t             # <<<<<<<<<<<<<<
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \
 */
      /*else*/ {
        __pyx_v_tmp2 = ((0x3E8 - (__pyx_v_self->P[__pyx_v_j]).l) + __pyx_v_t);

        /* "caiman/source_extraction/cnmf/oasis.pyx":415
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \
 *                             self.g12[k + self.P[j].l - t] * self.P[j - 1].w
 */
        __pyx_t_11 = (__pyx_v_t < __pyx_v_tmp2);
        if (__pyx_t_11) {
          __pyx_t_1 = __pyx_v_t;
        } else {
          __pyx_t_1 = __pyx_v_tmp2;
        }
        __pyx_t_17 = __pyx_t_1;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":416
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \             # <<<<<<<<<<<<<<
 *                             self.g12[k + self.P[j].l - t] * self.P[j - 1].w
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
          __pyx_t_16 = __pyx_v_k;
          __pyx_t_7 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 416, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }
      }
      __pyx_L13:;

      /* "caiman/source_extraction/cnmf/oasis.pyx":426
 *                     #     for k in range(tmp2, t):
 *                     #         c[k] = c[k - 1] * self.d
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *         return c
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":427
 *                     #         c[k] = c[k - 1] * self.d
 *                 t -= self.P[j].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }
  }
  __pyx_L3:;

  /* "caiman/source_extraction/cnmf/oasis.pyx":428
 *                 t -= self.P[j].l
 *                 j -= 1
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def get_s(self, num):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":368
 *         return self
 * 
 *     def get_c(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium for last num time steps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.get_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":430
 *         return c
 * 
 *     def get_s(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return deconvolved activity for last num time steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_11get_s(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_10get_s, "\n        return deconvolved activity for last num time steps\n        ");
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_11get_s = {"get_s", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_11get_s, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_10get_s};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_11get_s(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_num = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_s (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_s") < 0)) __PYX_ERR(0, 430, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_num = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_s", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 430, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.get_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_10get_s(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self), __pyx_v_num);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_10get_s(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_num) {
  PyArrayObject *__pyx_v_s = 0;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_j;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_s;
  __Pyx_Buffer __pyx_pybuffer_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_12;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_13;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_14;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_s", 1);
  __pyx_pybuffer_s.pybuffer.buf = NULL;
  __pyx_pybuffer_s.refcount = 0;
  __pyx_pybuffernd_s.data = NULL;
  __pyx_pybuffernd_s.rcbuffer = &__pyx_pybuffer_s;

  /* "caiman/source_extraction/cnmf/oasis.pyx":436
 *         cdef np.ndarray[SINGLE, ndim = 1] s
 *         cdef Py_ssize_t t, j
 *         j = self.i             # <<<<<<<<<<<<<<
 *         t = num - self.P[j].l
 *         s = np.zeros(num, dtype='float32')
 */
  __pyx_t_1 = __pyx_v_self->i;
  __pyx_v_j = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":437
 *         cdef Py_ssize_t t, j
 *         j = self.i
 *         t = num - self.P[j].l             # <<<<<<<<<<<<<<
 *         s = np.zeros(num, dtype='float32')
 *         if self.g2 == 0:  # AR(1)
 */
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_num, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_t = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":438
 *         j = self.i
 *         t = num - self.P[j].l
 *         s = np.zeros(num, dtype='float32')             # <<<<<<<<<<<<<<
 *         if self.g2 == 0:  # AR(1)
 *             while t >= (1 if num == self.t else 0):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_num);
  __Pyx_GIVEREF(__pyx_v_num);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_num)) __PYX_ERR(0, 438, __pyx_L1_error);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 438, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_v_s, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_s.diminfo[0].strides = __pyx_pybuffernd_s.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_s.diminfo[0].shape = __pyx_pybuffernd_s.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 438, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_s = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":439
 *         t = num - self.P[j].l
 *         s = np.zeros(num, dtype='float32')
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \
 */
  __pyx_t_11 = (__pyx_v_self->g2 == 0.0);
  if (__pyx_t_11) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":440
 *         s = np.zeros(num, dtype='float32')
 *         if self.g2 == 0:  # AR(1)
 *             while t >= (1 if num == self.t else 0):             # <<<<<<<<<<<<<<
 *                 s[t] = self.P[j].v / self.P[j].w - \
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 */
    while (1) {
      __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_num, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_11) {
        __pyx_t_1 = 1;
      } else {
        __pyx_t_1 = 0;
      }
      __pyx_t_11 = (__pyx_v_t >= __pyx_t_1);
      if (!__pyx_t_11) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":441
 *         if self.g2 == 0:  # AR(1)
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \             # <<<<<<<<<<<<<<
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 *                 j -= 1
 */
      __pyx_t_12 = (__pyx_v_self->P[__pyx_v_j]).v;
      __pyx_t_13 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_13 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 441, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":442
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *                 t -= self.P[j].l
 */
      __pyx_t_14 = (__pyx_v_self->P[(__pyx_v_j - 1)]).v;
      __pyx_t_15 = (__pyx_v_self->P[(__pyx_v_j - 1)]).w;
      if (unlikely(__pyx_t_15 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 442, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":441
 *         if self.g2 == 0:  # AR(1)
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \             # <<<<<<<<<<<<<<
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 *                 j -= 1
 */
      __pyx_t_16 = __pyx_v_t;
      __pyx_t_7 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_s.diminfo[0].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 441, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_s.diminfo[0].strides) = ((__pyx_t_12 / __pyx_t_13) - ((__pyx_t_14 / __pyx_t_15) * pow(((double)__pyx_v_self->g), ((double)(__pyx_v_self->P[(__pyx_v_j - 1)]).l))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":443
 *                 s[t] = self.P[j].v / self.P[j].w - \
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *                 t -= self.P[j].l
 *         else:  # AR(2)
 */
      __pyx_v_j = (__pyx_v_j - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":444
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 *                 j -= 1
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             while t > 0:
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":439
 *         t = num - self.P[j].l
 *         s = np.zeros(num, dtype='float32')
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \
 */
    goto __pyx_L3;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":446
 *                 t -= self.P[j].l
 *         else:  # AR(2)
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 if j > 1:
 *                     if self.P[j - 1].l >= 1000:
 */
  /*else*/ {
    while (1) {
      __pyx_t_11 = (__pyx_v_t > 0);
      if (!__pyx_t_11) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":447
 *         else:  # AR(2)
 *             while t > 0:
 *                 if j > 1:             # <<<<<<<<<<<<<<
 *                     if self.P[j - 1].l >= 1000:
 *                         s[t] = self.P[j].v
 */
      __pyx_t_11 = (__pyx_v_j > 1);
      if (__pyx_t_11) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":448
 *             while t > 0:
 *                 if j > 1:
 *                     if self.P[j - 1].l >= 1000:             # <<<<<<<<<<<<<<
 *                         s[t] = self.P[j].v
 *                         # # more accurate exponential decay
 */
        __pyx_t_11 = ((__pyx_v_self->P[(__pyx_v_j - 1)]).l >= 0x3E8);
        if (__pyx_t_11) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":449
 *                 if j > 1:
 *                     if self.P[j - 1].l >= 1000:
 *                         s[t] = self.P[j].v             # <<<<<<<<<<<<<<
 *                         # # more accurate exponential decay
 *                         # s[t] = self.P[j].v - (self.d**(self.P[j - 1].l+1) /
 */
          __pyx_t_15 = (__pyx_v_self->P[__pyx_v_j]).v;
          __pyx_t_16 = __pyx_v_t;
          __pyx_t_7 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_s.diminfo[0].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 449, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_s.diminfo[0].strides) = __pyx_t_15;

          /* "caiman/source_extraction/cnmf/oasis.pyx":448
 *             while t > 0:
 *                 if j > 1:
 *                     if self.P[j - 1].l >= 1000:             # <<<<<<<<<<<<<<
 *                         s[t] = self.P[j].v
 *                         # # more accurate exponential decay
 */
          goto __pyx_L9;
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":454
 *                         #                       (self.d - self.r) * self.P[j - 1].v)
 *                     else:
 *                         s[t] = self.P[j].v - (self.h[self.P[j - 1].l] * self.P[j - 1].v +             # <<<<<<<<<<<<<<
 *                                               self.g12[self.P[j - 1].l] * self.P[j - 2].w)
 *                 else:  # j==1; spike at the beginning of 2nd pool
 */
        /*else*/ {

          /* "caiman/source_extraction/cnmf/oasis.pyx":455
 *                     else:
 *                         s[t] = self.P[j].v - (self.h[self.P[j - 1].l] * self.P[j - 1].v +
 *                                               self.g12[self.P[j - 1].l] * self.P[j - 2].w)             # <<<<<<<<<<<<<<
 *                 else:  # j==1; spike at the beginning of 2nd pool
 *                     s[t] = (self.P[1].v - self.P[0].w * self.d)
 */
          __pyx_t_16 = __pyx_v_t;
          __pyx_t_7 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_s.diminfo[0].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 454, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_s.diminfo[0].strides) = ((__pyx_v_self->P[__pyx_v_j]).v - (((__pyx_v_self->h[(__pyx_v_self->P[(__pyx_v_j - 1)]).l]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).v) + ((__pyx_v_self->g12[(__pyx_v_self->P[(__pyx_v_j - 1)]).l]) * (__pyx_v_self->P[(__pyx_v_j - 2)]).w)));
        }
        __pyx_L9:;

        /* "caiman/source_extraction/cnmf/oasis.pyx":447
 *         else:  # AR(2)
 *             while t > 0:
 *                 if j > 1:             # <<<<<<<<<<<<<<
 *                     if self.P[j - 1].l >= 1000:
 *                         s[t] = self.P[j].v
 */
        goto __pyx_L8;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":457
 *                                               self.g12[self.P[j - 1].l] * self.P[j - 2].w)
 *                 else:  # j==1; spike at the beginning of 2nd pool
 *                     s[t] = (self.P[1].v - self.P[0].w * self.d)             # <<<<<<<<<<<<<<
 *                     return s
 *                 j -= 1
 */
      /*else*/ {
        __pyx_t_16 = __pyx_v_t;
        __pyx_t_7 = -1;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_pybuffernd_s.diminfo[0].shape;
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 457, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_s.diminfo[0].strides) = ((__pyx_v_self->P[1]).v - ((__pyx_v_self->P[0]).w * __pyx_v_self->d));

        /* "caiman/source_extraction/cnmf/oasis.pyx":458
 *                 else:  # j==1; spike at the beginning of 2nd pool
 *                     s[t] = (self.P[1].v - self.P[0].w * self.d)
 *                     return s             # <<<<<<<<<<<<<<
 *                 j -= 1
 *                 t -= self.P[j].l
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF((PyObject *)__pyx_v_s);
        __pyx_r = ((PyObject *)__pyx_v_s);
        goto __pyx_L0;
      }
      __pyx_L8:;

      /* "caiman/source_extraction/cnmf/oasis.pyx":459
 *                     s[t] = (self.P[1].v - self.P[0].w * self.d)
 *                     return s
 *                 j -= 1             # <<<<<<<<<<<<<<
 *                 t -= self.P[j].l
 *         return s
 */
      __pyx_v_j = (__pyx_v_j - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":460
 *                     return s
 *                 j -= 1
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);
    }
  }
  __pyx_L3:;

  /* "caiman/source_extraction/cnmf/oasis.pyx":461
 *                 j -= 1
 *                 t -= self.P[j].l
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def get_l_of_last_pool(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_s);
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":430
 *         return c
 * 
 *     def get_s(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return deconvolved activity for last num time steps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.get_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":463
 *         return s
 * 
 *     def get_l_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return length of last pool
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_13get_l_of_last_pool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_12get_l_of_last_pool, "\n        return length of last pool\n        ");
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_13get_l_of_last_pool = {"get_l_of_last_pool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_13get_l_of_last_pool, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_12get_l_of_last_pool};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_13get_l_of_last_pool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_l_of_last_pool (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_l_of_last_pool", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_l_of_last_pool", 0))) return NULL;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_12get_l_of_last_pool(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_12get_l_of_last_pool(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_l_of_last_pool", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":467
 *         return length of last pool
 *         """
 *         return self.P[self.i].l             # <<<<<<<<<<<<<<
 * 
 *     def get_c_of_last_pool(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":463
 *         return s
 * 
 *     def get_l_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return length of last pool
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.get_l_of_last_pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":469
 *         return self.P[self.i].l
 * 
 *     def get_c_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium of last pool, i.e. the part of c that actually changed
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_15get_c_of_last_pool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_14get_c_of_last_pool, "\n        return denoised calcium of last pool, i.e. the part of c that actually changed\n        ");
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_15get_c_of_last_pool = {"get_c_of_last_pool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_15get_c_of_last_pool, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_14get_c_of_last_pool};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_15get_c_of_last_pool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c_of_last_pool (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_c_of_last_pool", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_c_of_last_pool", 0))) return NULL;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_14get_c_of_last_pool(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_14get_c_of_last_pool(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyArrayObject *__pyx_v_c = 0;
  Py_ssize_t __pyx_v_k;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_11;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_12;
  long __pyx_t_13;
  long __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_c_of_last_pool", 1);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "caiman/source_extraction/cnmf/oasis.pyx":476
 *         cdef Py_ssize_t k
 *         cdef SINGLE tmp
 *         c = np.zeros(self.P[self.i].l, dtype='float32')             # <<<<<<<<<<<<<<
 *         if self.g2 == 0:  # AR(1)
 *             tmp = self.P[self.i].v / self.P[self.i].w
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 476, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 476, __pyx_L1_error)
  }
  __pyx_t_5 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":477
 *         cdef SINGLE tmp
 *         c = np.zeros(self.P[self.i].l, dtype='float32')
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             tmp = self.P[self.i].v / self.P[self.i].w
 *             for k in range(min1000(self.P[self.i].l)):
 */
  __pyx_t_10 = (__pyx_v_self->g2 == 0.0);
  if (__pyx_t_10) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":478
 *         c = np.zeros(self.P[self.i].l, dtype='float32')
 *         if self.g2 == 0:  # AR(1)
 *             tmp = self.P[self.i].v / self.P[self.i].w             # <<<<<<<<<<<<<<
 *             for k in range(min1000(self.P[self.i].l)):
 *                 c[k] = tmp * self.h[k]
 */
    __pyx_t_11 = (__pyx_v_self->P[__pyx_v_self->i]).v;
    __pyx_t_12 = (__pyx_v_self->P[__pyx_v_self->i]).w;
    if (unlikely(__pyx_t_12 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 478, __pyx_L1_error)
    }
    __pyx_v_tmp = (__pyx_t_11 / __pyx_t_12);

    /* "caiman/source_extraction/cnmf/oasis.pyx":479
 *         if self.g2 == 0:  # AR(1)
 *             tmp = self.P[self.i].v / self.P[self.i].w
 *             for k in range(min1000(self.P[self.i].l)):             # <<<<<<<<<<<<<<
 *                 c[k] = tmp * self.h[k]
 *             # # more accurate exponential decay instead truncation
 */
    __pyx_t_4 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_f_6caiman_17source_extraction_4cnmf_5oasis_min1000(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_13 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_13 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_k = __pyx_t_15;

      /* "caiman/source_extraction/cnmf/oasis.pyx":480
 *             tmp = self.P[self.i].v / self.P[self.i].w
 *             for k in range(min1000(self.P[self.i].l)):
 *                 c[k] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *             # # more accurate exponential decay instead truncation
 *             # for k in range(1000, self.P[self.i].l):
 */
      __pyx_t_16 = __pyx_v_k;
      __pyx_t_6 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 480, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":477
 *         cdef SINGLE tmp
 *         c = np.zeros(self.P[self.i].l, dtype='float32')
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             tmp = self.P[self.i].v / self.P[self.i].w
 *             for k in range(min1000(self.P[self.i].l)):
 */
    goto __pyx_L3;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":485
 *             #     c[k] = c[k - 1] * self.g
 *         else:  # AR(2)
 *             if self.i == 0:  # first pool             # <<<<<<<<<<<<<<
 *                 c[0] = self.P[0].v
 *                 for k in range(1, self.P[0].l):
 */
  /*else*/ {
    __pyx_t_10 = (__pyx_v_self->i == 0);
    if (__pyx_t_10) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":486
 *         else:  # AR(2)
 *             if self.i == 0:  # first pool
 *                 c[0] = self.P[0].v             # <<<<<<<<<<<<<<
 *                 for k in range(1, self.P[0].l):
 *                     c[k] = c[k - 1] * self.d
 */
      __pyx_t_12 = (__pyx_v_self->P[0]).v;
      __pyx_t_16 = 0;
      __pyx_t_6 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 486, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_t_12;

      /* "caiman/source_extraction/cnmf/oasis.pyx":487
 *             if self.i == 0:  # first pool
 *                 c[0] = self.P[0].v
 *                 for k in range(1, self.P[0].l):             # <<<<<<<<<<<<<<
 *                     c[k] = c[k - 1] * self.d
 *             else:
 */
      __pyx_t_15 = (__pyx_v_self->P[0]).l;
      __pyx_t_17 = __pyx_t_15;
      for (__pyx_t_18 = 1; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_k = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":488
 *                 c[0] = self.P[0].v
 *                 for k in range(1, self.P[0].l):
 *                     c[k] = c[k - 1] * self.d             # <<<<<<<<<<<<<<
 *             else:
 *                 for k in range(min1000(self.P[self.i].l)):
 */
        __pyx_t_16 = (__pyx_v_k - 1);
        __pyx_t_6 = -1;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_6 = 0;
        } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
        if (unlikely(__pyx_t_6 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_6);
          __PYX_ERR(0, 488, __pyx_L1_error)
        }
        __pyx_t_19 = __pyx_v_k;
        __pyx_t_6 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_6 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
        if (unlikely(__pyx_t_6 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_6);
          __PYX_ERR(0, 488, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides)) * __pyx_v_self->d);
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":485
 *             #     c[k] = c[k - 1] * self.g
 *         else:  # AR(2)
 *             if self.i == 0:  # first pool             # <<<<<<<<<<<<<<
 *                 c[0] = self.P[0].v
 *                 for k in range(1, self.P[0].l):
 */
      goto __pyx_L6;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":490
 *                     c[k] = c[k - 1] * self.d
 *             else:
 *                 for k in range(min1000(self.P[self.i].l)):             # <<<<<<<<<<<<<<
 *                     c[k] = self.h[k] * self.P[self.i].v + self.g12[k] * self.P[self.i - 1].w
 *                 # # more accurate exponential decay instead truncation
 */
    /*else*/ {
      __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __pyx_f_6caiman_17source_extraction_4cnmf_5oasis_min1000(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_13 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_14 = __pyx_t_13;
      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_k = __pyx_t_15;

        /* "caiman/source_extraction/cnmf/oasis.pyx":491
 *             else:
 *                 for k in range(min1000(self.P[self.i].l)):
 *                     c[k] = self.h[k] * self.P[self.i].v + self.g12[k] * self.P[self.i - 1].w             # <<<<<<<<<<<<<<
 *                 # # more accurate exponential decay instead truncation
 *                 # for k in range(1000, self.P[self.i].l):
 */
        __pyx_t_16 = __pyx_v_k;
        __pyx_t_6 = -1;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_6 = 0;
        } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
        if (unlikely(__pyx_t_6 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_6);
          __PYX_ERR(0, 491, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_self->i]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_self->i - 1)]).w));
      }
    }
    __pyx_L6:;
  }
  __pyx_L3:;

  /* "caiman/source_extraction/cnmf/oasis.pyx":495
 *                 # for k in range(1000, self.P[self.i].l):
 *                 #     c[k] = c[k - 1] * self.d
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def remove_last_pool(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":469
 *         return self.P[self.i].l
 * 
 *     def get_c_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium of last pool, i.e. the part of c that actually changed
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.get_c_of_last_pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":497
 *         return c
 * 
 *     def remove_last_pool(self):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_17remove_last_pool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_17remove_last_pool = {"remove_last_pool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_17remove_last_pool, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_17remove_last_pool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_last_pool (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("remove_last_pool", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "remove_last_pool", 0))) return NULL;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_16remove_last_pool(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_16remove_last_pool(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("remove_last_pool", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":499
 *     def remove_last_pool(self):
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l             # <<<<<<<<<<<<<<
 *         if self.g2 != 0:
 *             for k in range(self.P[self.i].l):
 */
  __pyx_v_self->t = (__pyx_v_self->t - (__pyx_v_self->P[__pyx_v_self->i]).l);

  /* "caiman/source_extraction/cnmf/oasis.pyx":500
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 *         if self.g2 != 0:             # <<<<<<<<<<<<<<
 *             for k in range(self.P[self.i].l):
 *                 self._y.pop_back()
 */
  __pyx_t_1 = (__pyx_v_self->g2 != 0.0);
  if (__pyx_t_1) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":501
 *         self.t -= self.P[self.i].l
 *         if self.g2 != 0:
 *             for k in range(self.P[self.i].l):             # <<<<<<<<<<<<<<
 *                 self._y.pop_back()
 *         self.i -= 1
 */
    __pyx_t_2 = (__pyx_v_self->P[__pyx_v_self->i]).l;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_k = __pyx_t_4;

      /* "caiman/source_extraction/cnmf/oasis.pyx":502
 *         if self.g2 != 0:
 *             for k in range(self.P[self.i].l):
 *                 self._y.pop_back()             # <<<<<<<<<<<<<<
 *         self.i -= 1
 *         self.P.pop_back()
 */
      __pyx_v_self->_y.pop_back();
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":500
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 *         if self.g2 != 0:             # <<<<<<<<<<<<<<
 *             for k in range(self.P[self.i].l):
 *                 self._y.pop_back()
 */
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":503
 *             for k in range(self.P[self.i].l):
 *                 self._y.pop_back()
 *         self.i -= 1             # <<<<<<<<<<<<<<
 *         self.P.pop_back()
 * 
 */
  __pyx_v_self->i = (__pyx_v_self->i - 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":504
 *                 self._y.pop_back()
 *         self.i -= 1
 *         self.P.pop_back()             # <<<<<<<<<<<<<<
 * 
 *     def get_l_of_pool(self, idx_from_end=0):
 */
  __pyx_v_self->P.pop_back();

  /* "caiman/source_extraction/cnmf/oasis.pyx":497
 *         return c
 * 
 *     def remove_last_pool(self):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":506
 *         self.P.pop_back()
 * 
 *     def get_l_of_pool(self, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         return self.P[self.i - idx_from_end].l
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_19get_l_of_pool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_19get_l_of_pool = {"get_l_of_pool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_19get_l_of_pool, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_19get_l_of_pool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_idx_from_end = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_l_of_pool (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_idx_from_end,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idx_from_end);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 506, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_l_of_pool") < 0)) __PYX_ERR(0, 506, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_idx_from_end = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_l_of_pool", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 506, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.get_l_of_pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_18get_l_of_pool(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self), __pyx_v_idx_from_end);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_18get_l_of_pool(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_idx_from_end) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool> ::size_type __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_l_of_pool", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":507
 * 
 *     def get_l_of_pool(self, idx_from_end=0):
 *         return self.P[self.i - idx_from_end].l             # <<<<<<<<<<<<<<
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_idx_from_end); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_t_3]).l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":506
 *         self.P.pop_back()
 * 
 *     def get_l_of_pool(self, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         return self.P[self.i - idx_from_end].l
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.get_l_of_pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":509
 *         return self.P[self.i - idx_from_end].l
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         self.P[self.i - idx_from_end].v = val
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_21set_poolvalue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_21set_poolvalue = {"set_poolvalue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_21set_poolvalue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_21set_poolvalue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_v_idx_from_end = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_poolvalue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,&__pyx_n_s_idx_from_end,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_val)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idx_from_end);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_poolvalue") < 0)) __PYX_ERR(0, 509, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_val = values[0];
    __pyx_v_idx_from_end = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_poolvalue", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 509, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.set_poolvalue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_20set_poolvalue(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self), __pyx_v_val, __pyx_v_idx_from_end);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_20set_poolvalue(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_val, PyObject *__pyx_v_idx_from_end) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool> ::size_type __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_poolvalue", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":510
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):
 *         self.P[self.i - idx_from_end].v = val             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_val); if (unlikely((__pyx_t_1 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_v_idx_from_end); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  (__pyx_v_self->P[__pyx_t_4]).v = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":509
 *         return self.P[self.i - idx_from_end].l
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         self.P[self.i - idx_from_end].v = val
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.set_poolvalue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":512
 *         self.P[self.i - idx_from_end].v = val
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def P(self):
 *         cdef Py_ssize_t j
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1P_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1P_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1P___get__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1P___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  Py_ssize_t __pyx_v_j;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":515
 *     def P(self):
 *         cdef Py_ssize_t j
 *         tmp = []             # <<<<<<<<<<<<<<
 *         for j in range(self.i+1):
 *             tmp.append([self.P[j].v, self.P[j].w, self.P[j].t, self.P[j].l])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":516
 *         cdef Py_ssize_t j
 *         tmp = []
 *         for j in range(self.i+1):             # <<<<<<<<<<<<<<
 *             tmp.append([self.P[j].v, self.P[j].w, self.P[j].t, self.P[j].l])
 *         return tmp
 */
  __pyx_t_2 = (__pyx_v_self->i + 1);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_j = __pyx_t_4;

    /* "caiman/source_extraction/cnmf/oasis.pyx":517
 *         tmp = []
 *         for j in range(self.i+1):
 *             tmp.append([self.P[j].v, self.P[j].w, self.P[j].t, self.P[j].l])             # <<<<<<<<<<<<<<
 *         return tmp
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->P[__pyx_v_j]).v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->P[__pyx_v_j]).w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).t); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyList_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_5)) __PYX_ERR(0, 517, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_7)) __PYX_ERR(0, 517, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_tmp, __pyx_t_8); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":518
 *         for j in range(self.i+1):
 *             tmp.append([self.P[j].v, self.P[j].w, self.P[j].t, self.P[j].l])
 *         return tmp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tmp);
  __pyx_r = __pyx_v_tmp;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":512
 *         self.P[self.i - idx_from_end].v = val
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def P(self):
 *         cdef Py_ssize_t j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.P.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":520
 *         return tmp
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def g(self):
 *         return self.g
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1g_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1g_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1g___get__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1g___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":522
 *     @property
 *     def g(self):
 *         return self.g             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->g); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":520
 *         return tmp
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def g(self):
 *         return self.g
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.g.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":524
 *         return self.g
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def g2(self):
 *         return self.g2
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2g2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2g2_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2g2___get__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2g2___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":526
 *     @property
 *     def g2(self):
 *         return self.g2             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->g2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":524
 *         return self.g
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def g2(self):
 *         return self.g2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.g2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":528
 *         return self.g2
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def lam(self):
 *         return self.lam
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3lam_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3lam_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3lam___get__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3lam___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":530
 *     @property
 *     def lam(self):
 *         return self.lam             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->lam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":528
 *         return self.g2
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def lam(self):
 *         return self.lam
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.lam.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":532
 *         return self.lam
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def s_min(self):
 *         return self.s_min
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5s_min_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5s_min_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5s_min___get__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5s_min___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":534
 *     @property
 *     def s_min(self):
 *         return self.s_min             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->s_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":532
 *         return self.lam
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def s_min(self):
 *         return self.s_min
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.s_min.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":536
 *         return self.s_min
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def b(self):
 *         return self.b
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1b_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1b_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1b___get__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1b___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":538
 *     @property
 *     def b(self):
 *         return self.b             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":536
 *         return self.s_min
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def b(self):
 *         return self.b
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.b.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":540
 *         return self.b
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def t(self):
 *         return self.t
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1t_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1t_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1t___get__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1t___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "caiman/source_extraction/cnmf/oasis.pyx":542
 *     @property
 *     def t(self):
 *         return self.t             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":540
 *         return self.b
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def t(self):
 *         return self.t
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.t.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":544
 *         return self.t
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def c(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1c_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1c_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1c___get__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1c___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyArrayObject *__pyx_v_c = 0;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  double __pyx_t_14;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "caiman/source_extraction/cnmf/oasis.pyx":552
 *         cdef Py_ssize_t j, k
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i + 1):
 */
  __pyx_t_1 = (__pyx_v_self->g2 == 0.0);
  if (__pyx_t_1) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":553
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')             # <<<<<<<<<<<<<<
 *             for j in range(self.i + 1):
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(((__pyx_v_self->P[__pyx_v_self->i]).t + (__pyx_v_self->P[__pyx_v_self->i]).l)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 553, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 553, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 553, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_c = ((PyArrayObject *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":554
 *         if self.g2 == 0:  # AR(1)
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i + 1):             # <<<<<<<<<<<<<<
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 for k in range(min1000(self.P[j].l)):
 */
    __pyx_t_11 = (__pyx_v_self->i + 1);
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "caiman/source_extraction/cnmf/oasis.pyx":555
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i + 1):
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w             # <<<<<<<<<<<<<<
 *                 for k in range(min1000(self.P[j].l)):
 *                     c[k + self.P[j].t] = tmp * self.h[k]
 */
      __pyx_t_14 = fmax((__pyx_v_self->P[__pyx_v_j]).v, 0.0);
      __pyx_t_15 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_15 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 555, __pyx_L1_error)
      }
      __pyx_v_tmp = (__pyx_t_14 / ((double)__pyx_t_15));

      /* "caiman/source_extraction/cnmf/oasis.pyx":556
 *             for j in range(self.i + 1):
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 for k in range(min1000(self.P[j].l)):             # <<<<<<<<<<<<<<
 *                     c[k + self.P[j].t] = tmp * self.h[k]
 *                 # # more accurate exponential decay instead truncation
 */
      __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __pyx_f_6caiman_17source_extraction_4cnmf_5oasis_min1000(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_16 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_16 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 556, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_17 = __pyx_t_16;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_k = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":557
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 for k in range(min1000(self.P[j].l)):
 *                     c[k + self.P[j].t] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *                 # # more accurate exponential decay instead truncation
 *                 # for k in range(1000, self.P[j].l):
 */
        __pyx_t_19 = (__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).t);
        __pyx_t_7 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 557, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
      }
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":561
 *                 # for k in range(1000, self.P[j].l):
 *                 #     c[k + self.P[j].t] = tmp * self.g**k
 *             return c             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_c);
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":552
 *         cdef Py_ssize_t j, k
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i + 1):
 */
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":563
 *             return c
 *         else:  # AR(2)
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')             # <<<<<<<<<<<<<<
 *             # first pool
 *             c[0] = self.P[0].v
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(((__pyx_v_self->P[__pyx_v_self->i]).t + (__pyx_v_self->P[__pyx_v_self->i]).l)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 563, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 563, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 563, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_c = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":565
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             # first pool
 *             c[0] = self.P[0].v             # <<<<<<<<<<<<<<
 *             for k in range(1, self.P[0].l):
 *                 c[k] = c[k - 1] * self.d
 */
    __pyx_t_15 = (__pyx_v_self->P[0]).v;
    __pyx_t_19 = 0;
    __pyx_t_7 = -1;
    if (__pyx_t_19 < 0) {
      __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
      if (unlikely(__pyx_t_19 < 0)) __pyx_t_7 = 0;
    } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(0, 565, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_t_15;

    /* "caiman/source_extraction/cnmf/oasis.pyx":566
 *             # first pool
 *             c[0] = self.P[0].v
 *             for k in range(1, self.P[0].l):             # <<<<<<<<<<<<<<
 *                 c[k] = c[k - 1] * self.d
 *             # remaining pools
 */
    __pyx_t_11 = (__pyx_v_self->P[0]).l;
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = 1; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_k = __pyx_t_13;

      /* "caiman/source_extraction/cnmf/oasis.pyx":567
 *             c[0] = self.P[0].v
 *             for k in range(1, self.P[0].l):
 *                 c[k] = c[k - 1] * self.d             # <<<<<<<<<<<<<<
 *             # remaining pools
 *             for j in range(1, self.i + 1):
 */
      __pyx_t_19 = (__pyx_v_k - 1);
      __pyx_t_7 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 567, __pyx_L1_error)
      }
      __pyx_t_20 = __pyx_v_k;
      __pyx_t_7 = -1;
      if (__pyx_t_20 < 0) {
        __pyx_t_20 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 567, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_c.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides)) * __pyx_v_self->d);
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":569
 *                 c[k] = c[k - 1] * self.d
 *             # remaining pools
 *             for j in range(1, self.i + 1):             # <<<<<<<<<<<<<<
 *                 for k in range(min1000(self.P[j].l)):
 *                     c[k + self.P[j].t] = self.h[k] * self.P[j].v + self.g12[k] * self.P[j - 1].w
 */
    __pyx_t_11 = (__pyx_v_self->i + 1);
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = 1; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "caiman/source_extraction/cnmf/oasis.pyx":570
 *             # remaining pools
 *             for j in range(1, self.i + 1):
 *                 for k in range(min1000(self.P[j].l)):             # <<<<<<<<<<<<<<
 *                     c[k + self.P[j].t] = self.h[k] * self.P[j].v + self.g12[k] * self.P[j - 1].w
 *                 # # more accurate exponential decay instead truncation
 */
      __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_f_6caiman_17source_extraction_4cnmf_5oasis_min1000(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_16 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_16 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_17 = __pyx_t_16;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_k = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":571
 *             for j in range(1, self.i + 1):
 *                 for k in range(min1000(self.P[j].l)):
 *                     c[k + self.P[j].t] = self.h[k] * self.P[j].v + self.g12[k] * self.P[j - 1].w             # <<<<<<<<<<<<<<
 *                 # # more accurate exponential decay instead truncation
 *                 # for k in range(1000, self.P[j].l):
 */
        __pyx_t_19 = (__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).t);
        __pyx_t_7 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 571, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
      }
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":575
 *                 # for k in range(1000, self.P[j].l):
 *                 #     c[k + self.P[j].t] = c[k + self.P[j].t - 1] * self.d
 *             return c             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_c);
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":544
 *         return self.t
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def c(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.c.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":577
 *             return c
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def s(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1s_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1s_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1s___get__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1s___get__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyArrayObject *__pyx_v_s = 0;
  Py_ssize_t __pyx_v_j;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_s;
  __Pyx_Buffer __pyx_pybuffer_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_14;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_15;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_16;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __pyx_pybuffer_s.pybuffer.buf = NULL;
  __pyx_pybuffer_s.refcount = 0;
  __pyx_pybuffernd_s.data = NULL;
  __pyx_pybuffernd_s.rcbuffer = &__pyx_pybuffer_s;

  /* "caiman/source_extraction/cnmf/oasis.pyx":584
 *         cdef np.ndarray[SINGLE, ndim = 1] s
 *         cdef Py_ssize_t j
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):
 */
  __pyx_t_1 = (__pyx_v_self->g2 == 0.0);
  if (__pyx_t_1) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":585
 *         cdef Py_ssize_t j
 *         if self.g2 == 0:  # AR(1)
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')             # <<<<<<<<<<<<<<
 *             for j in range(self.i):
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(((__pyx_v_self->P[__pyx_v_self->i]).t + (__pyx_v_self->P[__pyx_v_self->i]).l)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_u_float32) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 585, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_v_s, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_s.diminfo[0].strides = __pyx_pybuffernd_s.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_s.diminfo[0].shape = __pyx_pybuffernd_s.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 585, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_s = ((PyArrayObject *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":586
 *         if self.g2 == 0:  # AR(1)
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):             # <<<<<<<<<<<<<<
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l
 */
    __pyx_t_11 = __pyx_v_self->i;
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "caiman/source_extraction/cnmf/oasis.pyx":587
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \             # <<<<<<<<<<<<<<
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l
 *             return s
 */
      __pyx_t_14 = (__pyx_v_self->P[(__pyx_v_j + 1)]).v;
      __pyx_t_15 = (__pyx_v_self->P[(__pyx_v_j + 1)]).w;
      if (unlikely(__pyx_t_15 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 587, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":588
 *             for j in range(self.i):
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l             # <<<<<<<<<<<<<<
 *             return s
 *         else:  # AR(2)
 */
      __pyx_t_16 = (__pyx_v_self->P[__pyx_v_j]).v;
      __pyx_t_17 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_17 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 588, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":587
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \             # <<<<<<<<<<<<<<
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l
 *             return s
 */
      __pyx_t_18 = (__pyx_v_self->P[(__pyx_v_j + 1)]).t;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_pybuffernd_s.diminfo[0].shape;
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 587, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_s.diminfo[0].strides) = ((__pyx_t_14 / __pyx_t_15) - ((__pyx_t_16 / __pyx_t_17) * pow(((double)__pyx_v_self->g), ((double)(__pyx_v_self->P[__pyx_v_j]).l))));
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":589
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l
 *             return s             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             return self.get_s(self.P[self.i].t + self.P[self.i].l)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_s);
    __pyx_r = ((PyObject *)__pyx_v_s);
    goto __pyx_L0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":584
 *         cdef np.ndarray[SINGLE, ndim = 1] s
 *         cdef Py_ssize_t j
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):
 */
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":591
 *             return s
 *         else:  # AR(2)
 *             return self.get_s(self.P[self.i].t + self.P[self.i].l)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyInt_FromSsize_t(((__pyx_v_self->P[__pyx_v_self->i]).t + (__pyx_v_self->P[__pyx_v_self->i]).l)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":577
 *             return c
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def s(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.s.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_23__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_22__reduce_cython__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_22__reduce_cython__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.P, self._y, self.b, self.d, self.g, self.g11g11, self.g11g12, self.g12, self.g2, self.h, self.i, self.lam, self.r, self.s_min, self.t, self.v, self.w, self.yt)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_v_self->P); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_v_self->_y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->d); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->g); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_v_self->g11g11, 0x3E8); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_v_self->g11g12, 0x3E8); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_v_self->g12, 0x3E8); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->g2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_carray_to_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_v_self->h, 0x3E8); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_self->i); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->lam); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_self->r); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->s_min); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->t); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = PyFloat_FromDouble(__pyx_v_self->v); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyFloat_FromDouble(__pyx_v_self->w); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble(__pyx_v_self->yt); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = PyTuple_New(18); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 2, __pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 3, __pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 4, __pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 5, __pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 6, __pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 7, __pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 8, __pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 9, __pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 10, __pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 11, __pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 12, __pyx_t_13)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 13, __pyx_t_14)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 14, __pyx_t_15)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 15, __pyx_t_16)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 16, __pyx_t_17)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 17, __pyx_t_18)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_19);
  __pyx_t_19 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.P, self._y, self.b, self.d, self.g, self.g11g11, self.g11g12, self.g12, self.g2, self.h, self.i, self.lam, self.r, self.s_min, self.t, self.v, self.w, self.yt)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_19 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_v__dict = __pyx_t_19;
  __pyx_t_19 = 0;

  /* "(tree fragment)":7
 *     state = (self.P, self._y, self.b, self.d, self.g, self.g11g11, self.g11g12, self.g12, self.g2, self.h, self.i, self.lam, self.r, self.s_min, self.t, self.v, self.w, self.yt)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_20 = (__pyx_v__dict != Py_None);
  if (__pyx_t_20) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_19 = PyTuple_New(1); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_18 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_19); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_18));
    __pyx_t_18 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.P, self._y, self.b, self.d, self.g, self.g11g11, self.g11g12, self.g12, self.g2, self.h, self.i, self.lam, self.r, self.s_min, self.t, self.v, self.w, self.yt)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_pyx_unpickle_OASIS); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_19 = PyTuple_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_69716847);
    __Pyx_GIVEREF(__pyx_int_69716847);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_int_69716847)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_17 = PyTuple_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_18);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_18)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_19);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_19)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_18 = 0;
    __pyx_t_19 = 0;
    __pyx_r = __pyx_t_17;
    __pyx_t_17 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, None), state
 *     else:
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OASIS__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_pyx_unpickle_OASIS); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_19 = PyTuple_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_69716847);
    __Pyx_GIVEREF(__pyx_int_69716847);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_int_69716847)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_17);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_19);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_19)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_17 = 0;
    __pyx_t_19 = 0;
    __pyx_r = __pyx_t_18;
    __pyx_t_18 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OASIS__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_25__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_24__setstate_cython__(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_24__setstate_cython__(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OASIS__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6caiman_17source_extraction_4cnmf_5oasis___pyx_unpickle_OASIS__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OASIS__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.OASIS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":594
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE lam=0, SINGLE s_min=0):
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_1oasisAR1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_oasisAR1, " Infer the most likely discretized spike train underlying an AR(1) fluorescence trace\n\n    Solves the sparse non-negative deconvolution problem\n    min 1/2|c-y|^2 + lam |s|_1 subject to s_t = c_t-g c_{t-1} >=s_min or =0\n\n    Parameters\n    ----------\n    y : array of float\n        One dimensional array containing the fluorescence intensities with\n        one entry per time-bin.\n    g : float\n        Parameter of the AR(1) process that models the fluorescence impulse response.\n    lam : float, optional, default 0\n        Sparsity penalty parameter lambda.\n    s_min : float, optional, default 0\n        Minimal non-zero activity within each bin (minimal 'spike size').\n\n    Returns\n    -------\n    c : array of float\n        The inferred denoised fluorescence signal at each time-bin.\n    s : array of float\n        Discretized deconvolved neural activity (spikes)\n\n    References\n    ----------\n    * Friedrich J and Paninski L, NIPS 2016\n    * Friedrich J, Zhou P, and Paninski L, PLOS Computational Biology 2017\n    ");
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_1oasisAR1 = {"oasisAR1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_1oasisAR1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_oasisAR1};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_1oasisAR1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_y = 0;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_lam;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_s_min;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("oasisAR1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_g,&__pyx_n_s_lam,&__pyx_n_s_s_min,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 594, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_g)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 594, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("oasisAR1", 0, 2, 4, 1); __PYX_ERR(0, 594, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lam);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 594, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s_min);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 594, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "oasisAR1") < 0)) __PYX_ERR(0, 594, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_y = ((PyArrayObject *)values[0]);
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_lam = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_lam == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L3_error)
    } else {
      __pyx_v_lam = ((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)0.0));
    }
    if (values[3]) {
      __pyx_v_s_min = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_s_min == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L3_error)
    } else {
      __pyx_v_s_min = ((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)0.0));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("oasisAR1", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 594, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.oasisAR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 595, __pyx_L1_error)
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_oasisAR1(__pyx_self, __pyx_v_y, __pyx_v_g, __pyx_v_lam, __pyx_v_s_min);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_oasisAR1(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_lam, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_s_min) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_T;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_tmp;
  PyArrayObject *__pyx_v_c = 0;
  PyArrayObject *__pyx_v_s = 0;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_v_P;
  struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_v_newpool;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_s;
  __Pyx_Buffer __pyx_pybuffer_s;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_4;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("oasisAR1", 1);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;
  __pyx_pybuffer_s.pybuffer.buf = NULL;
  __pyx_pybuffer_s.refcount = 0;
  __pyx_pybuffernd_s.data = NULL;
  __pyx_pybuffernd_s.rcbuffer = &__pyx_pybuffer_s;
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 594, __pyx_L1_error)
  }
  __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];

  /* "caiman/source_extraction/cnmf/oasis.pyx":633
 *         Pool newpool
 * 
 *     T = len(y)             # <<<<<<<<<<<<<<
 *     # [value, weight, start time, length] of pool
 *     newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 633, __pyx_L1_error)
  __pyx_v_T = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":635
 *     T = len(y)
 *     # [value, weight, start time, length] of pool
 *     newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1             # <<<<<<<<<<<<<<
 *     P.push_back(newpool)
 *     i = 0  # index of last pool
 */
  __pyx_t_2 = 0;
  __pyx_t_3 = -1;
  if (__pyx_t_2 < 0) {
    __pyx_t_2 += __pyx_pybuffernd_y.diminfo[0].shape;
    if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
  } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_3 = 0;
  if (unlikely(__pyx_t_3 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_3);
    __PYX_ERR(0, 635, __pyx_L1_error)
  }
  __pyx_t_4 = ((*__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_y.diminfo[0].strides)) - (__pyx_v_lam * (1.0 - __pyx_v_g)));
  __pyx_t_5 = 1.0;
  __pyx_t_1 = 0;
  __pyx_t_6 = 1;
  __pyx_v_newpool.v = __pyx_t_4;
  __pyx_v_newpool.w = __pyx_t_5;
  __pyx_v_newpool.t = __pyx_t_1;
  __pyx_v_newpool.l = __pyx_t_6;

  /* "caiman/source_extraction/cnmf/oasis.pyx":636
 *     # [value, weight, start time, length] of pool
 *     newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 *     P.push_back(newpool)             # <<<<<<<<<<<<<<
 *     i = 0  # index of last pool
 *     t = 1  # number of time points added = index of next data point
 */
  try {
    __pyx_v_P.push_back(__pyx_v_newpool);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 636, __pyx_L1_error)
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":637
 *     newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 *     P.push_back(newpool)
 *     i = 0  # index of last pool             # <<<<<<<<<<<<<<
 *     t = 1  # number of time points added = index of next data point
 *     while t < T:
 */
  __pyx_v_i = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":638
 *     P.push_back(newpool)
 *     i = 0  # index of last pool
 *     t = 1  # number of time points added = index of next data point             # <<<<<<<<<<<<<<
 *     while t < T:
 *         # add next data point as pool
 */
  __pyx_v_t = 1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":639
 *     i = 0  # index of last pool
 *     t = 1  # number of time points added = index of next data point
 *     while t < T:             # <<<<<<<<<<<<<<
 *         # add next data point as pool
 *         newpool.v = y[t] - lam * (1 if t == T - 1 else (1 - g))
 */
  while (1) {
    __pyx_t_7 = (__pyx_v_t < __pyx_v_T);
    if (!__pyx_t_7) break;

    /* "caiman/source_extraction/cnmf/oasis.pyx":641
 *     while t < T:
 *         # add next data point as pool
 *         newpool.v = y[t] - lam * (1 if t == T - 1 else (1 - g))             # <<<<<<<<<<<<<<
 *         newpool.w, newpool.t, newpool.l = 1, t, 1
 *         P.push_back(newpool)
 */
    __pyx_t_2 = __pyx_v_t;
    __pyx_t_3 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_pybuffernd_y.diminfo[0].shape;
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(0, 641, __pyx_L1_error)
    }
    __pyx_t_7 = (__pyx_v_t == (__pyx_v_T - 1));
    if (__pyx_t_7) {
      __pyx_t_5 = 1.0;
    } else {
      __pyx_t_5 = (1.0 - __pyx_v_g);
    }
    __pyx_v_newpool.v = ((*__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_y.diminfo[0].strides)) - (__pyx_v_lam * __pyx_t_5));

    /* "caiman/source_extraction/cnmf/oasis.pyx":642
 *         # add next data point as pool
 *         newpool.v = y[t] - lam * (1 if t == T - 1 else (1 - g))
 *         newpool.w, newpool.t, newpool.l = 1, t, 1             # <<<<<<<<<<<<<<
 *         P.push_back(newpool)
 *         t += 1
 */
    __pyx_t_5 = 1.0;
    __pyx_t_6 = __pyx_v_t;
    __pyx_t_1 = 1;
    __pyx_v_newpool.w = __pyx_t_5;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_1;

    /* "caiman/source_extraction/cnmf/oasis.pyx":643
 *         newpool.v = y[t] - lam * (1 if t == T - 1 else (1 - g))
 *         newpool.w, newpool.t, newpool.l = 1, t, 1
 *         P.push_back(newpool)             # <<<<<<<<<<<<<<
 *         t += 1
 *         i += 1
 */
    try {
      __pyx_v_P.push_back(__pyx_v_newpool);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 643, __pyx_L1_error)
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":644
 *         newpool.w, newpool.t, newpool.l = 1, t, 1
 *         P.push_back(newpool)
 *         t += 1             # <<<<<<<<<<<<<<
 *         i += 1
 *         while (i > 0 and  # backtrack until violations fixed
 */
    __pyx_v_t = (__pyx_v_t + 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":645
 *         P.push_back(newpool)
 *         t += 1
 *         i += 1             # <<<<<<<<<<<<<<
 *         while (i > 0 and  # backtrack until violations fixed
 *                (P[i - 1].v / P[i - 1].w * g**P[i - 1].l + s_min > P[i].v / P[i].w)):
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":646
 *         t += 1
 *         i += 1
 *         while (i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                (P[i - 1].v / P[i - 1].w * g**P[i - 1].l + s_min > P[i].v / P[i].w)):
 *             i -= 1
 */
    while (1) {
      __pyx_t_8 = (__pyx_v_i > 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_7 = __pyx_t_8;
        goto __pyx_L7_bool_binop_done;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":647
 *         i += 1
 *         while (i > 0 and  # backtrack until violations fixed
 *                (P[i - 1].v / P[i - 1].w * g**P[i - 1].l + s_min > P[i].v / P[i].w)):             # <<<<<<<<<<<<<<
 *             i -= 1
 *             # merge two pools
 */
      __pyx_t_8 = (((((__pyx_v_P[(__pyx_v_i - 1)]).v / (__pyx_v_P[(__pyx_v_i - 1)]).w) * pow(((double)__pyx_v_g), ((double)(__pyx_v_P[(__pyx_v_i - 1)]).l))) + __pyx_v_s_min) > ((__pyx_v_P[__pyx_v_i]).v / (__pyx_v_P[__pyx_v_i]).w));
      __pyx_t_7 = __pyx_t_8;
      __pyx_L7_bool_binop_done:;
      if (!__pyx_t_7) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":648
 *         while (i > 0 and  # backtrack until violations fixed
 *                (P[i - 1].v / P[i - 1].w * g**P[i - 1].l + s_min > P[i].v / P[i].w)):
 *             i -= 1             # <<<<<<<<<<<<<<
 *             # merge two pools
 *             P[i].v += P[i + 1].v * g**P[i].l
 */
      __pyx_v_i = (__pyx_v_i - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":650
 *             i -= 1
 *             # merge two pools
 *             P[i].v += P[i + 1].v * g**P[i].l             # <<<<<<<<<<<<<<
 *             P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *             P[i].l += P[i + 1].l
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).v = ((__pyx_v_P[__pyx_t_1]).v + ((__pyx_v_P[(__pyx_v_i + 1)]).v * pow(((double)__pyx_v_g), ((double)(__pyx_v_P[__pyx_v_i]).l))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":651
 *             # merge two pools
 *             P[i].v += P[i + 1].v * g**P[i].l
 *             P[i].w += P[i + 1].w * g**(2 * P[i].l)             # <<<<<<<<<<<<<<
 *             P[i].l += P[i + 1].l
 *             P.pop_back()
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).w = ((__pyx_v_P[__pyx_t_1]).w + ((__pyx_v_P[(__pyx_v_i + 1)]).w * pow(((double)__pyx_v_g), ((double)(2 * (__pyx_v_P[__pyx_v_i]).l)))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":652
 *             P[i].v += P[i + 1].v * g**P[i].l
 *             P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *             P[i].l += P[i + 1].l             # <<<<<<<<<<<<<<
 *             P.pop_back()
 *     # construct c
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).l = ((__pyx_v_P[__pyx_t_1]).l + (__pyx_v_P[(__pyx_v_i + 1)]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":653
 *             P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *             P[i].l += P[i + 1].l
 *             P.pop_back()             # <<<<<<<<<<<<<<
 *     # construct c
 *     c = np.empty(T, dtype=np.float32)
 */
      __pyx_v_P.pop_back();
    }
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":655
 *             P.pop_back()
 *     # construct c
 *     c = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *     for j in range(i + 1):
 *         tmp = P[j].v / P[j].w
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_empty); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_T); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9)) __PYX_ERR(0, 655, __pyx_L1_error);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_float32); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_13) < 0) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, __pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 655, __pyx_L1_error)
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_13);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      }
      __pyx_t_15 = __pyx_t_16 = __pyx_t_17 = 0;
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 655, __pyx_L1_error)
  }
  __pyx_t_14 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":656
 *     # construct c
 *     c = np.empty(T, dtype=np.float32)
 *     for j in range(i + 1):             # <<<<<<<<<<<<<<
 *         tmp = P[j].v / P[j].w
 *         if (j == 0 and tmp < 0) or (j > 0 and tmp < s_min):
 */
  __pyx_t_1 = (__pyx_v_i + 1);
  __pyx_t_6 = __pyx_t_1;
  for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_6; __pyx_t_18+=1) {
    __pyx_v_j = __pyx_t_18;

    /* "caiman/source_extraction/cnmf/oasis.pyx":657
 *     c = np.empty(T, dtype=np.float32)
 *     for j in range(i + 1):
 *         tmp = P[j].v / P[j].w             # <<<<<<<<<<<<<<
 *         if (j == 0 and tmp < 0) or (j > 0 and tmp < s_min):
 *             tmp = 0
 */
    __pyx_v_tmp = ((__pyx_v_P[__pyx_v_j]).v / (__pyx_v_P[__pyx_v_j]).w);

    /* "caiman/source_extraction/cnmf/oasis.pyx":658
 *     for j in range(i + 1):
 *         tmp = P[j].v / P[j].w
 *         if (j == 0 and tmp < 0) or (j > 0 and tmp < s_min):             # <<<<<<<<<<<<<<
 *             tmp = 0
 *         for k in range(P[j].l):
 */
    __pyx_t_8 = (__pyx_v_j == 0);
    if (!__pyx_t_8) {
      goto __pyx_L13_next_or;
    } else {
    }
    __pyx_t_8 = (__pyx_v_tmp < 0.0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_L13_next_or:;
    __pyx_t_8 = (__pyx_v_j > 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_tmp < __pyx_v_s_min);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_7) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":659
 *         tmp = P[j].v / P[j].w
 *         if (j == 0 and tmp < 0) or (j > 0 and tmp < s_min):
 *             tmp = 0             # <<<<<<<<<<<<<<
 *         for k in range(P[j].l):
 *             c[k + P[j].t] = tmp
 */
      __pyx_v_tmp = 0.0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":658
 *     for j in range(i + 1):
 *         tmp = P[j].v / P[j].w
 *         if (j == 0 and tmp < 0) or (j > 0 and tmp < s_min):             # <<<<<<<<<<<<<<
 *             tmp = 0
 *         for k in range(P[j].l):
 */
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":660
 *         if (j == 0 and tmp < 0) or (j > 0 and tmp < s_min):
 *             tmp = 0
 *         for k in range(P[j].l):             # <<<<<<<<<<<<<<
 *             c[k + P[j].t] = tmp
 *             tmp *= g
 */
    __pyx_t_19 = (__pyx_v_P[__pyx_v_j]).l;
    __pyx_t_20 = __pyx_t_19;
    for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
      __pyx_v_k = __pyx_t_21;

      /* "caiman/source_extraction/cnmf/oasis.pyx":661
 *             tmp = 0
 *         for k in range(P[j].l):
 *             c[k + P[j].t] = tmp             # <<<<<<<<<<<<<<
 *             tmp *= g
 *     # construct s
 */
      __pyx_t_2 = (__pyx_v_k + (__pyx_v_P[__pyx_v_j]).t);
      __pyx_t_3 = -1;
      if (__pyx_t_2 < 0) {
        __pyx_t_2 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
      } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_3 = 0;
      if (unlikely(__pyx_t_3 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_3);
        __PYX_ERR(0, 661, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_v_tmp;

      /* "caiman/source_extraction/cnmf/oasis.pyx":662
 *         for k in range(P[j].l):
 *             c[k + P[j].t] = tmp
 *             tmp *= g             # <<<<<<<<<<<<<<
 *     # construct s
 *     s = c.copy()
 */
      __pyx_v_tmp = (__pyx_v_tmp * __pyx_v_g);
    }
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":664
 *             tmp *= g
 *     # construct s
 *     s = c.copy()             # <<<<<<<<<<<<<<
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_copy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = NULL;
  __pyx_t_3 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_3 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
    __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 664, __pyx_L1_error)
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_13);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_v_s, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_15);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_17, __pyx_t_16, __pyx_t_15);
      }
      __pyx_t_17 = __pyx_t_16 = __pyx_t_15 = 0;
    }
    __pyx_pybuffernd_s.diminfo[0].strides = __pyx_pybuffernd_s.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_s.diminfo[0].shape = __pyx_pybuffernd_s.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 664, __pyx_L1_error)
  }
  __pyx_t_14 = 0;
  __pyx_v_s = ((PyArrayObject *)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":665
 *     # construct s
 *     s = c.copy()
 *     s[0] = 0             # <<<<<<<<<<<<<<
 *     s[1:] -= g * c[:-1]
 *     return c, s
 */
  __pyx_t_2 = 0;
  __pyx_t_3 = -1;
  if (__pyx_t_2 < 0) {
    __pyx_t_2 += __pyx_pybuffernd_s.diminfo[0].shape;
    if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
  } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_3 = 0;
  if (unlikely(__pyx_t_3 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_3);
    __PYX_ERR(0, 665, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_s.diminfo[0].strides) = 0.0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":666
 *     s = c.copy()
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]             # <<<<<<<<<<<<<<
 *     return c, s
 * 
 */
  __Pyx_INCREF(__pyx_slice__7);
  __pyx_t_22 = __pyx_slice__7;
  __pyx_t_13 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_s), __pyx_t_22); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_g); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_c), __pyx_slice__8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = PyNumber_Multiply(__pyx_t_9, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyNumber_InPlaceSubtract(__pyx_t_13, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely((PyObject_SetItem(((PyObject *)__pyx_v_s), __pyx_t_22, __pyx_t_11) < 0))) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":667
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]
 *     return c, s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __Pyx_GIVEREF((PyObject *)__pyx_v_c);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_v_c))) __PYX_ERR(0, 667, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_s);
  __Pyx_GIVEREF((PyObject *)__pyx_v_s);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, ((PyObject *)__pyx_v_s))) __PYX_ERR(0, 667, __pyx_L1_error);
  __pyx_r = __pyx_t_11;
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":594
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE lam=0, SINGLE s_min=0):
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_22);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.oasisAR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":670
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_3constrained_oasisAR1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_2constrained_oasisAR1, " Infer the most likely discretized spike train underlying an AR(1) fluorescence trace\n\n    Solves the noise constrained sparse non-negative deconvolution problem\n    min |s|_1 subject to |c-y|^2 = sn^2 T and s_t = c_t-g c_{t-1} >= 0\n\n    Parameters\n    ----------\n    y : array of float\n        One dimensional array containing the fluorescence intensities (with baseline\n        already subtracted, if known, see optimize_b) with one entry per time-bin.\n    g : float\n        Parameter of the AR(1) process that models the fluorescence impulse response.\n    sn : float\n        Standard deviation of the noise distribution.\n    optimize_b : bool, optional, default False\n        Optimize baseline if True else it is set to 0, see y.\n    b_nonneg: bool, optional, default True\n        Enforce strictly non-negative baseline if True.\n    optimize_g : int, optional, default 0\n        Number of large, isolated events to consider for optimizing g.\n        No optimization if optimize_g=0.\n    decimate : int, optional, default 1\n        Decimation factor for estimating hyper-parameters faster on decimated data.\n    max_iter : int, optional, default 5\n        Maximal number of iterations.\n    penalty : int, optional, default 1\n        Sparsity penalty. 1: min |s|_1  0: min |s|_0\n    s_min : float, optional, default -3\n        Minimal non-zero activity within each bin (minimal 'spike size').\n        For negative values the threshold is |s_min| * sn * sqrt(1-g)\n        If 0 the threshold is determined automatically such that RSS <= sn^2 T\n\n    Returns\n    -------\n    c : array of float\n        The inferred denoised fluorescence signal at each time-bin.\n    s : array of float\n        Discretized deconvolved neural activity (spikes).\n    b : float\n        Fluorescence baseline value.\n    g : float\n        Parameter of the AR(1) process that models the fluorescence impulse response.\n    lam : float\n        Sparsity penalty parameter lambda of dual ""problem.\n\n    References\n    ----------\n    * Friedrich J and Paninski L, NIPS 2016\n    * Friedrich J, Zhou P, and Paninski L, PLOS Computational Biology 2017\n    ");
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_3constrained_oasisAR1 = {"constrained_oasisAR1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_3constrained_oasisAR1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_2constrained_oasisAR1};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_3constrained_oasisAR1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_y = 0;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_sn;
  PyBoolObject *__pyx_v_optimize_b = 0;
  PyBoolObject *__pyx_v_b_nonneg = 0;
  int __pyx_v_optimize_g;
  int __pyx_v_decimate;
  int __pyx_v_max_iter;
  int __pyx_v_penalty;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_s_min;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("constrained_oasisAR1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_g,&__pyx_n_s_sn,&__pyx_n_s_optimize_b,&__pyx_n_s_b_nonneg,&__pyx_n_s_optimize_g,&__pyx_n_s_decimate,&__pyx_n_s_max_iter,&__pyx_n_s_penalty,&__pyx_n_s_s_min,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)__pyx_k__9);
    values[4] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)__pyx_k__10);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_g)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("constrained_oasisAR1", 0, 3, 10, 1); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sn)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("constrained_oasisAR1", 0, 3, 10, 2); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_optimize_b);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b_nonneg);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_optimize_g);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_decimate);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_iter);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_penalty);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s_min);
          if (value) { values[9] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "constrained_oasisAR1") < 0)) __PYX_ERR(0, 670, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_y = ((PyArrayObject *)values[0]);
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    __pyx_v_sn = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_sn == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    __pyx_v_optimize_b = ((PyBoolObject *)values[3]);
    __pyx_v_b_nonneg = ((PyBoolObject *)values[4]);
    if (values[5]) {
      __pyx_v_optimize_g = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_optimize_g == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
    } else {
      __pyx_v_optimize_g = ((int)((int)0));
    }
    if (values[6]) {
      __pyx_v_decimate = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_decimate == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
    } else {
      __pyx_v_decimate = ((int)((int)1));
    }
    if (values[7]) {
      __pyx_v_max_iter = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_max_iter == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
    } else {
      __pyx_v_max_iter = ((int)((int)5));
    }
    if (values[8]) {
      __pyx_v_penalty = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_penalty == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
    } else {
      __pyx_v_penalty = ((int)((int)1));
    }
    if (values[9]) {
      __pyx_v_s_min = __pyx_PyFloat_AsFloat(values[9]); if (unlikely((__pyx_v_s_min == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
    } else {
      __pyx_v_s_min = ((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)-3.0));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("constrained_oasisAR1", 0, 3, 10, __pyx_nargs); __PYX_ERR(0, 670, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 671, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_optimize_b), __pyx_ptype_7cpython_4bool_bool, 1, "optimize_b", 0))) __PYX_ERR(0, 672, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b_nonneg), __pyx_ptype_7cpython_4bool_bool, 1, "b_nonneg", 0))) __PYX_ERR(0, 672, __pyx_L1_error)
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_2constrained_oasisAR1(__pyx_self, __pyx_v_y, __pyx_v_g, __pyx_v_sn, __pyx_v_optimize_b, __pyx_v_b_nonneg, __pyx_v_optimize_g, __pyx_v_decimate, __pyx_v_max_iter, __pyx_v_penalty, __pyx_v_s_min);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":748
 *     lam = 0  # sn/sqrt(1-g*g)
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_1oasis1strun(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_1oasis1strun = {"oasis1strun", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_1oasis1strun, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_1oasis1strun(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_y = 0;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g;
  PyArrayObject *__pyx_v_c = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("oasis1strun (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_g,&__pyx_n_s_c,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_g)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("oasis1strun", 1, 3, 3, 1); __PYX_ERR(0, 748, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_c)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("oasis1strun", 1, 3, 3, 2); __PYX_ERR(0, 748, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "oasis1strun") < 0)) __PYX_ERR(0, 748, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_y = ((PyArrayObject *)values[0]);
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
    __pyx_v_c = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("oasis1strun", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 748, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.oasis1strun", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 748, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_5numpy_ndarray, 1, "c", 0))) __PYX_ERR(0, 748, __pyx_L1_error)
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_oasis1strun(__pyx_self, __pyx_v_y, __pyx_v_g, __pyx_v_c);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_oasis1strun(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g, PyArrayObject *__pyx_v_c) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_T;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_tmp;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_v_P;
  struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_v_newpool;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_4;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("oasis1strun", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 748, __pyx_L1_error)
  }
  __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 748, __pyx_L1_error)
  }
  __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];

  /* "caiman/source_extraction/cnmf/oasis.pyx":756
 *             Pool newpool
 * 
 *         T = len(y)             # <<<<<<<<<<<<<<
 *         # [value, weight, start time, length] of pool
 *         # newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 756, __pyx_L1_error)
  __pyx_v_T = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":759
 *         # [value, weight, start time, length] of pool
 *         # newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 *         newpool.v, newpool.w, newpool.t, newpool.l = y[0], 1, 0, 1             # <<<<<<<<<<<<<<
 *         P.push_back(newpool)
 *         i = 0  # index of last pool
 */
  __pyx_t_2 = 0;
  __pyx_t_3 = -1;
  if (__pyx_t_2 < 0) {
    __pyx_t_2 += __pyx_pybuffernd_y.diminfo[0].shape;
    if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
  } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_3 = 0;
  if (unlikely(__pyx_t_3 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_3);
    __PYX_ERR(0, 759, __pyx_L1_error)
  }
  __pyx_t_4 = (*__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_y.diminfo[0].strides));
  __pyx_t_5 = 1.0;
  __pyx_t_1 = 0;
  __pyx_t_6 = 1;
  __pyx_v_newpool.v = __pyx_t_4;
  __pyx_v_newpool.w = __pyx_t_5;
  __pyx_v_newpool.t = __pyx_t_1;
  __pyx_v_newpool.l = __pyx_t_6;

  /* "caiman/source_extraction/cnmf/oasis.pyx":760
 *         # newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 *         newpool.v, newpool.w, newpool.t, newpool.l = y[0], 1, 0, 1
 *         P.push_back(newpool)             # <<<<<<<<<<<<<<
 *         i = 0  # index of last pool
 *         t = 1  # number of time points added = index of next data point
 */
  try {
    __pyx_v_P.push_back(__pyx_v_newpool);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 760, __pyx_L1_error)
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":761
 *         newpool.v, newpool.w, newpool.t, newpool.l = y[0], 1, 0, 1
 *         P.push_back(newpool)
 *         i = 0  # index of last pool             # <<<<<<<<<<<<<<
 *         t = 1  # number of time points added = index of next data point
 *         while t < T:
 */
  __pyx_v_i = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":762
 *         P.push_back(newpool)
 *         i = 0  # index of last pool
 *         t = 1  # number of time points added = index of next data point             # <<<<<<<<<<<<<<
 *         while t < T:
 *             # add next data point as pool
 */
  __pyx_v_t = 1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":763
 *         i = 0  # index of last pool
 *         t = 1  # number of time points added = index of next data point
 *         while t < T:             # <<<<<<<<<<<<<<
 *             # add next data point as pool
 *             newpool.v = y[t]  # - lam * (1 if t == T - 1 else (1 - g))
 */
  while (1) {
    __pyx_t_7 = (__pyx_v_t < __pyx_v_T);
    if (!__pyx_t_7) break;

    /* "caiman/source_extraction/cnmf/oasis.pyx":765
 *         while t < T:
 *             # add next data point as pool
 *             newpool.v = y[t]  # - lam * (1 if t == T - 1 else (1 - g))             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = 1, t, 1
 *             P.push_back(newpool)
 */
    __pyx_t_2 = __pyx_v_t;
    __pyx_t_3 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_pybuffernd_y.diminfo[0].shape;
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(0, 765, __pyx_L1_error)
    }
    __pyx_v_newpool.v = (*__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_y.diminfo[0].strides));

    /* "caiman/source_extraction/cnmf/oasis.pyx":766
 *             # add next data point as pool
 *             newpool.v = y[t]  # - lam * (1 if t == T - 1 else (1 - g))
 *             newpool.w, newpool.t, newpool.l = 1, t, 1             # <<<<<<<<<<<<<<
 *             P.push_back(newpool)
 *             t += 1
 */
    __pyx_t_5 = 1.0;
    __pyx_t_6 = __pyx_v_t;
    __pyx_t_1 = 1;
    __pyx_v_newpool.w = __pyx_t_5;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_1;

    /* "caiman/source_extraction/cnmf/oasis.pyx":767
 *             newpool.v = y[t]  # - lam * (1 if t == T - 1 else (1 - g))
 *             newpool.w, newpool.t, newpool.l = 1, t, 1
 *             P.push_back(newpool)             # <<<<<<<<<<<<<<
 *             t += 1
 *             i += 1
 */
    try {
      __pyx_v_P.push_back(__pyx_v_newpool);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 767, __pyx_L1_error)
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":768
 *             newpool.w, newpool.t, newpool.l = 1, t, 1
 *             P.push_back(newpool)
 *             t += 1             # <<<<<<<<<<<<<<
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed
 */
    __pyx_v_t = (__pyx_v_t + 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":769
 *             P.push_back(newpool)
 *             t += 1
 *             i += 1             # <<<<<<<<<<<<<<
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":770
 *             t += 1
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 *                 i -= 1
 */
    while (1) {
      __pyx_t_8 = (__pyx_v_i > 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_7 = __pyx_t_8;
        goto __pyx_L7_bool_binop_done;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":771
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):             # <<<<<<<<<<<<<<
 *                 i -= 1
 *                 # merge two pools
 */
      __pyx_t_8 = ((((__pyx_v_P[(__pyx_v_i - 1)]).v / (__pyx_v_P[(__pyx_v_i - 1)]).w) * pow(((double)__pyx_v_g), ((double)(__pyx_v_P[(__pyx_v_i - 1)]).l))) > ((__pyx_v_P[__pyx_v_i]).v / (__pyx_v_P[__pyx_v_i]).w));
      __pyx_t_7 = __pyx_t_8;
      __pyx_L7_bool_binop_done:;
      if (!__pyx_t_7) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":772
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 *                 i -= 1             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l
 */
      __pyx_v_i = (__pyx_v_i - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":774
 *                 i -= 1
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l             # <<<<<<<<<<<<<<
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).v = ((__pyx_v_P[__pyx_t_1]).v + ((__pyx_v_P[(__pyx_v_i + 1)]).v * pow(((double)__pyx_v_g), ((double)(__pyx_v_P[__pyx_v_i]).l))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":775
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)             # <<<<<<<<<<<<<<
 *                 P[i].l += P[i + 1].l
 *                 P.pop_back()
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).w = ((__pyx_v_P[__pyx_t_1]).w + ((__pyx_v_P[(__pyx_v_i + 1)]).w * pow(((double)__pyx_v_g), ((double)(2 * (__pyx_v_P[__pyx_v_i]).l)))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":776
 *                 P[i].v += P[i + 1].v * g**P[i].l
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l             # <<<<<<<<<<<<<<
 *                 P.pop_back()
 *         # construct c
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).l = ((__pyx_v_P[__pyx_t_1]).l + (__pyx_v_P[(__pyx_v_i + 1)]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":777
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l
 *                 P.pop_back()             # <<<<<<<<<<<<<<
 *         # construct c
 *         c = np.empty(T, dtype=np.float32)
 */
      __pyx_v_P.pop_back();
    }
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":779
 *                 P.pop_back()
 *         # construct c
 *         c = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_empty); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_T); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9)) __PYX_ERR(0, 779, __pyx_L1_error);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_float32); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_13) < 0) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, __pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 779, __pyx_L1_error)
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_13);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      }
      __pyx_t_15 = __pyx_t_16 = __pyx_t_17 = 0;
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 779, __pyx_L1_error)
  }
  __pyx_t_14 = 0;
  __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_13));
  __pyx_t_13 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":780
 *         # construct c
 *         c = np.empty(T, dtype=np.float32)
 *         for j in range(i + 1):             # <<<<<<<<<<<<<<
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):
 */
  __pyx_t_1 = (__pyx_v_i + 1);
  __pyx_t_6 = __pyx_t_1;
  for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_6; __pyx_t_18+=1) {
    __pyx_v_j = __pyx_t_18;

    /* "caiman/source_extraction/cnmf/oasis.pyx":781
 *         c = np.empty(T, dtype=np.float32)
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w             # <<<<<<<<<<<<<<
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp
 */
    __pyx_v_tmp = (fmax((__pyx_v_P[__pyx_v_j]).v, 0.0) / ((double)(__pyx_v_P[__pyx_v_j]).w));

    /* "caiman/source_extraction/cnmf/oasis.pyx":782
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):             # <<<<<<<<<<<<<<
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g
 */
    __pyx_t_19 = (__pyx_v_P[__pyx_v_j]).l;
    __pyx_t_20 = __pyx_t_19;
    for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
      __pyx_v_k = __pyx_t_21;

      /* "caiman/source_extraction/cnmf/oasis.pyx":783
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp             # <<<<<<<<<<<<<<
 *                 tmp *= g
 *         return c, P
 */
      __pyx_t_2 = (__pyx_v_k + (__pyx_v_P[__pyx_v_j]).t);
      __pyx_t_3 = -1;
      if (__pyx_t_2 < 0) {
        __pyx_t_2 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
      } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_3 = 0;
      if (unlikely(__pyx_t_3 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_3);
        __PYX_ERR(0, 783, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_v_tmp;

      /* "caiman/source_extraction/cnmf/oasis.pyx":784
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g             # <<<<<<<<<<<<<<
 *         return c, P
 * 
 */
      __pyx_v_tmp = (__pyx_v_tmp * __pyx_v_g);
    }
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":785
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g
 *         return c, P             # <<<<<<<<<<<<<<
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_13 = __pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_v_P); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __Pyx_GIVEREF((PyObject *)__pyx_v_c);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_v_c))) __PYX_ERR(0, 785, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_13)) __PYX_ERR(0, 785, __pyx_L1_error);
  __pyx_t_13 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":748
 *     lam = 0  # sn/sqrt(1-g*g)
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.oasis1strun", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":787
 *         return c, P
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3oasis(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3oasis = {"oasis", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3oasis, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3oasis(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_v_P;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g;
  PyArrayObject *__pyx_v_c = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("oasis (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_P,&__pyx_n_s_g,&__pyx_n_s_c,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_P)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_g)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("oasis", 1, 3, 3, 1); __PYX_ERR(0, 787, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_c)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("oasis", 1, 3, 3, 2); __PYX_ERR(0, 787, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "oasis") < 0)) __PYX_ERR(0, 787, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_P = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_c = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("oasis", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 787, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.oasis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_5numpy_ndarray, 1, "c", 0))) __PYX_ERR(0, 787, __pyx_L1_error)
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_2oasis(__pyx_self, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_P), __pyx_v_g, __pyx_v_c);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_2oasis(CYTHON_UNUSED PyObject *__pyx_self, std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_v_P, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g, PyArrayObject *__pyx_v_c) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("oasis", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 787, __pyx_L1_error)
  }
  __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];

  /* "caiman/source_extraction/cnmf/oasis.pyx":793
 *             SINGLE tmp
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         while i < P.size() - 1:
 *             i += 1
 */
  __pyx_v_i = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":794
 * 
 *         i = 0
 *         while i < P.size() - 1:             # <<<<<<<<<<<<<<
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed
 */
  while (1) {
    __pyx_t_1 = (__pyx_v_i < (__pyx_v_P.size() - 1));
    if (!__pyx_t_1) break;

    /* "caiman/source_extraction/cnmf/oasis.pyx":795
 *         i = 0
 *         while i < P.size() - 1:
 *             i += 1             # <<<<<<<<<<<<<<
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":796
 *         while i < P.size() - 1:
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 *                 i -= 1
 */
    while (1) {
      __pyx_t_2 = (__pyx_v_i > 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L7_bool_binop_done;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":797
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):             # <<<<<<<<<<<<<<
 *                 i -= 1
 *                 # merge two pools
 */
      __pyx_t_2 = ((((__pyx_v_P[(__pyx_v_i - 1)]).v / (__pyx_v_P[(__pyx_v_i - 1)]).w) * pow(((double)__pyx_v_g), ((double)(__pyx_v_P[(__pyx_v_i - 1)]).l))) > ((__pyx_v_P[__pyx_v_i]).v / (__pyx_v_P[__pyx_v_i]).w));
      __pyx_t_1 = __pyx_t_2;
      __pyx_L7_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":798
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 *                 i -= 1             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l
 */
      __pyx_v_i = (__pyx_v_i - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":800
 *                 i -= 1
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l             # <<<<<<<<<<<<<<
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l
 */
      __pyx_t_3 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_3]).v = ((__pyx_v_P[__pyx_t_3]).v + ((__pyx_v_P[(__pyx_v_i + 1)]).v * pow(((double)__pyx_v_g), ((double)(__pyx_v_P[__pyx_v_i]).l))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":801
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)             # <<<<<<<<<<<<<<
 *                 P[i].l += P[i + 1].l
 *                 P.erase(P.begin() + i + 1)
 */
      __pyx_t_3 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_3]).w = ((__pyx_v_P[__pyx_t_3]).w + ((__pyx_v_P[(__pyx_v_i + 1)]).w * pow(((double)__pyx_v_g), ((double)(2 * (__pyx_v_P[__pyx_v_i]).l)))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":802
 *                 P[i].v += P[i + 1].v * g**P[i].l
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l             # <<<<<<<<<<<<<<
 *                 P.erase(P.begin() + i + 1)
 *         # construct c
 */
      __pyx_t_3 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_3]).l = ((__pyx_v_P[__pyx_t_3]).l + (__pyx_v_P[(__pyx_v_i + 1)]).l);

      /* "caiman/source_extraction/cnmf/oasis.pyx":803
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l
 *                 P.erase(P.begin() + i + 1)             # <<<<<<<<<<<<<<
 *         # construct c
 *         c = np.empty(P[P.size() - 1].t + P[P.size() - 1].l, dtype=np.float32)
 */
      (void)(__pyx_v_P.erase(((__pyx_v_P.begin() + __pyx_v_i) + 1)));
    }
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":805
 *                 P.erase(P.begin() + i + 1)
 *         # construct c
 *         c = np.empty(P[P.size() - 1].t + P[P.size() - 1].l, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(((__pyx_v_P[(__pyx_v_P.size() - 1)]).t + (__pyx_v_P[(__pyx_v_P.size() - 1)]).l)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4)) __PYX_ERR(0, 805, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 805, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_10 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_10 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __pyx_t_11 = __pyx_t_12 = __pyx_t_13 = 0;
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 805, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_8));
  __pyx_t_8 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":806
 *         # construct c
 *         c = np.empty(P[P.size() - 1].t + P[P.size() - 1].l, dtype=np.float32)
 *         for j in range(i + 1):             # <<<<<<<<<<<<<<
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):
 */
  __pyx_t_3 = (__pyx_v_i + 1);
  __pyx_t_14 = __pyx_t_3;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_j = __pyx_t_15;

    /* "caiman/source_extraction/cnmf/oasis.pyx":807
 *         c = np.empty(P[P.size() - 1].t + P[P.size() - 1].l, dtype=np.float32)
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w             # <<<<<<<<<<<<<<
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp
 */
    __pyx_v_tmp = (fmax((__pyx_v_P[__pyx_v_j]).v, 0.0) / ((double)(__pyx_v_P[__pyx_v_j]).w));

    /* "caiman/source_extraction/cnmf/oasis.pyx":808
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):             # <<<<<<<<<<<<<<
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g
 */
    __pyx_t_16 = (__pyx_v_P[__pyx_v_j]).l;
    __pyx_t_17 = __pyx_t_16;
    for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_k = __pyx_t_18;

      /* "caiman/source_extraction/cnmf/oasis.pyx":809
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp             # <<<<<<<<<<<<<<
 *                 tmp *= g
 *         return c, P
 */
      __pyx_t_19 = (__pyx_v_k + (__pyx_v_P[__pyx_v_j]).t);
      __pyx_t_10 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 809, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_v_tmp;

      /* "caiman/source_extraction/cnmf/oasis.pyx":810
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g             # <<<<<<<<<<<<<<
 *         return c, P
 * 
 */
      __pyx_v_tmp = (__pyx_v_tmp * __pyx_v_g);
    }
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":811
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g
 *         return c, P             # <<<<<<<<<<<<<<
 * 
 *     g_converged = False
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = __pyx_convert_vector_to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_v_P); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __Pyx_GIVEREF((PyObject *)__pyx_v_c);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_c))) __PYX_ERR(0, 811, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8)) __PYX_ERR(0, 811, __pyx_L1_error);
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":787
 *         return c, P
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.oasis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":853
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_5bar(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_5bar = {"bar", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_5bar, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_5bar(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_Pt = 0;
  PyObject *__pyx_v_Pl = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bar (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_g,&__pyx_n_s_Pt,&__pyx_n_s_Pl,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_g)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 1); __PYX_ERR(0, 853, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Pt)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 2); __PYX_ERR(0, 853, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Pl)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 3); __PYX_ERR(0, 853, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "bar") < 0)) __PYX_ERR(0, 853, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_y = values[0];
    __pyx_v_g = values[1];
    __pyx_v_Pt = values[2];
    __pyx_v_Pl = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 853, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_4bar(__pyx_self, __pyx_v_y, __pyx_v_g, __pyx_v_Pt, __pyx_v_Pl);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":856
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_6__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_lam);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_lam);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_lam)) __PYX_ERR(0, 856, __pyx_L1_error);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None)) __PYX_ERR(0, 856, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_1foo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_1foo = {"foo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_1foo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_1foo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_q = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_lam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("foo (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_t,&__pyx_n_s_l,&__pyx_n_s_q,&__pyx_n_s_g,&__pyx_n_s_lam,0};
    __pyx_defaults *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self);
    values[5] = __Pyx_Arg_NewRef_FASTCALL(__pyx_dynamic_args->__pyx_arg_lam);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, 1); __PYX_ERR(0, 856, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_l)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, 2); __PYX_ERR(0, 856, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, 3); __PYX_ERR(0, 856, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_g)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, 4); __PYX_ERR(0, 856, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lam);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "foo") < 0)) __PYX_ERR(0, 856, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_y = values[0];
    __pyx_v_t = values[1];
    __pyx_v_l = values[2];
    __pyx_v_q = values[3];
    __pyx_v_g = values[4];
    __pyx_v_lam = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, __pyx_nargs); __PYX_ERR(0, 856, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.bar.foo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_foo(__pyx_self, __pyx_v_y, __pyx_v_t, __pyx_v_l, __pyx_v_q, __pyx_v_g, __pyx_v_lam);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_foo(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_t, PyObject *__pyx_v_l, PyObject *__pyx_v_q, PyObject *__pyx_v_g, PyObject *__pyx_v_lam) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_yy = NULL;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("foo", 1);
  __pyx_outer_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "caiman/source_extraction/cnmf/oasis.pyx":857
 * 
 *                     def foo(y, t, l, q, g, lam=lam):
 *                         yy = y[t:t + l]             # <<<<<<<<<<<<<<
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_t, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_y, 0, 0, &__pyx_v_t, &__pyx_t_1, NULL, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_yy = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":858
 *                     def foo(y, t, l, q, g, lam=lam):
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 */
  __pyx_t_2 = PyNumber_Add(__pyx_v_t, __pyx_v_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":859
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_yy};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 859, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_v_lam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_3, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":860
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 */
    __pyx_t_2 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_v_l, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Power(__pyx_v_g, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":859
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 */
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":860
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_v_yy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_tmp = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":858
 *                     def foo(y, t, l, q, g, lam=lam):
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 */
    goto __pyx_L3;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":863
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 */
  /*else*/ {

    /* "caiman/source_extraction/cnmf/oasis.pyx":862
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_yy};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = PyNumber_Power(__pyx_v_g, __pyx_v_l, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_2, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_lam, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_2, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":863
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 */
    __pyx_t_1 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_v_l, 2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Power(__pyx_v_g, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_3, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":862
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 */
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":863
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 */
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_v_q); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_v_yy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_tmp = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "caiman/source_extraction/cnmf/oasis.pyx":864
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)             # <<<<<<<<<<<<<<
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 *                                 for i in range(optimize_g)])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_dot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_tmp};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":856
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.bar.foo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_yy);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":853
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_4bar(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_g, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_foo = 0;
  Py_ssize_t __pyx_8genexpr4__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bar", 1);
  __pyx_outer_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "caiman/source_extraction/cnmf/oasis.pyx":854
 * 
 *                 def bar(y, g, Pt, Pl):
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))             # <<<<<<<<<<<<<<
 * 
 *                     def foo(y, t, l, q, g, lam=lam):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_g); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 854, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(log(__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_arange); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_ma); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5)) __PYX_ERR(0, 854, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_h = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":856
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_1foo, 0, __pyx_n_s_constrained_oasisAR1_locals_bar, ((PyObject*)__pyx_cur_scope), __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_1, sizeof(__pyx_defaults), 1)) __PYX_ERR(0, 856, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_lam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_t_1)->__pyx_arg_lam = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_1, __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_6__defaults__);
  __pyx_v_foo = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":865
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)             # <<<<<<<<<<<<<<
 *                                 for i in range(optimize_g)])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":866
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 *                                 for i in range(optimize_g)])             # <<<<<<<<<<<<<<
 * 
 *                 def baz(y, Pt, Pl):
 */
    __pyx_t_10 = __pyx_cur_scope->__pyx_v_optimize_g;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_8genexpr4__pyx_v_i = __pyx_t_12;

      /* "caiman/source_extraction/cnmf/oasis.pyx":865
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)             # <<<<<<<<<<<<<<
 *                                 for i in range(optimize_g)])
 * 
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_Pt, __pyx_8genexpr4__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_Pl, __pyx_8genexpr4__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_Pl, __pyx_8genexpr4__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_h, 0, 0, NULL, &__pyx_t_9, NULL, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_y);
      __Pyx_GIVEREF(__pyx_v_y);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_y)) __PYX_ERR(0, 865, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3)) __PYX_ERR(0, 865, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_5);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_5)) __PYX_ERR(0, 865, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_2);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_2)) __PYX_ERR(0, 865, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_v_g)) __PYX_ERR(0, 865, __pyx_L1_error);
      __pyx_t_3 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_foo, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":853
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_foo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":868
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_7baz(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_7baz = {"baz", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_7baz, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_7baz(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_Pt = 0;
  PyObject *__pyx_v_Pl = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("baz (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_Pt,&__pyx_n_s_Pl,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 868, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Pt)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 868, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, 1); __PYX_ERR(0, 868, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Pl)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 868, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, 2); __PYX_ERR(0, 868, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "baz") < 0)) __PYX_ERR(0, 868, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_y = values[0];
    __pyx_v_Pt = values[1];
    __pyx_v_Pl = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 868, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.baz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_6baz(__pyx_self, __pyx_v_y, __pyx_v_Pt, __pyx_v_Pl);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":870
 *                 def baz(y, Pt, Pl):
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)             # <<<<<<<<<<<<<<
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_lambda = {"lambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 870, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda") < 0)) __PYX_ERR(0, 870, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_x = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 870, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.baz.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, __pyx_v_x);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *__pyx_cur_scope;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 1);
  __pyx_outer_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bar)) { __Pyx_RaiseClosureNameError("bar"); __PYX_ERR(0, 870, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_y)) { __Pyx_RaiseClosureNameError("y"); __PYX_ERR(0, 870, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_Pt)) { __Pyx_RaiseClosureNameError("Pt"); __PYX_ERR(0, 870, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_Pl)) { __Pyx_RaiseClosureNameError("Pl"); __PYX_ERR(0, 870, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_y);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_y);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_y)) __PYX_ERR(0, 870, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_x)) __PYX_ERR(0, 870, __pyx_L1_error);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pt);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pt);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_cur_scope->__pyx_v_Pt)) __PYX_ERR(0, 870, __pyx_L1_error);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pl);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pl);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_cur_scope->__pyx_v_Pl)) __PYX_ERR(0, 870, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bar, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.baz.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":868
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_6baz(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("baz", 0);
  __pyx_cur_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *)__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 868, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_v_y = __pyx_v_y;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_y);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_y);
  __pyx_cur_scope->__pyx_v_Pt = __pyx_v_Pt;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pt);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pt);
  __pyx_cur_scope->__pyx_v_Pl = __pyx_v_Pl;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pl);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pl);

  /* "caiman/source_extraction/cnmf/oasis.pyx":870
 *                 def baz(y, Pt, Pl):
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)             # <<<<<<<<<<<<<<
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_fminbound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_lambda, 0, __pyx_n_s_constrained_oasisAR1_locals_baz, ((PyObject*)__pyx_cur_scope), __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 870, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0)) __PYX_ERR(0, 870, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1)) __PYX_ERR(0, 870, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_xtol, __pyx_float_1eneg_4) < 0) __PYX_ERR(0, 870, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_maxfun, __pyx_int_50) < 0) __PYX_ERR(0, 870, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":868
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.baz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":952
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_9bar(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_9bar = {"bar", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_9bar, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_9bar(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_opt = 0;
  PyObject *__pyx_v_Pt = 0;
  PyObject *__pyx_v_Pl = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bar (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_opt,&__pyx_n_s_Pt,&__pyx_n_s_Pl,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 952, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_opt)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 952, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 1); __PYX_ERR(0, 952, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Pt)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 952, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 2); __PYX_ERR(0, 952, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Pl)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 952, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 3); __PYX_ERR(0, 952, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "bar") < 0)) __PYX_ERR(0, 952, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_y = values[0];
    __pyx_v_opt = values[1];
    __pyx_v_Pt = values[2];
    __pyx_v_Pl = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 952, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_8bar(__pyx_self, __pyx_v_y, __pyx_v_opt, __pyx_v_Pt, __pyx_v_Pl);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":956
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_8__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_lam);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_lam);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_lam)) __PYX_ERR(0, 956, __pyx_L1_error);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None)) __PYX_ERR(0, 956, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_3foo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_3foo = {"foo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_3foo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_3foo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_q = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_lam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("foo (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_t,&__pyx_n_s_l,&__pyx_n_s_q,&__pyx_n_s_b,&__pyx_n_s_g,&__pyx_n_s_lam,0};
    __pyx_defaults1 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self);
    values[6] = __Pyx_Arg_NewRef_FASTCALL(__pyx_dynamic_args->__pyx_arg_lam);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 1); __PYX_ERR(0, 956, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_l)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 2); __PYX_ERR(0, 956, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 3); __PYX_ERR(0, 956, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 4); __PYX_ERR(0, 956, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_g)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 5); __PYX_ERR(0, 956, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lam);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "foo") < 0)) __PYX_ERR(0, 956, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_y = values[0];
    __pyx_v_t = values[1];
    __pyx_v_l = values[2];
    __pyx_v_q = values[3];
    __pyx_v_b = values[4];
    __pyx_v_g = values[5];
    __pyx_v_lam = values[6];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, __pyx_nargs); __PYX_ERR(0, 956, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.bar.foo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_2foo(__pyx_self, __pyx_v_y, __pyx_v_t, __pyx_v_l, __pyx_v_q, __pyx_v_b, __pyx_v_g, __pyx_v_lam);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_2foo(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_t, PyObject *__pyx_v_l, PyObject *__pyx_v_q, PyObject *__pyx_v_b, PyObject *__pyx_v_g, PyObject *__pyx_v_lam) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_yy = NULL;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("foo", 1);
  __pyx_outer_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "caiman/source_extraction/cnmf/oasis.pyx":957
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):
 *                         yy = y[t:t + l] - b             # <<<<<<<<<<<<<<
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_t, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_y, 0, 0, &__pyx_v_t, &__pyx_t_1, NULL, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_yy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":958
 *                     def foo(y, t, l, q, b, g, lam=lam):
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_t, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":959
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_yy};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_v_lam); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_3, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":960
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 */
    __pyx_t_1 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_v_l, 2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Power(__pyx_v_g, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_2, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":959
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 */
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":960
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 */
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_q); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_yy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_tmp = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":958
 *                     def foo(y, t, l, q, b, g, lam=lam):
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 */
    goto __pyx_L3;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":963
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 */
  /*else*/ {

    /* "caiman/source_extraction/cnmf/oasis.pyx":962
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_yy};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyNumber_Power(__pyx_v_g, __pyx_v_l, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_lam, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":963
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 */
    __pyx_t_2 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_v_l, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Power(__pyx_v_g, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_3, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":962
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 */
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":963
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_v_q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_v_yy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_tmp = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "caiman/source_extraction/cnmf/oasis.pyx":964
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)             # <<<<<<<<<<<<<<
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_dot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_tmp};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":956
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.bar.foo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_yy);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":952
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_8bar(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_opt, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_foo = 0;
  Py_ssize_t __pyx_9genexpr10__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool> ::size_type __pyx_t_12;
  int __pyx_t_13;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool> ::size_type __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bar", 1);
  __pyx_outer_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "caiman/source_extraction/cnmf/oasis.pyx":953
 * 
 *                 def bar(y, opt, Pt, Pl):
 *                     b, g = opt             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_opt))) || (PyList_CheckExact(__pyx_v_opt))) {
    PyObject* sequence = __pyx_v_opt;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 953, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_opt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3);
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(0, 953, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 953, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_b = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_g = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":954
 *                 def bar(y, opt, Pt, Pl):
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))             # <<<<<<<<<<<<<<
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_g); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 954, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(log(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_arange); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_ma); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6)) __PYX_ERR(0, 954, __pyx_L1_error);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  __pyx_t_11 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_11 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_6};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_h = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":956
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3bar_3foo, 0, __pyx_n_s_constrained_oasisAR1_locals_bar, ((PyObject*)__pyx_cur_scope), __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_2, sizeof(__pyx_defaults1), 1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_lam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_t_2)->__pyx_arg_lam = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_2, __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_8__defaults__);
  __pyx_v_foo = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":965
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)             # <<<<<<<<<<<<<<
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "caiman/source_extraction/cnmf/oasis.pyx":966
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])             # <<<<<<<<<<<<<<
 * 
 *                 def baz(y, Pt, Pl):
 */
    __pyx_t_13 = (__pyx_cur_scope->__pyx_v_P.size() < __pyx_cur_scope->__pyx_v_optimize_g);
    if (__pyx_t_13) {
      __pyx_t_12 = __pyx_cur_scope->__pyx_v_P.size();
    } else {
      __pyx_t_12 = __pyx_cur_scope->__pyx_v_optimize_g;
    }
    __pyx_t_14 = __pyx_t_12;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_9genexpr10__pyx_v_i = __pyx_t_15;

      /* "caiman/source_extraction/cnmf/oasis.pyx":965
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)             # <<<<<<<<<<<<<<
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_Pt, __pyx_9genexpr10__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_Pl, __pyx_9genexpr10__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_Pl, __pyx_9genexpr10__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_h, 0, 0, NULL, &__pyx_t_10, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_y);
      __Pyx_GIVEREF(__pyx_v_y);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_y)) __PYX_ERR(0, 965, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3)) __PYX_ERR(0, 965, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_6);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_6)) __PYX_ERR(0, 965, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_1);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_b);
      __Pyx_GIVEREF(__pyx_v_b);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_v_b)) __PYX_ERR(0, 965, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_v_g)) __PYX_ERR(0, 965, __pyx_L1_error);
      __pyx_t_3 = 0;
      __pyx_t_6 = 0;
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_foo, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  } /* exit inner scope */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":952
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_foo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":968
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_11baz(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_11baz = {"baz", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_11baz, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_11baz(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_Pt = 0;
  PyObject *__pyx_v_Pl = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("baz (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_Pt,&__pyx_n_s_Pl,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Pt)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, 1); __PYX_ERR(0, 968, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Pl)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, 2); __PYX_ERR(0, 968, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "baz") < 0)) __PYX_ERR(0, 968, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_y = values[0];
    __pyx_v_Pt = values[1];
    __pyx_v_Pl = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 968, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.baz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_10baz(__pyx_self, __pyx_v_y, __pyx_v_Pt, __pyx_v_Pl);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":969
 * 
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),             # <<<<<<<<<<<<<<
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 *                                     method='L-BFGS-B',
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_1lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_1lambda1 = {"lambda1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_1lambda1, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_1lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 969, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda1") < 0)) __PYX_ERR(0, 969, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_x = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda1", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 969, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.baz.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, __pyx_v_x);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *__pyx_cur_scope;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 1);
  __pyx_outer_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bar)) { __Pyx_RaiseClosureNameError("bar"); __PYX_ERR(0, 969, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_y)) { __Pyx_RaiseClosureNameError("y"); __PYX_ERR(0, 969, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_Pt)) { __Pyx_RaiseClosureNameError("Pt"); __PYX_ERR(0, 969, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_Pl)) { __Pyx_RaiseClosureNameError("Pl"); __PYX_ERR(0, 969, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_y);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_y);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_y)) __PYX_ERR(0, 969, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_x)) __PYX_ERR(0, 969, __pyx_L1_error);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pt);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pt);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_cur_scope->__pyx_v_Pt)) __PYX_ERR(0, 969, __pyx_L1_error);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pl);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pl);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_cur_scope->__pyx_v_Pl)) __PYX_ERR(0, 969, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bar, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.baz.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":968
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_10baz(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("baz", 0);
  __pyx_cur_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *)__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 968, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_v_y = __pyx_v_y;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_y);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_y);
  __pyx_cur_scope->__pyx_v_Pt = __pyx_v_Pt;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pt);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pt);
  __pyx_cur_scope->__pyx_v_Pl = __pyx_v_Pl;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pl);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pl);

  /* "caiman/source_extraction/cnmf/oasis.pyx":969
 * 
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),             # <<<<<<<<<<<<<<
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 *                                     method='L-BFGS-B',
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_minimize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3baz_1lambda1, 0, __pyx_n_s_constrained_oasisAR1_locals_baz, ((PyObject*)__pyx_cur_scope), __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 969, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":970
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),             # <<<<<<<<<<<<<<
 *                                     method='L-BFGS-B',
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_b_nonneg)) { __Pyx_RaiseClosureNameError("b_nonneg"); __PYX_ERR(0, 970, __pyx_L1_error) }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_b_nonneg)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 970, __pyx_L1_error)
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None)) __PYX_ERR(0, 970, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(0, 970, __pyx_L1_error);
  __Pyx_INCREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_tuple__15)) __PYX_ERR(0, 970, __pyx_L1_error);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_bounds, __pyx_t_2) < 0) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_method, __pyx_kp_u_L_BFGS_B) < 0) __PYX_ERR(0, 970, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":972
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 *                                     method='L-BFGS-B',
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})             # <<<<<<<<<<<<<<
 *                 result = baz(y, Pt, Pl)
 *                 if fabs(result['x'][1] - g) < 1e-3:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_gtol, __pyx_float_1eneg_04) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_maxiter, __pyx_int_3) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_ftol, __pyx_float_1eneg_05) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_options, __pyx_t_2) < 0) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":969
 * 
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),             # <<<<<<<<<<<<<<
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 *                                     method='L-BFGS-B',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":968
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1.baz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "caiman/source_extraction/cnmf/oasis.pyx":670
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 */

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_2constrained_oasisAR1(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_g, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_sn, PyBoolObject *__pyx_v_optimize_b, PyBoolObject *__pyx_v_b_nonneg, int __pyx_v_optimize_g, int __pyx_v_decimate, int __pyx_v_max_iter, int __pyx_v_penalty, __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_s_min) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_t;
  unsigned int __pyx_v_count;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_thresh;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_RSS;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_aa;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_bb;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_cc;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_dlam;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_db;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_v_dphi;
  PyBoolObject *__pyx_v_g_converged = 0;
  PyArrayObject *__pyx_v_c = 0;
  PyArrayObject *__pyx_v_s = 0;
  PyArrayObject *__pyx_v_res = 0;
  PyArrayObject *__pyx_v_tmp = 0;
  PyArrayObject *__pyx_v_fluor = 0;
  PyArrayObject *__pyx_v_h = 0;
  PyArrayObject *__pyx_v_ff = 0;
  PyArrayObject *__pyx_v_ll = 0;
  struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool __pyx_v_newpool;
  PyObject *__pyx_v_oasis1strun = 0;
  PyObject *__pyx_v_oasis = 0;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_Pt = NULL;
  PyObject *__pyx_v_Pl = NULL;
  PyObject *__pyx_v_baz = 0;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_lls = NULL;
  PyObject *__pyx_v_pos = NULL;
  PyObject *__pyx_v_p = NULL;
  Py_ssize_t __pyx_7genexpr__pyx_v_i;
  Py_ssize_t __pyx_8genexpr1__pyx_v_i;
  Py_ssize_t __pyx_8genexpr2__pyx_v_i;
  Py_ssize_t __pyx_8genexpr3__pyx_v_i;
  Py_ssize_t __pyx_8genexpr5__pyx_v_i;
  Py_ssize_t __pyx_8genexpr6__pyx_v_i;
  Py_ssize_t __pyx_8genexpr7__pyx_v_i;
  Py_ssize_t __pyx_8genexpr8__pyx_v_i;
  Py_ssize_t __pyx_8genexpr9__pyx_v_i;
  Py_ssize_t __pyx_9genexpr11__pyx_v_i;
  Py_ssize_t __pyx_9genexpr12__pyx_v_i;
  Py_ssize_t __pyx_9genexpr13__pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ff;
  __Pyx_Buffer __pyx_pybuffer_ff;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fluor;
  __Pyx_Buffer __pyx_pybuffer_fluor;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_h;
  __Pyx_Buffer __pyx_pybuffer_h;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ll;
  __Pyx_Buffer __pyx_pybuffer_ll;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_res;
  __Pyx_Buffer __pyx_pybuffer_res;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_s;
  __Pyx_Buffer __pyx_pybuffer_s;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_tmp;
  __Pyx_Buffer __pyx_pybuffer_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyArrayObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_t_17;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_18;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool> ::size_type __pyx_t_19;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool> ::size_type __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  int __pyx_t_25;
  unsigned int __pyx_t_26;
  PyObject *(*__pyx_t_27)(PyObject *);
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  double __pyx_t_30;
  double __pyx_t_31;
  double __pyx_t_32;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_33;
  PyObject *__pyx_t_34 = NULL;
  PyArrayObject *__pyx_t_35 = NULL;
  Py_ssize_t __pyx_t_36;
  PyObject *__pyx_t_37 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("constrained_oasisAR1", 0);
  __pyx_cur_scope = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *)__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 670, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_g = __pyx_v_g;
  __pyx_cur_scope->__pyx_v_b_nonneg = __pyx_v_b_nonneg;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg);
  __pyx_cur_scope->__pyx_v_optimize_g = __pyx_v_optimize_g;
  __Pyx_INCREF((PyObject *)__pyx_v_y);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;
  __pyx_pybuffer_s.pybuffer.buf = NULL;
  __pyx_pybuffer_s.refcount = 0;
  __pyx_pybuffernd_s.data = NULL;
  __pyx_pybuffernd_s.rcbuffer = &__pyx_pybuffer_s;
  __pyx_pybuffer_res.pybuffer.buf = NULL;
  __pyx_pybuffer_res.refcount = 0;
  __pyx_pybuffernd_res.data = NULL;
  __pyx_pybuffernd_res.rcbuffer = &__pyx_pybuffer_res;
  __pyx_pybuffer_tmp.pybuffer.buf = NULL;
  __pyx_pybuffer_tmp.refcount = 0;
  __pyx_pybuffernd_tmp.data = NULL;
  __pyx_pybuffernd_tmp.rcbuffer = &__pyx_pybuffer_tmp;
  __pyx_pybuffer_fluor.pybuffer.buf = NULL;
  __pyx_pybuffer_fluor.refcount = 0;
  __pyx_pybuffernd_fluor.data = NULL;
  __pyx_pybuffernd_fluor.rcbuffer = &__pyx_pybuffer_fluor;
  __pyx_pybuffer_h.pybuffer.buf = NULL;
  __pyx_pybuffer_h.refcount = 0;
  __pyx_pybuffernd_h.data = NULL;
  __pyx_pybuffernd_h.rcbuffer = &__pyx_pybuffer_h;
  __pyx_pybuffer_ff.pybuffer.buf = NULL;
  __pyx_pybuffer_ff.refcount = 0;
  __pyx_pybuffernd_ff.data = NULL;
  __pyx_pybuffernd_ff.rcbuffer = &__pyx_pybuffer_ff;
  __pyx_pybuffer_ll.pybuffer.buf = NULL;
  __pyx_pybuffer_ll.refcount = 0;
  __pyx_pybuffernd_ll.data = NULL;
  __pyx_pybuffernd_ll.rcbuffer = &__pyx_pybuffer_ll;
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 670, __pyx_L1_error)
  }
  __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];

  /* "caiman/source_extraction/cnmf/oasis.pyx":735
 *         Pool newpool
 * 
 *     T = len(y)             # <<<<<<<<<<<<<<
 *     thresh = sn * sn * T
 *     if decimate > 1:  # parameter changes due to downsampling
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 735, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_T = __pyx_t_1;

  /* "caiman/source_extraction/cnmf/oasis.pyx":736
 * 
 *     T = len(y)
 *     thresh = sn * sn * T             # <<<<<<<<<<<<<<
 *     if decimate > 1:  # parameter changes due to downsampling
 *         fluor = y.copy()
 */
  __pyx_v_thresh = ((__pyx_v_sn * __pyx_v_sn) * __pyx_cur_scope->__pyx_v_T);

  /* "caiman/source_extraction/cnmf/oasis.pyx":737
 *     T = len(y)
 *     thresh = sn * sn * T
 *     if decimate > 1:  # parameter changes due to downsampling             # <<<<<<<<<<<<<<
 *         fluor = y.copy()
 *         y = y.reshape(-1, decimate).mean(1)
 */
  __pyx_t_2 = (__pyx_v_decimate > 1);
  if (__pyx_t_2) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":738
 *     thresh = sn * sn * T
 *     if decimate > 1:  # parameter changes due to downsampling
 *         fluor = y.copy()             # <<<<<<<<<<<<<<
 *         y = y.reshape(-1, decimate).mean(1)
 *         g = g**decimate
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 738, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 738, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer, (PyObject*)__pyx_v_fluor, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_fluor.diminfo[0].strides = __pyx_pybuffernd_fluor.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fluor.diminfo[0].shape = __pyx_pybuffernd_fluor.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 738, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_fluor = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":739
 *     if decimate > 1:  # parameter changes due to downsampling
 *         fluor = y.copy()
 *         y = y.reshape(-1, decimate).mean(1)             # <<<<<<<<<<<<<<
 *         g = g**decimate
 *         thresh = thresh / decimate / decimate
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_decimate); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_int_neg_1, __pyx_t_11};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 739, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_mean); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_int_1};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 739, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 739, __pyx_L1_error)
    __pyx_t_13 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 739, __pyx_L1_error)
    }
    __pyx_t_13 = 0;
    __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":740
 *         fluor = y.copy()
 *         y = y.reshape(-1, decimate).mean(1)
 *         g = g**decimate             # <<<<<<<<<<<<<<
 *         thresh = thresh / decimate / decimate
 *         T = len(y)
 */
    __pyx_cur_scope->__pyx_v_g = pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)__pyx_v_decimate));

    /* "caiman/source_extraction/cnmf/oasis.pyx":741
 *         y = y.reshape(-1, decimate).mean(1)
 *         g = g**decimate
 *         thresh = thresh / decimate / decimate             # <<<<<<<<<<<<<<
 *         T = len(y)
 *     # explicit kernel, useful for constructing solution
 */
    __pyx_v_thresh = ((__pyx_v_thresh / ((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)__pyx_v_decimate)) / ((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)__pyx_v_decimate));

    /* "caiman/source_extraction/cnmf/oasis.pyx":742
 *         g = g**decimate
 *         thresh = thresh / decimate / decimate
 *         T = len(y)             # <<<<<<<<<<<<<<
 *     # explicit kernel, useful for constructing solution
 *     h = g ** np.arange(T, dtype=np.float32)
 */
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 742, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_T = __pyx_t_1;

    /* "caiman/source_extraction/cnmf/oasis.pyx":737
 *     T = len(y)
 *     thresh = sn * sn * T
 *     if decimate > 1:  # parameter changes due to downsampling             # <<<<<<<<<<<<<<
 *         fluor = y.copy()
 *         y = y.reshape(-1, decimate).mean(1)
 */
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":744
 *         T = len(y)
 *     # explicit kernel, useful for constructing solution
 *     h = g ** np.arange(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *     c = np.empty(T, dtype=np.float32)
 *     lam = 0  # sn/sqrt(1-g*g)
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_arange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_float32); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Power(__pyx_t_3, __pyx_t_14, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 744, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_v_h, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_h.diminfo[0].strides = __pyx_pybuffernd_h.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_h.diminfo[0].shape = __pyx_pybuffernd_h.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_h = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":745
 *     # explicit kernel, useful for constructing solution
 *     h = g ** np.arange(T, dtype=np.float32)
 *     c = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *     lam = 0  # sn/sqrt(1-g*g)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5)) __PYX_ERR(0, 745, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 745, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
      __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 745, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":746
 *     h = g ** np.arange(T, dtype=np.float32)
 *     c = np.empty(T, dtype=np.float32)
 *     lam = 0  # sn/sqrt(1-g*g)             # <<<<<<<<<<<<<<
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):
 */
  __pyx_cur_scope->__pyx_v_lam = 0.0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":748
 *     lam = 0  # sn/sqrt(1-g*g)
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_1oasis1strun, 0, __pyx_n_s_constrained_oasisAR1_locals_oasi, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_oasis1strun = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":787
 *         return c, P
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_3oasis, 0, __pyx_n_s_constrained_oasisAR1_locals_oasi_2, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_oasis = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":813
 *         return c, P
 * 
 *     g_converged = False             # <<<<<<<<<<<<<<
 *     count = 0
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0
 */
  __Pyx_INCREF(Py_False);
  __pyx_v_g_converged = ((PyBoolObject *)Py_False);

  /* "caiman/source_extraction/cnmf/oasis.pyx":814
 * 
 *     g_converged = False
 *     count = 0             # <<<<<<<<<<<<<<
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0
 *         c, P = oasis1strun(y, g, c)
 */
  __pyx_v_count = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":815
 *     g_converged = False
 *     count = 0
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0             # <<<<<<<<<<<<<<
 *         c, P = oasis1strun(y, g, c)
 *         tmp = np.empty(T, dtype=np.float32)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_optimize_b)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 815, __pyx_L1_error)
  __pyx_t_15 = (!__pyx_t_2);
  if (__pyx_t_15) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":816
 *     count = 0
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0
 *         c, P = oasis1strun(y, g, c)             # <<<<<<<<<<<<<<
 *         tmp = np.empty(T, dtype=np.float32)
 *         res = y - c
 */
    __pyx_t_4 = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_oasis1strun(__pyx_v_oasis1strun, ((PyArrayObject *)__pyx_v_y), __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 816, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_14 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_14);
      index = 0; __pyx_t_5 = __pyx_t_16(__pyx_t_14); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_3 = __pyx_t_16(__pyx_t_14); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_14), 2) < 0) __PYX_ERR(0, 816, __pyx_L1_error)
      __pyx_t_16 = NULL;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_16 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 816, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 816, __pyx_L1_error)
    __pyx_t_17 = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 816, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_v_P = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

    /* "caiman/source_extraction/cnmf/oasis.pyx":817
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0
 *         c, P = oasis1strun(y, g, c)
 *         tmp = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         res = y - c
 *         RSS = (res).dot(res)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4)) __PYX_ERR(0, 817, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_float32); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 817, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_v_tmp, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_tmp.diminfo[0].strides = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_tmp.diminfo[0].shape = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 817, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_tmp = ((PyArrayObject *)__pyx_t_11);
    __pyx_t_11 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":818
 *         c, P = oasis1strun(y, g, c)
 *         tmp = np.empty(T, dtype=np.float32)
 *         res = y - c             # <<<<<<<<<<<<<<
 *         RSS = (res).dot(res)
 *         b = 0
 */
    __pyx_t_11 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 818, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 818, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_res = ((PyArrayObject *)__pyx_t_11);
    __pyx_t_11 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":819
 *         tmp = np.empty(T, dtype=np.float32)
 *         res = y - c
 *         RSS = (res).dot(res)             # <<<<<<<<<<<<<<
 *         b = 0
 *         # until noise constraint is tight or spike train is empty
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, ((PyObject *)__pyx_v_res)};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_RSS = __pyx_t_18;

    /* "caiman/source_extraction/cnmf/oasis.pyx":820
 *         res = y - c
 *         RSS = (res).dot(res)
 *         b = 0             # <<<<<<<<<<<<<<
 *         # until noise constraint is tight or spike train is empty
 *         while RSS < thresh * (1 - 1e-4) and c.sum() > 1e-9:
 */
    __pyx_cur_scope->__pyx_v_b = 0.0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":822
 *         b = 0
 *         # until noise constraint is tight or spike train is empty
 *         while RSS < thresh * (1 - 1e-4) and c.sum() > 1e-9:             # <<<<<<<<<<<<<<
 *             # update lam
 *             for i in range(P.size()):
 */
    while (1) {
      __pyx_t_2 = (__pyx_v_RSS < (__pyx_v_thresh * (1.0 - 1e-4)));
      if (__pyx_t_2) {
      } else {
        __pyx_t_15 = __pyx_t_2;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 822, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_11, __pyx_float_1eneg_9, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_15 = __pyx_t_2;
      __pyx_L9_bool_binop_done:;
      if (!__pyx_t_15) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":824
 *         while RSS < thresh * (1 - 1e-4) and c.sum() > 1e-9:
 *             # update lam
 *             for i in range(P.size()):             # <<<<<<<<<<<<<<
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 */
      __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
        __pyx_cur_scope->__pyx_v_i = __pyx_t_1;

        /* "caiman/source_extraction/cnmf/oasis.pyx":825
 *             # update lam
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity             # <<<<<<<<<<<<<<
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 *                     aa = 1 / P[i].w
 */
        __pyx_t_15 = (__pyx_cur_scope->__pyx_v_i == (__pyx_cur_scope->__pyx_v_P.size() - 1));
        if (__pyx_t_15) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":827
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 *                     aa = 1 / P[i].w             # <<<<<<<<<<<<<<
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 */
          __pyx_v_aa = (1.0 / (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w);

          /* "caiman/source_extraction/cnmf/oasis.pyx":828
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):             # <<<<<<<<<<<<<<
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 */
          __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l;
          __pyx_t_22 = __pyx_t_21;
          for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
            __pyx_v_j = __pyx_t_23;

            /* "caiman/source_extraction/cnmf/oasis.pyx":829
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa             # <<<<<<<<<<<<<<
 *                         aa *= g
 *                 else:
 */
            __pyx_t_24 = ((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + __pyx_v_j);
            __pyx_t_6 = -1;
            if (__pyx_t_24 < 0) {
              __pyx_t_24 += __pyx_pybuffernd_tmp.diminfo[0].shape;
              if (unlikely(__pyx_t_24 < 0)) __pyx_t_6 = 0;
            } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_tmp.diminfo[0].shape)) __pyx_t_6 = 0;
            if (unlikely(__pyx_t_6 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_6);
              __PYX_ERR(0, 829, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_tmp.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_tmp.diminfo[0].strides) = __pyx_v_aa;

            /* "caiman/source_extraction/cnmf/oasis.pyx":830
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g             # <<<<<<<<<<<<<<
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w
 */
            __pyx_v_aa = (__pyx_v_aa * __pyx_cur_scope->__pyx_v_g);
          }

          /* "caiman/source_extraction/cnmf/oasis.pyx":825
 *             # update lam
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity             # <<<<<<<<<<<<<<
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 *                     aa = 1 / P[i].w
 */
          goto __pyx_L13;
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":832
 *                         aa *= g
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w             # <<<<<<<<<<<<<<
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 */
        /*else*/ {
          __pyx_v_aa = ((1.0 - pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l))) / ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w));

          /* "caiman/source_extraction/cnmf/oasis.pyx":833
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w
 *                     for j in range(P[i].l):             # <<<<<<<<<<<<<<
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 */
          __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l;
          __pyx_t_22 = __pyx_t_21;
          for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
            __pyx_v_j = __pyx_t_23;

            /* "caiman/source_extraction/cnmf/oasis.pyx":834
 *                     aa = (1 - g**P[i].l) / P[i].w
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa             # <<<<<<<<<<<<<<
 *                         aa *= g
 *             aa = tmp.dot(tmp)
 */
            __pyx_t_24 = ((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + __pyx_v_j);
            __pyx_t_6 = -1;
            if (__pyx_t_24 < 0) {
              __pyx_t_24 += __pyx_pybuffernd_tmp.diminfo[0].shape;
              if (unlikely(__pyx_t_24 < 0)) __pyx_t_6 = 0;
            } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_tmp.diminfo[0].shape)) __pyx_t_6 = 0;
            if (unlikely(__pyx_t_6 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_6);
              __PYX_ERR(0, 834, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_tmp.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_tmp.diminfo[0].strides) = __pyx_v_aa;

            /* "caiman/source_extraction/cnmf/oasis.pyx":835
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g             # <<<<<<<<<<<<<<
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)
 */
            __pyx_v_aa = (__pyx_v_aa * __pyx_cur_scope->__pyx_v_g);
          }
        }
        __pyx_L13:;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":836
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 *             aa = tmp.dot(tmp)             # <<<<<<<<<<<<<<
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmp), __pyx_n_s_dot); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp)};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_aa = __pyx_t_18;

      /* "caiman/source_extraction/cnmf/oasis.pyx":837
 *                         aa *= g
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)             # <<<<<<<<<<<<<<
 *             cc = RSS - thresh
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, ((PyObject *)__pyx_v_tmp)};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 837, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_bb = __pyx_t_18;

      /* "caiman/source_extraction/cnmf/oasis.pyx":838
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh             # <<<<<<<<<<<<<<
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             lam += dlam
 */
      __pyx_v_cc = (__pyx_v_RSS - __pyx_v_thresh);

      /* "caiman/source_extraction/cnmf/oasis.pyx":839
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa             # <<<<<<<<<<<<<<
 *             lam += dlam
 *             for i in range(P.size() - 1):  # perform shift
 */
      __pyx_v_dlam = (((-__pyx_v_bb) + sqrt(((__pyx_v_bb * __pyx_v_bb) - (__pyx_v_aa * __pyx_v_cc)))) / ((double)__pyx_v_aa));

      /* "caiman/source_extraction/cnmf/oasis.pyx":840
 *             cc = RSS - thresh
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             lam += dlam             # <<<<<<<<<<<<<<
 *             for i in range(P.size() - 1):  # perform shift
 *                 P[i].v -= dlam * (1 - g**P[i].l)
 */
      __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam + __pyx_v_dlam);

      /* "caiman/source_extraction/cnmf/oasis.pyx":841
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             lam += dlam
 *             for i in range(P.size() - 1):  # perform shift             # <<<<<<<<<<<<<<
 *                 P[i].v -= dlam * (1 - g**P[i].l)
 *             P[P.size() - 1].v -= dlam  # correct last pool; |s|_1 instead |c|_1
 */
      __pyx_t_19 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
        __pyx_cur_scope->__pyx_v_i = __pyx_t_1;

        /* "caiman/source_extraction/cnmf/oasis.pyx":842
 *             lam += dlam
 *             for i in range(P.size() - 1):  # perform shift
 *                 P[i].v -= dlam * (1 - g**P[i].l)             # <<<<<<<<<<<<<<
 *             P[P.size() - 1].v -= dlam  # correct last pool; |s|_1 instead |c|_1
 *             c, P = oasis(P, g, c)
 */
        __pyx_t_21 = __pyx_cur_scope->__pyx_v_i;
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v - (__pyx_v_dlam * (1.0 - pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l)))));
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":843
 *             for i in range(P.size() - 1):  # perform shift
 *                 P[i].v -= dlam * (1 - g**P[i].l)
 *             P[P.size() - 1].v -= dlam  # correct last pool; |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *             c, P = oasis(P, g, c)
 * 
 */
      __pyx_t_19 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
      (__pyx_cur_scope->__pyx_v_P[__pyx_t_19]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_19]).v - __pyx_v_dlam);

      /* "caiman/source_extraction/cnmf/oasis.pyx":844
 *                 P[i].v -= dlam * (1 - g**P[i].l)
 *             P[P.size() - 1].v -= dlam  # correct last pool; |s|_1 instead |c|_1
 *             c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 * 
 *             # update g
 */
      __pyx_t_4 = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 844, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3);
        index = 0; __pyx_t_11 = __pyx_t_16(__pyx_t_3); if (unlikely(!__pyx_t_11)) goto __pyx_L20_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        index = 1; __pyx_t_5 = __pyx_t_16(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L20_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_3), 2) < 0) __PYX_ERR(0, 844, __pyx_L1_error)
        __pyx_t_16 = NULL;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L21_unpacking_done;
        __pyx_L20_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_16 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 844, __pyx_L1_error)
        __pyx_L21_unpacking_done:;
      }
      if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 844, __pyx_L1_error)
      __pyx_t_17 = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = ((PyArrayObject *)__pyx_t_11);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
          }
          __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
        }
        __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 844, __pyx_L1_error)
      }
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_11));
      __pyx_t_11 = 0;
      __pyx_cur_scope->__pyx_v_P = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

      /* "caiman/source_extraction/cnmf/oasis.pyx":847
 * 
 *             # update g
 *             if optimize_g and count < max_iter - 1 and (not g_converged):             # <<<<<<<<<<<<<<
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 */
      __pyx_t_2 = (__pyx_cur_scope->__pyx_v_optimize_g != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_15 = __pyx_t_2;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_count < (__pyx_v_max_iter - 1));
      if (__pyx_t_2) {
      } else {
        __pyx_t_15 = __pyx_t_2;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_g_converged)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 847, __pyx_L1_error)
      __pyx_t_25 = (!__pyx_t_2);
      __pyx_t_15 = __pyx_t_25;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_15) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":848
 *             # update g
 *             if optimize_g and count < max_iter - 1 and (not g_converged):
 *                 ma = max([P[i].l for i in range(P.size())])             # <<<<<<<<<<<<<<
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 */
        { /* enter inner scope */
          __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 848, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
          __pyx_t_20 = __pyx_t_19;
          for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
            __pyx_7genexpr__pyx_v_i = __pyx_t_1;
            __pyx_t_5 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_7genexpr__pyx_v_i]).l); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 848, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 848, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
        } /* exit inner scope */
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 848, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_26 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_26 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 848, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_cur_scope->__pyx_v_ma = __pyx_t_26;

        /* "caiman/source_extraction/cnmf/oasis.pyx":849
 *             if optimize_g and count < max_iter - 1 and (not g_converged):
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])             # <<<<<<<<<<<<<<
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 849, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_argsort); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 849, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        { /* enter inner scope */
          __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 849, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
          __pyx_t_20 = __pyx_t_19;
          for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
            __pyx_8genexpr1__pyx_v_i = __pyx_t_1;
            __pyx_t_3 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_P[__pyx_8genexpr1__pyx_v_i]).v); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 849, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
        } /* exit inner scope */
        __pyx_t_3 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 849, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":850
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]             # <<<<<<<<<<<<<<
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 */
        { /* enter inner scope */
          __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 850, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_v_idx, (-__pyx_cur_scope->__pyx_v_optimize_g), 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 850, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
            __pyx_t_4 = __pyx_t_11; __Pyx_INCREF(__pyx_t_4);
            __pyx_t_1 = 0;
            __pyx_t_27 = NULL;
          } else {
            __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 850, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 850, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          for (;;) {
            if (likely(!__pyx_t_27)) {
              if (likely(PyList_CheckExact(__pyx_t_4))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 850, __pyx_L1_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_11); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 850, __pyx_L1_error)
                #else
                __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 850, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 850, __pyx_L1_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_11); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 850, __pyx_L1_error)
                #else
                __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 850, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              }
            } else {
              __pyx_t_11 = __pyx_t_27(__pyx_t_4);
              if (unlikely(!__pyx_t_11)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 850, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_11);
            }
            __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 850, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_8genexpr2__pyx_v_i = __pyx_t_21;
            __pyx_t_11 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_8genexpr2__pyx_v_i]).t); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 850, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 850, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_Pt, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":851
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]             # <<<<<<<<<<<<<<
 * 
 *                 def bar(y, g, Pt, Pl):
 */
        { /* enter inner scope */
          __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 851, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_v_idx, (-__pyx_cur_scope->__pyx_v_optimize_g), 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 851, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
            __pyx_t_11 = __pyx_t_4; __Pyx_INCREF(__pyx_t_11);
            __pyx_t_1 = 0;
            __pyx_t_27 = NULL;
          } else {
            __pyx_t_1 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 851, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 851, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          for (;;) {
            if (likely(!__pyx_t_27)) {
              if (likely(PyList_CheckExact(__pyx_t_11))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 851, __pyx_L1_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_4 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 851, __pyx_L1_error)
                #else
                __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 851, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_4);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 851, __pyx_L1_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 851, __pyx_L1_error)
                #else
                __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 851, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_4);
                #endif
              }
            } else {
              __pyx_t_4 = __pyx_t_27(__pyx_t_11);
              if (unlikely(!__pyx_t_4)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 851, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_4);
            }
            __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_8genexpr3__pyx_v_i = __pyx_t_21;
            __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_8genexpr3__pyx_v_i]).l); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 851, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 851, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_Pl, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":853
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */
        __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_5bar, 0, __pyx_n_s_constrained_oasisAR1_locals_bar_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 853, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bar);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bar, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":868
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */
        __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_7baz, 0, __pyx_n_s_constrained_oasisAR1_locals_baz_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_baz, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":871
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 *                 aa = baz(y, Pt, Pl)             # <<<<<<<<<<<<<<
 *                 if abs(aa - g) < 1e-4:
 *                     g_converged = True
 */
        __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 871, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF((PyObject *)__pyx_v_y);
        __Pyx_GIVEREF((PyObject *)__pyx_v_y);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_y))) __PYX_ERR(0, 871, __pyx_L1_error);
        __Pyx_INCREF(__pyx_v_Pt);
        __Pyx_GIVEREF(__pyx_v_Pt);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_Pt)) __PYX_ERR(0, 871, __pyx_L1_error);
        __Pyx_INCREF(__pyx_v_Pl);
        __Pyx_GIVEREF(__pyx_v_Pl);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_Pl)) __PYX_ERR(0, 871, __pyx_L1_error);
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_v_baz, __pyx_t_5, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 871, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 871, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_v_aa = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":872
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:             # <<<<<<<<<<<<<<
 *                     g_converged = True
 *                 g = aa
 */
        __pyx_t_15 = (fabsf((__pyx_v_aa - __pyx_cur_scope->__pyx_v_g)) < 1e-4);
        if (__pyx_t_15) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":873
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:
 *                     g_converged = True             # <<<<<<<<<<<<<<
 *                 g = aa
 *                 # explicit kernel, useful for constructing c
 */
          __Pyx_INCREF(Py_True);
          __Pyx_DECREF_SET(__pyx_v_g_converged, ((PyBoolObject *)Py_True));

          /* "caiman/source_extraction/cnmf/oasis.pyx":872
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:             # <<<<<<<<<<<<<<
 *                     g_converged = True
 *                 g = aa
 */
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":874
 *                 if abs(aa - g) < 1e-4:
 *                     g_converged = True
 *                 g = aa             # <<<<<<<<<<<<<<
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 */
        __pyx_cur_scope->__pyx_v_g = __pyx_v_aa;

        /* "caiman/source_extraction/cnmf/oasis.pyx":876
 *                 g = aa
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))             # <<<<<<<<<<<<<<
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyFloat_FromDouble(log(__pyx_cur_scope->__pyx_v_g)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_arange); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_3);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GetModuleGlobalName(__pyx_t_28, __pyx_n_s_np); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_float32); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_29) < 0) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_12, __pyx_t_3); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Multiply(__pyx_t_5, __pyx_t_29); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __pyx_t_29 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_29)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_29);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_29, __pyx_t_3};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 876, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 876, __pyx_L1_error)
        __pyx_t_7 = ((PyArrayObject *)__pyx_t_11);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
          __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_6 < 0)) {
            PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_v_h, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
            }
            __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
          }
          __pyx_pybuffernd_h.diminfo[0].strides = __pyx_pybuffernd_h.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_h.diminfo[0].shape = __pyx_pybuffernd_h.rcbuffer->pybuffer.shape[0];
          if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 876, __pyx_L1_error)
        }
        __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":877
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *                 for i in range(P.size()):             # <<<<<<<<<<<<<<
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)
 */
        __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
        __pyx_t_20 = __pyx_t_19;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
          __pyx_cur_scope->__pyx_v_i = __pyx_t_1;

          /* "caiman/source_extraction/cnmf/oasis.pyx":878
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]             # <<<<<<<<<<<<<<
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 */
          __pyx_t_11 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 878, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_4 = PySlice_New(Py_None, __pyx_t_11, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 878, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_h), __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 878, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "caiman/source_extraction/cnmf/oasis.pyx":879
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)             # <<<<<<<<<<<<<<
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_29 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l)); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_5 = PySlice_New(__pyx_t_3, __pyx_t_29, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          __pyx_t_29 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_y), __pyx_t_5); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_29};
            __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 879, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_t_4 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_lam * (1.0 - pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l))))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_29 = PyNumber_Subtract(__pyx_t_11, __pyx_t_4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_29); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).v = __pyx_t_18;

          /* "caiman/source_extraction/cnmf/oasis.pyx":880
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)             # <<<<<<<<<<<<<<
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *                 c, P = oasis(P, g, c)
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 880, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_11 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_v_q};
            __pyx_t_29 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 880, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_29);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_29); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 880, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w = __pyx_t_18;
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":881
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                 c, P = oasis(P, g, c)
 *             # calc RSS
 */
        __pyx_t_19 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_19]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_19]).v - (__pyx_cur_scope->__pyx_v_lam * pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[(__pyx_cur_scope->__pyx_v_P.size() - 1)]).l))));

        /* "caiman/source_extraction/cnmf/oasis.pyx":882
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *                 c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 *             # calc RSS
 *             res = y - c
 */
        __pyx_t_29 = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 882, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        if ((likely(PyTuple_CheckExact(__pyx_t_29))) || (PyList_CheckExact(__pyx_t_29))) {
          PyObject* sequence = __pyx_t_29;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 882, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_11);
          #else
          __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 882, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 882, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_29); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 882, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
          index = 0; __pyx_t_4 = __pyx_t_16(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L39_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          index = 1; __pyx_t_11 = __pyx_t_16(__pyx_t_5); if (unlikely(!__pyx_t_11)) goto __pyx_L39_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_5), 2) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
          __pyx_t_16 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L40_unpacking_done;
          __pyx_L39_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_16 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 882, __pyx_L1_error)
          __pyx_L40_unpacking_done:;
        }
        if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 882, __pyx_L1_error)
        __pyx_t_17 = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
          __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_6 < 0)) {
            PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
            }
            __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
          }
          __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
          if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 882, __pyx_L1_error)
        }
        __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_4));
        __pyx_t_4 = 0;
        __pyx_cur_scope->__pyx_v_P = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

        /* "caiman/source_extraction/cnmf/oasis.pyx":847
 * 
 *             # update g
 *             if optimize_g and count < max_iter - 1 and (not g_converged):             # <<<<<<<<<<<<<<
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 */
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":884
 *                 c, P = oasis(P, g, c)
 *             # calc RSS
 *             res = y - c             # <<<<<<<<<<<<<<
 *             RSS = res.dot(res)
 * 
 */
      __pyx_t_29 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      if (!(likely(((__pyx_t_29) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_29, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 884, __pyx_L1_error)
      __pyx_t_7 = ((PyArrayObject *)__pyx_t_29);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          }
          __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
        }
        __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 884, __pyx_L1_error)
      }
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_res, ((PyArrayObject *)__pyx_t_29));
      __pyx_t_29 = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":885
 *             # calc RSS
 *             res = y - c
 *             RSS = res.dot(res)             # <<<<<<<<<<<<<<
 * 
 *     else:  # optimize b and dependent on optimize_g g too
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_v_res)};
        __pyx_t_29 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 885, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_29); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      __pyx_v_RSS = __pyx_t_18;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":815
 *     g_converged = False
 *     count = 0
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0             # <<<<<<<<<<<<<<
 *         c, P = oasis1strun(y, g, c)
 *         tmp = np.empty(T, dtype=np.float32)
 */
    goto __pyx_L4;
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":888
 * 
 *     else:  # optimize b and dependent on optimize_g g too
 *         b = np.percentile(y, 15)  # initial estimate of baseline             # <<<<<<<<<<<<<<
 *         if b_nonneg:
 *             b = fmax(b, 0)
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_percentile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_11, ((PyObject *)__pyx_v_y), __pyx_int_15};
      __pyx_t_29 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_29); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __pyx_cur_scope->__pyx_v_b = __pyx_t_18;

    /* "caiman/source_extraction/cnmf/oasis.pyx":889
 *     else:  # optimize b and dependent on optimize_g g too
 *         b = np.percentile(y, 15)  # initial estimate of baseline
 *         if b_nonneg:             # <<<<<<<<<<<<<<
 *             b = fmax(b, 0)
 *         c, P = oasis1strun(y - b, g, c)
 */
    __pyx_t_15 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 889, __pyx_L1_error)
    if (__pyx_t_15) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":890
 *         b = np.percentile(y, 15)  # initial estimate of baseline
 *         if b_nonneg:
 *             b = fmax(b, 0)             # <<<<<<<<<<<<<<
 *         c, P = oasis1strun(y - b, g, c)
 *         # update b and lam
 */
      __pyx_cur_scope->__pyx_v_b = fmax(__pyx_cur_scope->__pyx_v_b, 0.0);

      /* "caiman/source_extraction/cnmf/oasis.pyx":889
 *     else:  # optimize b and dependent on optimize_g g too
 *         b = np.percentile(y, 15)  # initial estimate of baseline
 *         if b_nonneg:             # <<<<<<<<<<<<<<
 *             b = fmax(b, 0)
 *         c, P = oasis1strun(y - b, g, c)
 */
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":891
 *         if b_nonneg:
 *             b = fmax(b, 0)
 *         c, P = oasis1strun(y - b, g, c)             # <<<<<<<<<<<<<<
 *         # update b and lam
 *         db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 */
    __pyx_t_29 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __pyx_t_4 = PyNumber_Subtract(((PyObject *)__pyx_v_y), __pyx_t_29); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 891, __pyx_L1_error)
    __pyx_t_29 = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_oasis1strun(__pyx_v_oasis1strun, ((PyArrayObject *)__pyx_t_4), __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_29))) || (PyList_CheckExact(__pyx_t_29))) {
      PyObject* sequence = __pyx_t_29;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 891, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_11);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_29); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
      index = 0; __pyx_t_4 = __pyx_t_16(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L42_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_11 = __pyx_t_16(__pyx_t_5); if (unlikely(!__pyx_t_11)) goto __pyx_L42_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_5), 2) < 0) __PYX_ERR(0, 891, __pyx_L1_error)
      __pyx_t_16 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L43_unpacking_done;
      __pyx_L42_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_16 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 891, __pyx_L1_error)
      __pyx_L43_unpacking_done:;
    }
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 891, __pyx_L1_error)
    __pyx_t_17 = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 891, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_4));
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_v_P = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

    /* "caiman/source_extraction/cnmf/oasis.pyx":893
 *         c, P = oasis1strun(y - b, g, c)
 *         # update b and lam
 *         db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b             # <<<<<<<<<<<<<<
 *         b += db
 *         lam -= db / (1 - g)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_mean); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_11};
      __pyx_t_29 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_30 = __pyx_PyFloat_AsDouble(__pyx_t_29); if (unlikely((__pyx_t_30 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 893, __pyx_L1_error)
    if (__pyx_t_15) {
      __pyx_t_31 = 0.0;
    } else {
      __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_np); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_inf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      __pyx_t_29 = PyNumber_Negative(__pyx_t_4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_32 = __pyx_PyFloat_AsDouble(__pyx_t_29); if (unlikely((__pyx_t_32 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      __pyx_t_31 = __pyx_t_32;
    }
    __pyx_v_db = (fmax(__pyx_t_30, __pyx_t_31) - __pyx_cur_scope->__pyx_v_b);

    /* "caiman/source_extraction/cnmf/oasis.pyx":894
 *         # update b and lam
 *         db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *         b += db             # <<<<<<<<<<<<<<
 *         lam -= db / (1 - g)
 *         # correct last pool
 */
    __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_b + __pyx_v_db);

    /* "caiman/source_extraction/cnmf/oasis.pyx":895
 *         db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *         b += db
 *         lam -= db / (1 - g)             # <<<<<<<<<<<<<<
 *         # correct last pool
 *         i = P.size() - 1
 */
    __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam - (__pyx_v_db / (1.0 - __pyx_cur_scope->__pyx_v_g)));

    /* "caiman/source_extraction/cnmf/oasis.pyx":897
 *         lam -= db / (1 - g)
 *         # correct last pool
 *         i = P.size() - 1             # <<<<<<<<<<<<<<
 *         P[i].v -= lam * g**P[i].l  # |s|_1 instead |c|_1
 *         c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 */
    __pyx_cur_scope->__pyx_v_i = (__pyx_cur_scope->__pyx_v_P.size() - 1);

    /* "caiman/source_extraction/cnmf/oasis.pyx":898
 *         # correct last pool
 *         i = P.size() - 1
 *         P[i].v -= lam * g**P[i].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *         c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 *         # calc RSS
 */
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_i;
    (__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v - (__pyx_cur_scope->__pyx_v_lam * pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l))));

    /* "caiman/source_extraction/cnmf/oasis.pyx":899
 *         i = P.size() - 1
 *         P[i].v -= lam * g**P[i].l  # |s|_1 instead |c|_1
 *         c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]             # <<<<<<<<<<<<<<
 *         # calc RSS
 *         res = y - b - c
 */
    __pyx_t_29 = PyFloat_FromDouble((fmax(0.0, (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).v) / ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w))); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = PySlice_New(Py_None, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_h), __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Multiply(__pyx_t_29, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_29 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l)); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __pyx_t_5 = PySlice_New(__pyx_t_4, __pyx_t_29, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    if (unlikely((PyObject_SetItem(((PyObject *)__pyx_v_c), __pyx_t_5, __pyx_t_11) < 0))) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":901
 *         c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 *         # calc RSS
 *         res = y - b - c             # <<<<<<<<<<<<<<
 *         RSS = res.dot(res)
 *         tmp = np.empty(T, dtype=np.float32)
 */
    __pyx_t_11 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_5 = PyNumber_Subtract(((PyObject *)__pyx_v_y), __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Subtract(__pyx_t_5, ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 901, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 901, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_res = ((PyArrayObject *)__pyx_t_11);
    __pyx_t_11 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":902
 *         # calc RSS
 *         res = y - b - c
 *         RSS = res.dot(res)             # <<<<<<<<<<<<<<
 *         tmp = np.empty(T, dtype=np.float32)
 *         # until noise constraint is tight or spike train is empty or max_iter reached
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_29 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_29)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_29);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_29, ((PyObject *)__pyx_v_res)};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 902, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_RSS = __pyx_t_18;

    /* "caiman/source_extraction/cnmf/oasis.pyx":903
 *         res = y - b - c
 *         RSS = res.dot(res)
 *         tmp = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         # until noise constraint is tight or spike train is empty or max_iter reached
 *         while fabs(RSS - thresh) > thresh * 1e-4 and c.sum() > 1e-9 and count < max_iter:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_29 = PyTuple_New(1); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_GIVEREF(__pyx_t_11);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_11)) __PYX_ERR(0, 903, __pyx_L1_error);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_29, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 903, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_v_tmp, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_tmp.diminfo[0].strides = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_tmp.diminfo[0].shape = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 903, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_tmp = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":905
 *         tmp = np.empty(T, dtype=np.float32)
 *         # until noise constraint is tight or spike train is empty or max_iter reached
 *         while fabs(RSS - thresh) > thresh * 1e-4 and c.sum() > 1e-9 and count < max_iter:             # <<<<<<<<<<<<<<
 *             count += 1
 *             # update lam and b
 */
    while (1) {
      __pyx_t_25 = (fabs((__pyx_v_RSS - __pyx_v_thresh)) > (__pyx_v_thresh * 1e-4));
      if (__pyx_t_25) {
      } else {
        __pyx_t_15 = __pyx_t_25;
        goto __pyx_L46_bool_binop_done;
      }
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_sum); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_29 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_29)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_29);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_29, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 905, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = PyObject_RichCompare(__pyx_t_3, __pyx_float_1eneg_9, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_25) {
      } else {
        __pyx_t_15 = __pyx_t_25;
        goto __pyx_L46_bool_binop_done;
      }
      __pyx_t_25 = (__pyx_v_count < __pyx_v_max_iter);
      __pyx_t_15 = __pyx_t_25;
      __pyx_L46_bool_binop_done:;
      if (!__pyx_t_15) break;

      /* "caiman/source_extraction/cnmf/oasis.pyx":906
 *         # until noise constraint is tight or spike train is empty or max_iter reached
 *         while fabs(RSS - thresh) > thresh * 1e-4 and c.sum() > 1e-9 and count < max_iter:
 *             count += 1             # <<<<<<<<<<<<<<
 *             # update lam and b
 *             # calc total shift dphi due to contribution of baseline and lambda
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":909
 *             # update lam and b
 *             # calc total shift dphi due to contribution of baseline and lambda
 *             for i in range(P.size()):             # <<<<<<<<<<<<<<
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     aa = 1 / P[i].w
 */
      __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
        __pyx_cur_scope->__pyx_v_i = __pyx_t_1;

        /* "caiman/source_extraction/cnmf/oasis.pyx":910
 *             # calc total shift dphi due to contribution of baseline and lambda
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity             # <<<<<<<<<<<<<<
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):
 */
        __pyx_t_15 = (__pyx_cur_scope->__pyx_v_i == (__pyx_cur_scope->__pyx_v_P.size() - 1));
        if (__pyx_t_15) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":911
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     aa = 1 / P[i].w             # <<<<<<<<<<<<<<
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 */
          __pyx_v_aa = (1.0 / (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w);

          /* "caiman/source_extraction/cnmf/oasis.pyx":912
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):             # <<<<<<<<<<<<<<
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 */
          __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l;
          __pyx_t_22 = __pyx_t_21;
          for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
            __pyx_v_j = __pyx_t_23;

            /* "caiman/source_extraction/cnmf/oasis.pyx":913
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa             # <<<<<<<<<<<<<<
 *                         aa *= g
 *                 else:
 */
            __pyx_t_24 = ((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + __pyx_v_j);
            __pyx_t_6 = -1;
            if (__pyx_t_24 < 0) {
              __pyx_t_24 += __pyx_pybuffernd_tmp.diminfo[0].shape;
              if (unlikely(__pyx_t_24 < 0)) __pyx_t_6 = 0;
            } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_tmp.diminfo[0].shape)) __pyx_t_6 = 0;
            if (unlikely(__pyx_t_6 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_6);
              __PYX_ERR(0, 913, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_tmp.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_tmp.diminfo[0].strides) = __pyx_v_aa;

            /* "caiman/source_extraction/cnmf/oasis.pyx":914
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g             # <<<<<<<<<<<<<<
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w
 */
            __pyx_v_aa = (__pyx_v_aa * __pyx_cur_scope->__pyx_v_g);
          }

          /* "caiman/source_extraction/cnmf/oasis.pyx":910
 *             # calc total shift dphi due to contribution of baseline and lambda
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity             # <<<<<<<<<<<<<<
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):
 */
          goto __pyx_L51;
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":916
 *                         aa *= g
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w             # <<<<<<<<<<<<<<
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 */
        /*else*/ {
          __pyx_v_aa = ((1.0 - pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l))) / ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w));

          /* "caiman/source_extraction/cnmf/oasis.pyx":917
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w
 *                     for j in range(P[i].l):             # <<<<<<<<<<<<<<
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 */
          __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l;
          __pyx_t_22 = __pyx_t_21;
          for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
            __pyx_v_j = __pyx_t_23;

            /* "caiman/source_extraction/cnmf/oasis.pyx":918
 *                     aa = (1 - g**P[i].l) / P[i].w
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa             # <<<<<<<<<<<<<<
 *                         aa *= g
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w
 */
            __pyx_t_24 = ((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + __pyx_v_j);
            __pyx_t_6 = -1;
            if (__pyx_t_24 < 0) {
              __pyx_t_24 += __pyx_pybuffernd_tmp.diminfo[0].shape;
              if (unlikely(__pyx_t_24 < 0)) __pyx_t_6 = 0;
            } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_tmp.diminfo[0].shape)) __pyx_t_6 = 0;
            if (unlikely(__pyx_t_6 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_6);
              __PYX_ERR(0, 918, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_tmp.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_tmp.diminfo[0].strides) = __pyx_v_aa;

            /* "caiman/source_extraction/cnmf/oasis.pyx":919
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g             # <<<<<<<<<<<<<<
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w
 *                                               for i in range(P.size())])
 */
            __pyx_v_aa = (__pyx_v_aa * __pyx_cur_scope->__pyx_v_g);
          }
        }
        __pyx_L51:;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":920
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w             # <<<<<<<<<<<<<<
 *                                               for i in range(P.size())])
 *             aa = tmp.dot(tmp)
 */
      __pyx_t_11 = PyFloat_FromDouble(((1. / ((double)__pyx_cur_scope->__pyx_v_T)) / ((double)(1.0 - __pyx_cur_scope->__pyx_v_g)))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_np); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_sum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      { /* enter inner scope */
        __pyx_t_29 = PyList_New(0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 920, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);

        /* "caiman/source_extraction/cnmf/oasis.pyx":921
 *                         aa *= g
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w
 *                                               for i in range(P.size())])             # <<<<<<<<<<<<<<
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)
 */
        __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
        __pyx_t_20 = __pyx_t_19;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
          __pyx_8genexpr5__pyx_v_i = __pyx_t_1;

          /* "caiman/source_extraction/cnmf/oasis.pyx":920
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w             # <<<<<<<<<<<<<<
 *                                               for i in range(P.size())])
 *             aa = tmp.dot(tmp)
 */
          __pyx_t_4 = PyFloat_FromDouble((pow((1.0 - pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_8genexpr5__pyx_v_i]).l))), 2.0) / ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_8genexpr5__pyx_v_i]).w))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 920, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_29, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 920, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
      } /* exit inner scope */
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_29};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 920, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_tmp), __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 920, __pyx_L1_error)
      __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_v_tmp, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          }
          __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
        }
        __pyx_pybuffernd_tmp.diminfo[0].strides = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_tmp.diminfo[0].shape = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 920, __pyx_L1_error)
      }
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_tmp, ((PyArrayObject *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":922
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w
 *                                               for i in range(P.size())])
 *             aa = tmp.dot(tmp)             # <<<<<<<<<<<<<<
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmp), __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 922, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, ((PyObject *)__pyx_v_tmp)};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 922, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_aa = __pyx_t_18;

      /* "caiman/source_extraction/cnmf/oasis.pyx":923
 *                                               for i in range(P.size())])
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)             # <<<<<<<<<<<<<<
 *             cc = RSS - thresh
 *             if bb * bb - aa * cc > 0:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, ((PyObject *)__pyx_v_tmp)};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_bb = __pyx_t_18;

      /* "caiman/source_extraction/cnmf/oasis.pyx":924
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh             # <<<<<<<<<<<<<<
 *             if bb * bb - aa * cc > 0:
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa
 */
      __pyx_v_cc = (__pyx_v_RSS - __pyx_v_thresh);

      /* "caiman/source_extraction/cnmf/oasis.pyx":925
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 *             if bb * bb - aa * cc > 0:             # <<<<<<<<<<<<<<
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             else:
 */
      __pyx_t_15 = (((__pyx_v_bb * __pyx_v_bb) - (__pyx_v_aa * __pyx_v_cc)) > 0.0);
      if (__pyx_t_15) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":926
 *             cc = RSS - thresh
 *             if bb * bb - aa * cc > 0:
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa             # <<<<<<<<<<<<<<
 *             else:
 *                 dphi = -bb / aa
 */
        __pyx_v_dphi = (((-__pyx_v_bb) + sqrt(((__pyx_v_bb * __pyx_v_bb) - (__pyx_v_aa * __pyx_v_cc)))) / ((double)__pyx_v_aa));

        /* "caiman/source_extraction/cnmf/oasis.pyx":925
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 *             if bb * bb - aa * cc > 0:             # <<<<<<<<<<<<<<
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             else:
 */
        goto __pyx_L58;
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":928
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             else:
 *                 dphi = -bb / aa             # <<<<<<<<<<<<<<
 *             if b_nonneg:
 *                 dphi = fmax(dphi, -b / (1 - g))
 */
      /*else*/ {
        __pyx_v_dphi = ((-__pyx_v_bb) / __pyx_v_aa);
      }
      __pyx_L58:;

      /* "caiman/source_extraction/cnmf/oasis.pyx":929
 *             else:
 *                 dphi = -bb / aa
 *             if b_nonneg:             # <<<<<<<<<<<<<<
 *                 dphi = fmax(dphi, -b / (1 - g))
 *             b += dphi * (1 - g)
 */
      __pyx_t_15 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 929, __pyx_L1_error)
      if (__pyx_t_15) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":930
 *                 dphi = -bb / aa
 *             if b_nonneg:
 *                 dphi = fmax(dphi, -b / (1 - g))             # <<<<<<<<<<<<<<
 *             b += dphi * (1 - g)
 *             for i in range(P.size()):  # perform shift
 */
        __pyx_v_dphi = fmax(__pyx_v_dphi, ((-__pyx_cur_scope->__pyx_v_b) / (1.0 - __pyx_cur_scope->__pyx_v_g)));

        /* "caiman/source_extraction/cnmf/oasis.pyx":929
 *             else:
 *                 dphi = -bb / aa
 *             if b_nonneg:             # <<<<<<<<<<<<<<
 *                 dphi = fmax(dphi, -b / (1 - g))
 *             b += dphi * (1 - g)
 */
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":931
 *             if b_nonneg:
 *                 dphi = fmax(dphi, -b / (1 - g))
 *             b += dphi * (1 - g)             # <<<<<<<<<<<<<<
 *             for i in range(P.size()):  # perform shift
 *                 P[i].v -= dphi * (1 - g**P[i].l)
 */
      __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_b + (__pyx_v_dphi * (1.0 - __pyx_cur_scope->__pyx_v_g)));

      /* "caiman/source_extraction/cnmf/oasis.pyx":932
 *                 dphi = fmax(dphi, -b / (1 - g))
 *             b += dphi * (1 - g)
 *             for i in range(P.size()):  # perform shift             # <<<<<<<<<<<<<<
 *                 P[i].v -= dphi * (1 - g**P[i].l)
 *             c, P = oasis(P, g, c)
 */
      __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
        __pyx_cur_scope->__pyx_v_i = __pyx_t_1;

        /* "caiman/source_extraction/cnmf/oasis.pyx":933
 *             b += dphi * (1 - g)
 *             for i in range(P.size()):  # perform shift
 *                 P[i].v -= dphi * (1 - g**P[i].l)             # <<<<<<<<<<<<<<
 *             c, P = oasis(P, g, c)
 *             # update b and lam
 */
        __pyx_t_21 = __pyx_cur_scope->__pyx_v_i;
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v - (__pyx_v_dphi * (1.0 - pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l)))));
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":934
 *             for i in range(P.size()):  # perform shift
 *                 P[i].v -= dphi * (1 - g**P[i].l)
 *             c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 *             # update b and lam
 *             db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 */
      __pyx_t_3 = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 934, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
        PyObject* sequence = __pyx_t_3;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 934, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_29 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_29);
        index = 0; __pyx_t_5 = __pyx_t_16(__pyx_t_29); if (unlikely(!__pyx_t_5)) goto __pyx_L62_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_11 = __pyx_t_16(__pyx_t_29); if (unlikely(!__pyx_t_11)) goto __pyx_L62_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_29), 2) < 0) __PYX_ERR(0, 934, __pyx_L1_error)
        __pyx_t_16 = NULL;
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        goto __pyx_L63_unpacking_done;
        __pyx_L62_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __pyx_t_16 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 934, __pyx_L1_error)
        __pyx_L63_unpacking_done:;
      }
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 934, __pyx_L1_error)
      __pyx_t_17 = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 934, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_7 = ((PyArrayObject *)__pyx_t_5);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
          }
          __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
        }
        __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 934, __pyx_L1_error)
      }
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_5));
      __pyx_t_5 = 0;
      __pyx_cur_scope->__pyx_v_P = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

      /* "caiman/source_extraction/cnmf/oasis.pyx":936
 *             c, P = oasis(P, g, c)
 *             # update b and lam
 *             db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b             # <<<<<<<<<<<<<<
 *             b += db
 *             dlam = -db / (1 - g)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 936, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_mean); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 936, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 936, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_29 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_29)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_29);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_29, __pyx_t_11};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 936, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_31 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_31 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_15 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 936, __pyx_L1_error)
      if (__pyx_t_15) {
        __pyx_t_30 = 0.0;
      } else {
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 936, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_inf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 936, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Negative(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 936, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_32 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_32 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_30 = __pyx_t_32;
      }
      __pyx_v_db = (fmax(__pyx_t_31, __pyx_t_30) - __pyx_cur_scope->__pyx_v_b);

      /* "caiman/source_extraction/cnmf/oasis.pyx":937
 *             # update b and lam
 *             db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *             b += db             # <<<<<<<<<<<<<<
 *             dlam = -db / (1 - g)
 *             lam += dlam
 */
      __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_b + __pyx_v_db);

      /* "caiman/source_extraction/cnmf/oasis.pyx":938
 *             db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *             b += db
 *             dlam = -db / (1 - g)             # <<<<<<<<<<<<<<
 *             lam += dlam
 *             # correct last pool
 */
      __pyx_v_dlam = ((-__pyx_v_db) / (1.0 - __pyx_cur_scope->__pyx_v_g));

      /* "caiman/source_extraction/cnmf/oasis.pyx":939
 *             b += db
 *             dlam = -db / (1 - g)
 *             lam += dlam             # <<<<<<<<<<<<<<
 *             # correct last pool
 *             i = P.size() - 1
 */
      __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam + __pyx_v_dlam);

      /* "caiman/source_extraction/cnmf/oasis.pyx":941
 *             lam += dlam
 *             # correct last pool
 *             i = P.size() - 1             # <<<<<<<<<<<<<<
 *             P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1
 *             c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 */
      __pyx_cur_scope->__pyx_v_i = (__pyx_cur_scope->__pyx_v_P.size() - 1);

      /* "caiman/source_extraction/cnmf/oasis.pyx":942
 *             # correct last pool
 *             i = P.size() - 1
 *             P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *             c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 * 
 */
      __pyx_t_1 = __pyx_cur_scope->__pyx_v_i;
      (__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v - (__pyx_v_dlam * pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l))));

      /* "caiman/source_extraction/cnmf/oasis.pyx":943
 *             i = P.size() - 1
 *             P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1
 *             c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]             # <<<<<<<<<<<<<<
 * 
 *             # update g and b
 */
      __pyx_t_3 = PyFloat_FromDouble((fmax(0.0, (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).v) / ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = PySlice_New(Py_None, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_h), __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_29 = PySlice_New(__pyx_t_5, __pyx_t_3, Py_None); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely((PyObject_SetItem(((PyObject *)__pyx_v_c), __pyx_t_29, __pyx_t_11) < 0))) __PYX_ERR(0, 943, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":946
 * 
 *             # update g and b
 *             if optimize_g and count < max_iter - 1 and (not g_converged):             # <<<<<<<<<<<<<<
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 */
      __pyx_t_25 = (__pyx_cur_scope->__pyx_v_optimize_g != 0);
      if (__pyx_t_25) {
      } else {
        __pyx_t_15 = __pyx_t_25;
        goto __pyx_L65_bool_binop_done;
      }
      __pyx_t_25 = (__pyx_v_count < (__pyx_v_max_iter - 1));
      if (__pyx_t_25) {
      } else {
        __pyx_t_15 = __pyx_t_25;
        goto __pyx_L65_bool_binop_done;
      }
      __pyx_t_25 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_g_converged)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 946, __pyx_L1_error)
      __pyx_t_2 = (!__pyx_t_25);
      __pyx_t_15 = __pyx_t_2;
      __pyx_L65_bool_binop_done:;
      if (__pyx_t_15) {

        /* "caiman/source_extraction/cnmf/oasis.pyx":947
 *             # update g and b
 *             if optimize_g and count < max_iter - 1 and (not g_converged):
 *                 ma = max([P[i].l for i in range(P.size())])             # <<<<<<<<<<<<<<
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 */
        { /* enter inner scope */
          __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 947, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
          __pyx_t_20 = __pyx_t_19;
          for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
            __pyx_8genexpr6__pyx_v_i = __pyx_t_1;
            __pyx_t_29 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_8genexpr6__pyx_v_i]).l); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 947, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_29);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_t_29))) __PYX_ERR(0, 947, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          }
        } /* exit inner scope */
        __pyx_t_29 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_11); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_26 = __Pyx_PyInt_As_unsigned_int(__pyx_t_29); if (unlikely((__pyx_t_26 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __pyx_cur_scope->__pyx_v_ma = __pyx_t_26;

        /* "caiman/source_extraction/cnmf/oasis.pyx":948
 *             if optimize_g and count < max_iter - 1 and (not g_converged):
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])             # <<<<<<<<<<<<<<
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_argsort); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        { /* enter inner scope */
          __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 948, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
          __pyx_t_20 = __pyx_t_19;
          for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
            __pyx_8genexpr7__pyx_v_i = __pyx_t_1;
            __pyx_t_5 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_P[__pyx_8genexpr7__pyx_v_i]).v); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 948, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 948, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
        } /* exit inner scope */
        __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_11};
          __pyx_t_29 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 948, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_29);
        __pyx_t_29 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":949
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]             # <<<<<<<<<<<<<<
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 */
        { /* enter inner scope */
          __pyx_t_29 = PyList_New(0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 949, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_idx, (-__pyx_cur_scope->__pyx_v_optimize_g), 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 949, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
            __pyx_t_11 = __pyx_t_3; __Pyx_INCREF(__pyx_t_11);
            __pyx_t_1 = 0;
            __pyx_t_27 = NULL;
          } else {
            __pyx_t_1 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 949, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 949, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          for (;;) {
            if (likely(!__pyx_t_27)) {
              if (likely(PyList_CheckExact(__pyx_t_11))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 949, __pyx_L1_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 949, __pyx_L1_error)
                #else
                __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 949, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 949, __pyx_L1_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 949, __pyx_L1_error)
                #else
                __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 949, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              }
            } else {
              __pyx_t_3 = __pyx_t_27(__pyx_t_11);
              if (unlikely(!__pyx_t_3)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 949, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_3);
            }
            __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_8genexpr8__pyx_v_i = __pyx_t_21;
            __pyx_t_3 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_8genexpr8__pyx_v_i]).t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 949, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_29, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 949, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_Pt, ((PyObject*)__pyx_t_29));
        __pyx_t_29 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":950
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]             # <<<<<<<<<<<<<<
 * 
 *                 def bar(y, opt, Pt, Pl):
 */
        { /* enter inner scope */
          __pyx_t_29 = PyList_New(0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 950, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_v_idx, (-__pyx_cur_scope->__pyx_v_optimize_g), 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 950, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
            __pyx_t_3 = __pyx_t_11; __Pyx_INCREF(__pyx_t_3);
            __pyx_t_1 = 0;
            __pyx_t_27 = NULL;
          } else {
            __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 950, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 950, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          for (;;) {
            if (likely(!__pyx_t_27)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 950, __pyx_L1_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_11); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 950, __pyx_L1_error)
                #else
                __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 950, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 950, __pyx_L1_error)
                  #endif
                  if (__pyx_t_1 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_11); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 950, __pyx_L1_error)
                #else
                __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 950, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              }
            } else {
              __pyx_t_11 = __pyx_t_27(__pyx_t_3);
              if (unlikely(!__pyx_t_11)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 950, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_11);
            }
            __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_8genexpr9__pyx_v_i = __pyx_t_21;
            __pyx_t_11 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_8genexpr9__pyx_v_i]).l); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 950, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_29, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 950, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_Pl, ((PyObject*)__pyx_t_29));
        __pyx_t_29 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":952
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */
        __pyx_t_29 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_9bar, 0, __pyx_n_s_constrained_oasisAR1_locals_bar_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 952, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bar);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bar, __pyx_t_29);
        __Pyx_GIVEREF(__pyx_t_29);
        __pyx_t_29 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":968
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */
        __pyx_t_29 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_11baz, 0, __pyx_n_s_constrained_oasisAR1_locals_baz_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 968, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_XDECREF_SET(__pyx_v_baz, __pyx_t_29);
        __pyx_t_29 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":973
 *                                     method='L-BFGS-B',
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 *                 result = baz(y, Pt, Pl)             # <<<<<<<<<<<<<<
 *                 if fabs(result['x'][1] - g) < 1e-3:
 *                     g_converged = True
 */
        __pyx_t_29 = PyTuple_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 973, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_INCREF((PyObject *)__pyx_v_y);
        __Pyx_GIVEREF((PyObject *)__pyx_v_y);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, ((PyObject *)__pyx_v_y))) __PYX_ERR(0, 973, __pyx_L1_error);
        __Pyx_INCREF(__pyx_v_Pt);
        __Pyx_GIVEREF(__pyx_v_Pt);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_v_Pt)) __PYX_ERR(0, 973, __pyx_L1_error);
        __Pyx_INCREF(__pyx_v_Pl);
        __Pyx_GIVEREF(__pyx_v_Pl);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_v_Pl)) __PYX_ERR(0, 973, __pyx_L1_error);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_baz, __pyx_t_29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __Pyx_XDECREF_SET(__pyx_v_result, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":974
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 *                 result = baz(y, Pt, Pl)
 *                 if fabs(result['x'][1] - g) < 1e-3:             # <<<<<<<<<<<<<<
 *                     g_converged = True
 *                 b, g = result['x']
 */
        __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_result, __pyx_n_u_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_29 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = PyNumber_Subtract(__pyx_t_29, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_30 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_30 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 974, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_15 = (fabs(__pyx_t_30) < 1e-3);
        if (__pyx_t_15) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":975
 *                 result = baz(y, Pt, Pl)
 *                 if fabs(result['x'][1] - g) < 1e-3:
 *                     g_converged = True             # <<<<<<<<<<<<<<
 *                 b, g = result['x']
 *                 # explicit kernel, useful for constructing c
 */
          __Pyx_INCREF(Py_True);
          __Pyx_DECREF_SET(__pyx_v_g_converged, ((PyBoolObject *)Py_True));

          /* "caiman/source_extraction/cnmf/oasis.pyx":974
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 *                 result = baz(y, Pt, Pl)
 *                 if fabs(result['x'][1] - g) < 1e-3:             # <<<<<<<<<<<<<<
 *                     g_converged = True
 *                 b, g = result['x']
 */
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":976
 *                 if fabs(result['x'][1] - g) < 1e-3:
 *                     g_converged = True
 *                 b, g = result['x']             # <<<<<<<<<<<<<<
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 */
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_result, __pyx_n_u_x); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 976, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
          PyObject* sequence = __pyx_t_11;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 976, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_29 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_29 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_29);
          #else
          __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 976, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_29 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 976, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          #endif
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 976, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
          index = 0; __pyx_t_3 = __pyx_t_16(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L79_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_3);
          index = 1; __pyx_t_29 = __pyx_t_16(__pyx_t_5); if (unlikely(!__pyx_t_29)) goto __pyx_L79_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_29);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_5), 2) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
          __pyx_t_16 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L80_unpacking_done;
          __pyx_L79_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_16 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 976, __pyx_L1_error)
          __pyx_L80_unpacking_done:;
        }
        __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 976, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_29); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 976, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __pyx_cur_scope->__pyx_v_b = __pyx_t_18;
        __pyx_cur_scope->__pyx_v_g = __pyx_t_33;

        /* "caiman/source_extraction/cnmf/oasis.pyx":978
 *                 b, g = result['x']
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))             # <<<<<<<<<<<<<<
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 */
        __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_np); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_exp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __pyx_t_29 = PyFloat_FromDouble(log(__pyx_cur_scope->__pyx_v_g)); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_arange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_5);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5)) __PYX_ERR(0, 978, __pyx_L1_error);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_28 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_float32); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_28) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_12, __pyx_t_5); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_29, __pyx_t_28); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 978, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        __pyx_t_28 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_28)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_28);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_28, __pyx_t_5};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 978, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 978, __pyx_L1_error)
        __pyx_t_7 = ((PyArrayObject *)__pyx_t_11);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
          __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_6 < 0)) {
            PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_v_h, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
            }
            __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
          }
          __pyx_pybuffernd_h.diminfo[0].strides = __pyx_pybuffernd_h.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_h.diminfo[0].shape = __pyx_pybuffernd_h.rcbuffer->pybuffer.shape[0];
          if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 978, __pyx_L1_error)
        }
        __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":979
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *                 for i in range(P.size()):             # <<<<<<<<<<<<<<
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \
 */
        __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
        __pyx_t_20 = __pyx_t_19;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
          __pyx_cur_scope->__pyx_v_i = __pyx_t_1;

          /* "caiman/source_extraction/cnmf/oasis.pyx":980
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]             # <<<<<<<<<<<<<<
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 */
          __pyx_t_11 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 980, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_3 = PySlice_New(Py_None, __pyx_t_11, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 980, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_h), __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 980, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "caiman/source_extraction/cnmf/oasis.pyx":981
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \             # <<<<<<<<<<<<<<
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 981, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_5 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 981, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_28 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l)); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 981, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_28);
          __pyx_t_29 = PySlice_New(__pyx_t_5, __pyx_t_28, Py_None); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 981, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
          __pyx_t_28 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_y), __pyx_t_29); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 981, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_28);
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          __pyx_t_29 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_29)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_29);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_29, __pyx_t_28};
            __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 981, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }

          /* "caiman/source_extraction/cnmf/oasis.pyx":982
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)             # <<<<<<<<<<<<<<
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 */
          __pyx_t_3 = PyFloat_FromDouble((((__pyx_cur_scope->__pyx_v_b / (1.0 - __pyx_cur_scope->__pyx_v_g)) + __pyx_cur_scope->__pyx_v_lam) * (1.0 - pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l))))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 982, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "caiman/source_extraction/cnmf/oasis.pyx":981
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \             # <<<<<<<<<<<<<<
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 */
          __pyx_t_28 = PyNumber_Subtract(__pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 981, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_28);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_28); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 981, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
          (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).v = __pyx_t_33;

          /* "caiman/source_extraction/cnmf/oasis.pyx":983
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)             # <<<<<<<<<<<<<<
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *                 c, P = oasis(P, g, c)
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 983, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_11 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_v_q};
            __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 983, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_28);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_28); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
          (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w = __pyx_t_33;
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":984
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                 c, P = oasis(P, g, c)
 *                 # update b and lam
 */
        __pyx_t_19 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_19]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_19]).v - (__pyx_cur_scope->__pyx_v_lam * pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[(__pyx_cur_scope->__pyx_v_P.size() - 1)]).l))));

        /* "caiman/source_extraction/cnmf/oasis.pyx":985
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *                 c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 *                 # update b and lam
 *                 db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 */
        __pyx_t_28 = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 985, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        if ((likely(PyTuple_CheckExact(__pyx_t_28))) || (PyList_CheckExact(__pyx_t_28))) {
          PyObject* sequence = __pyx_t_28;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 985, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          #else
          __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 985, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_29 = PyObject_GetIter(__pyx_t_28); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 985, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
          __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_29);
          index = 0; __pyx_t_3 = __pyx_t_16(__pyx_t_29); if (unlikely(!__pyx_t_3)) goto __pyx_L83_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_3);
          index = 1; __pyx_t_11 = __pyx_t_16(__pyx_t_29); if (unlikely(!__pyx_t_11)) goto __pyx_L83_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_29), 2) < 0) __PYX_ERR(0, 985, __pyx_L1_error)
          __pyx_t_16 = NULL;
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          goto __pyx_L84_unpacking_done;
          __pyx_L83_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          __pyx_t_16 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 985, __pyx_L1_error)
          __pyx_L84_unpacking_done:;
        }
        if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 985, __pyx_L1_error)
        __pyx_t_17 = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 985, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
          __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_6 < 0)) {
            PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
            }
            __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
          }
          __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
          if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 985, __pyx_L1_error)
        }
        __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_3));
        __pyx_t_3 = 0;
        __pyx_cur_scope->__pyx_v_P = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

        /* "caiman/source_extraction/cnmf/oasis.pyx":987
 *                 c, P = oasis(P, g, c)
 *                 # update b and lam
 *                 db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b             # <<<<<<<<<<<<<<
 *                 b += db
 *                 dlam = -db / (1 - g)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 987, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_mean); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 987, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 987, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_29 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_29)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_29);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_29, __pyx_t_11};
          __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 987, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_28);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_30 = __pyx_PyFloat_AsDouble(__pyx_t_28); if (unlikely((__pyx_t_30 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 987, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        __pyx_t_15 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 987, __pyx_L1_error)
        if (__pyx_t_15) {
          __pyx_t_31 = 0.0;
        } else {
          __Pyx_GetModuleGlobalName(__pyx_t_28, __pyx_n_s_np); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 987, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_28);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_inf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 987, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
          __pyx_t_28 = PyNumber_Negative(__pyx_t_3); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 987, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_28);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_32 = __pyx_PyFloat_AsDouble(__pyx_t_28); if (unlikely((__pyx_t_32 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 987, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
          __pyx_t_31 = __pyx_t_32;
        }
        __pyx_v_db = (fmax(__pyx_t_30, __pyx_t_31) - __pyx_cur_scope->__pyx_v_b);

        /* "caiman/source_extraction/cnmf/oasis.pyx":988
 *                 # update b and lam
 *                 db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *                 b += db             # <<<<<<<<<<<<<<
 *                 dlam = -db / (1 - g)
 *                 lam += dlam
 */
        __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_b + __pyx_v_db);

        /* "caiman/source_extraction/cnmf/oasis.pyx":989
 *                 db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *                 b += db
 *                 dlam = -db / (1 - g)             # <<<<<<<<<<<<<<
 *                 lam += dlam
 *                 # correct last pool
 */
        __pyx_v_dlam = ((-__pyx_v_db) / (1.0 - __pyx_cur_scope->__pyx_v_g));

        /* "caiman/source_extraction/cnmf/oasis.pyx":990
 *                 b += db
 *                 dlam = -db / (1 - g)
 *                 lam += dlam             # <<<<<<<<<<<<<<
 *                 # correct last pool
 *                 i = P.size() - 1
 */
        __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam + __pyx_v_dlam);

        /* "caiman/source_extraction/cnmf/oasis.pyx":992
 *                 lam += dlam
 *                 # correct last pool
 *                 i = P.size() - 1             # <<<<<<<<<<<<<<
 *                 P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1
 *                 c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 */
        __pyx_cur_scope->__pyx_v_i = (__pyx_cur_scope->__pyx_v_P.size() - 1);

        /* "caiman/source_extraction/cnmf/oasis.pyx":993
 *                 # correct last pool
 *                 i = P.size() - 1
 *                 P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                 c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 * 
 */
        __pyx_t_1 = __pyx_cur_scope->__pyx_v_i;
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v - (__pyx_v_dlam * pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l))));

        /* "caiman/source_extraction/cnmf/oasis.pyx":994
 *                 i = P.size() - 1
 *                 P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1
 *                 c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]             # <<<<<<<<<<<<<<
 * 
 *             # calc RSS
 */
        __pyx_t_28 = PyFloat_FromDouble((fmax(0.0, (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).v) / ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w))); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __pyx_t_3 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = PySlice_New(Py_None, __pyx_t_3, Py_None); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_h), __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Multiply(__pyx_t_28, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_28 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l)); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __pyx_t_29 = PySlice_New(__pyx_t_3, __pyx_t_28, Py_None); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        if (unlikely((PyObject_SetItem(((PyObject *)__pyx_v_c), __pyx_t_29, __pyx_t_11) < 0))) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":946
 * 
 *             # update g and b
 *             if optimize_g and count < max_iter - 1 and (not g_converged):             # <<<<<<<<<<<<<<
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 */
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":997
 * 
 *             # calc RSS
 *             res = y - c - b             # <<<<<<<<<<<<<<
 *             RSS = res.dot(res)
 * 
 */
      __pyx_t_11 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 997, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_29 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 997, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_28 = PyNumber_Subtract(__pyx_t_11, __pyx_t_29); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 997, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      if (!(likely(((__pyx_t_28) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_28, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 997, __pyx_L1_error)
      __pyx_t_7 = ((PyArrayObject *)__pyx_t_28);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          }
          __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
        }
        __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 997, __pyx_L1_error)
      }
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_res, ((PyArrayObject *)__pyx_t_28));
      __pyx_t_28 = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":998
 *             # calc RSS
 *             res = y - c - b
 *             RSS = res.dot(res)             # <<<<<<<<<<<<<<
 * 
 *     if decimate > 1:  # deal with full data
 */
      __pyx_t_29 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_11 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_29))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_29);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_29);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_29, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, ((PyObject *)__pyx_v_res)};
        __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_29, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 998, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      }
      __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_28); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
      __pyx_v_RSS = __pyx_t_33;
    }
  }
  __pyx_L4:;

  /* "caiman/source_extraction/cnmf/oasis.pyx":1000
 *             RSS = res.dot(res)
 * 
 *     if decimate > 1:  # deal with full data             # <<<<<<<<<<<<<<
 *         y = fluor
 *         lam *= (1 - g)
 */
  __pyx_t_15 = (__pyx_v_decimate > 1);
  if (__pyx_t_15) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":1001
 * 
 *     if decimate > 1:  # deal with full data
 *         y = fluor             # <<<<<<<<<<<<<<
 *         lam *= (1 - g)
 *         g = g**(1. / decimate)
 */
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_v_fluor), &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1001, __pyx_L1_error)
    }
    __Pyx_INCREF((PyObject *)__pyx_v_fluor);
    __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_v_fluor));

    /* "caiman/source_extraction/cnmf/oasis.pyx":1002
 *     if decimate > 1:  # deal with full data
 *         y = fluor
 *         lam *= (1 - g)             # <<<<<<<<<<<<<<
 *         g = g**(1. / decimate)
 *         lam /= (1 - g)
 */
    __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam * (1.0 - __pyx_cur_scope->__pyx_v_g));

    /* "caiman/source_extraction/cnmf/oasis.pyx":1003
 *         y = fluor
 *         lam *= (1 - g)
 *         g = g**(1. / decimate)             # <<<<<<<<<<<<<<
 *         lam /= (1 - g)
 *         thresh = thresh * decimate * decimate
 */
    __pyx_cur_scope->__pyx_v_g = pow(((double)__pyx_cur_scope->__pyx_v_g), (1. / ((double)__pyx_v_decimate)));

    /* "caiman/source_extraction/cnmf/oasis.pyx":1004
 *         lam *= (1 - g)
 *         g = g**(1. / decimate)
 *         lam /= (1 - g)             # <<<<<<<<<<<<<<
 *         thresh = thresh * decimate * decimate
 *         T = len(fluor)
 */
    __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam / (1.0 - __pyx_cur_scope->__pyx_v_g));

    /* "caiman/source_extraction/cnmf/oasis.pyx":1005
 *         g = g**(1. / decimate)
 *         lam /= (1 - g)
 *         thresh = thresh * decimate * decimate             # <<<<<<<<<<<<<<
 *         T = len(fluor)
 *         # warm-start active set
 */
    __pyx_v_thresh = ((__pyx_v_thresh * __pyx_v_decimate) * __pyx_v_decimate);

    /* "caiman/source_extraction/cnmf/oasis.pyx":1006
 *         lam /= (1 - g)
 *         thresh = thresh * decimate * decimate
 *         T = len(fluor)             # <<<<<<<<<<<<<<
 *         # warm-start active set
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)
 */
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_fluor)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1006, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_T = __pyx_t_1;

    /* "caiman/source_extraction/cnmf/oasis.pyx":1008
 *         T = len(fluor)
 *         # warm-start active set
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)             # <<<<<<<<<<<<<<
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_np); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_ravel); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    { /* enter inner scope */
      __pyx_t_29 = PyList_New(0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);

      /* "caiman/source_extraction/cnmf/oasis.pyx":1009
 *         # warm-start active set
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient             # <<<<<<<<<<<<<<
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])
 */
      __pyx_t_19 = __pyx_cur_scope->__pyx_v_P.size();
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
        __pyx_9genexpr11__pyx_v_i = __pyx_t_1;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1008
 *         T = len(fluor)
 *         # warm-start active set
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)             # <<<<<<<<<<<<<<
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 */
        __pyx_t_3 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_9genexpr11__pyx_v_i]).t * __pyx_v_decimate)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_arange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyInt_From_int((-__pyx_v_decimate)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = __Pyx_PyInt_From_long(((3 * __pyx_v_decimate) / 2)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_34 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_34 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_34)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_34);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_34, __pyx_t_12, __pyx_t_14};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_34); __pyx_t_34 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1008, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_29, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1008, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_29};
      __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    if (!(likely(((__pyx_t_28) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_28, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1008, __pyx_L1_error)
    __pyx_t_35 = ((PyArrayObject *)__pyx_t_28);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ff.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ff.rcbuffer->pybuffer, (PyObject*)__pyx_t_35, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ff.rcbuffer->pybuffer, (PyObject*)__pyx_v_ff, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_ff.diminfo[0].strides = __pyx_pybuffernd_ff.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ff.diminfo[0].shape = __pyx_pybuffernd_ff.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1008, __pyx_L1_error)
    }
    __pyx_t_35 = 0;
    __pyx_v_ff = ((PyArrayObject *)__pyx_t_28);
    __pyx_t_28 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":1010
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])             # <<<<<<<<<<<<<<
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_unique); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyObject_RichCompare(((PyObject *)__pyx_v_ff), __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_ff), __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_11, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_ff), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_29))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_29);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_29);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_29, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_29, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    }
    if (!(likely(((__pyx_t_28) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_28, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1010, __pyx_L1_error)
    __pyx_t_35 = ((PyArrayObject *)__pyx_t_28);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ff.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ff.rcbuffer->pybuffer, (PyObject*)__pyx_t_35, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ff.rcbuffer->pybuffer, (PyObject*)__pyx_v_ff, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_ff.diminfo[0].strides = __pyx_pybuffernd_ff.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ff.diminfo[0].shape = __pyx_pybuffernd_ff.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1010, __pyx_L1_error)
    }
    __pyx_t_35 = 0;
    __Pyx_DECREF_SET(__pyx_v_ff, ((PyArrayObject *)__pyx_t_28));
    __pyx_t_28 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":1011
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])             # <<<<<<<<<<<<<<
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *         P.resize(0)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_np); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1011, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_append); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1011, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __pyx_t_29 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_ff), __pyx_slice__7); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1011, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_ff), __pyx_slice__8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1011, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = PyNumber_Subtract(__pyx_t_29, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1011, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_24 = -1L;
    __pyx_t_6 = -1;
    if (__pyx_t_24 < 0) {
      __pyx_t_24 += __pyx_pybuffernd_ff.diminfo[0].shape;
      if (unlikely(__pyx_t_24 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_ff.diminfo[0].shape)) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 1011, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_cur_scope->__pyx_v_T - (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ff.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_ff.diminfo[0].strides)))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1011, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_29 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_29)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_29);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_29, __pyx_t_11, __pyx_t_4};
      __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if (!(likely(((__pyx_t_28) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_28, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1011, __pyx_L1_error)
    __pyx_t_35 = ((PyArrayObject *)__pyx_t_28);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ll.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ll.rcbuffer->pybuffer, (PyObject*)__pyx_t_35, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ll.rcbuffer->pybuffer, (PyObject*)__pyx_v_ll, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_ll.diminfo[0].strides = __pyx_pybuffernd_ll.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ll.diminfo[0].shape = __pyx_pybuffernd_ll.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1011, __pyx_L1_error)
    }
    __pyx_t_35 = 0;
    __pyx_v_ll = ((PyArrayObject *)__pyx_t_28);
    __pyx_t_28 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":1012
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))             # <<<<<<<<<<<<<<
 *         P.resize(0)
 *         for i in range(len(ff)):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(log(__pyx_cur_scope->__pyx_v_g)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_arange); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_11);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_11)) __PYX_ERR(0, 1012, __pyx_L1_error);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_float32); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_12) < 0) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_3, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Multiply(__pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
      __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1012, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    if (!(likely(((__pyx_t_28) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_28, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1012, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_28);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_v_h, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_h.diminfo[0].strides = __pyx_pybuffernd_h.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_h.diminfo[0].shape = __pyx_pybuffernd_h.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1012, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_28));
    __pyx_t_28 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":1013
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *         P.resize(0)             # <<<<<<<<<<<<<<
 *         for i in range(len(ff)):
 *             q = h[:ll[i]]
 */
    try {
      __pyx_cur_scope->__pyx_v_P.resize(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1013, __pyx_L1_error)
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":1014
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *         P.resize(0)
 *         for i in range(len(ff)):             # <<<<<<<<<<<<<<
 *             q = h[:ll[i]]
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])
 */
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_ff)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1014, __pyx_L1_error)
    __pyx_t_21 = __pyx_t_1;
    for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
      __pyx_cur_scope->__pyx_v_i = __pyx_t_22;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1015
 *         P.resize(0)
 *         for i in range(len(ff)):
 *             q = h[:ll[i]]             # <<<<<<<<<<<<<<
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])
 *             newpool.w = q.dot(q)
 */
      __pyx_t_24 = __pyx_cur_scope->__pyx_v_i;
      __pyx_t_6 = -1;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_pybuffernd_ll.diminfo[0].shape;
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_ll.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 1015, __pyx_L1_error)
      }
      __pyx_t_28 = __Pyx_PyInt_From_long((*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ll.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_ll.diminfo[0].strides))); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __pyx_t_4 = PySlice_New(Py_None, __pyx_t_28, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
      __pyx_t_28 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_h), __pyx_t_4); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_28);
      __pyx_t_28 = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1016
 *         for i in range(len(ff)):
 *             q = h[:ll[i]]
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])             # <<<<<<<<<<<<<<
 *             newpool.w = q.dot(q)
 *             newpool.t = ff[i]
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_24 = __pyx_cur_scope->__pyx_v_i;
      __pyx_t_6 = -1;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_pybuffernd_ff.diminfo[0].shape;
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_ff.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 1016, __pyx_L1_error)
      }
      __pyx_t_11 = __Pyx_PyInt_From_long((*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ff.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_ff.diminfo[0].strides))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_24 = __pyx_cur_scope->__pyx_v_i;
      __pyx_t_6 = -1;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_pybuffernd_ff.diminfo[0].shape;
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_ff.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 1016, __pyx_L1_error)
      }
      __pyx_t_36 = __pyx_cur_scope->__pyx_v_i;
      __pyx_t_6 = -1;
      if (__pyx_t_36 < 0) {
        __pyx_t_36 += __pyx_pybuffernd_ll.diminfo[0].shape;
        if (unlikely(__pyx_t_36 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_36 >= __pyx_pybuffernd_ll.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 1016, __pyx_L1_error)
      }
      __pyx_t_12 = __Pyx_PyInt_From_long(((*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ff.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_ff.diminfo[0].strides)) + (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ll.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_ll.diminfo[0].strides)))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_5 = PySlice_New(__pyx_t_11, __pyx_t_12, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_fluor), __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_12};
        __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1016, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_36 = __pyx_cur_scope->__pyx_v_i;
      __pyx_t_6 = -1;
      if (__pyx_t_36 < 0) {
        __pyx_t_36 += __pyx_pybuffernd_ll.diminfo[0].shape;
        if (unlikely(__pyx_t_36 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_36 >= __pyx_pybuffernd_ll.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 1016, __pyx_L1_error)
      }
      __pyx_t_4 = PyFloat_FromDouble((((__pyx_cur_scope->__pyx_v_b / (1.0 - __pyx_cur_scope->__pyx_v_g)) + __pyx_cur_scope->__pyx_v_lam) * (1.0 - pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ll.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_ll.diminfo[0].strides))))))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = PyNumber_Subtract(__pyx_t_28, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_12); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_newpool.v = __pyx_t_33;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1017
 *             q = h[:ll[i]]
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])
 *             newpool.w = q.dot(q)             # <<<<<<<<<<<<<<
 *             newpool.t = ff[i]
 *             newpool.l = ll[i]
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_28 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_28)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_28);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_28, __pyx_v_q};
        __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1017, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_12); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_newpool.w = __pyx_t_33;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1018
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])
 *             newpool.w = q.dot(q)
 *             newpool.t = ff[i]             # <<<<<<<<<<<<<<
 *             newpool.l = ll[i]
 *             P.push_back(newpool)
 */
      __pyx_t_36 = __pyx_cur_scope->__pyx_v_i;
      __pyx_t_6 = -1;
      if (__pyx_t_36 < 0) {
        __pyx_t_36 += __pyx_pybuffernd_ff.diminfo[0].shape;
        if (unlikely(__pyx_t_36 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_36 >= __pyx_pybuffernd_ff.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 1018, __pyx_L1_error)
      }
      __pyx_v_newpool.t = (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ff.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_ff.diminfo[0].strides));

      /* "caiman/source_extraction/cnmf/oasis.pyx":1019
 *             newpool.w = q.dot(q)
 *             newpool.t = ff[i]
 *             newpool.l = ll[i]             # <<<<<<<<<<<<<<
 *             P.push_back(newpool)
 *         P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 */
      __pyx_t_36 = __pyx_cur_scope->__pyx_v_i;
      __pyx_t_6 = -1;
      if (__pyx_t_36 < 0) {
        __pyx_t_36 += __pyx_pybuffernd_ll.diminfo[0].shape;
        if (unlikely(__pyx_t_36 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_36 >= __pyx_pybuffernd_ll.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 1019, __pyx_L1_error)
      }
      __pyx_v_newpool.l = (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ll.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_ll.diminfo[0].strides));

      /* "caiman/source_extraction/cnmf/oasis.pyx":1020
 *             newpool.t = ff[i]
 *             newpool.l = ll[i]
 *             P.push_back(newpool)             # <<<<<<<<<<<<<<
 *         P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *         c = np.empty(T, dtype=np.float32)
 */
      try {
        __pyx_cur_scope->__pyx_v_P.push_back(__pyx_v_newpool);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1020, __pyx_L1_error)
      }
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":1021
 *             newpool.l = ll[i]
 *             P.push_back(newpool)
 *         P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *         c = np.empty(T, dtype=np.float32)
 * 
 */
    __pyx_t_19 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
    (__pyx_cur_scope->__pyx_v_P[__pyx_t_19]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_19]).v - (__pyx_cur_scope->__pyx_v_lam * pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[(__pyx_cur_scope->__pyx_v_P.size() - 1)]).l))));

    /* "caiman/source_extraction/cnmf/oasis.pyx":1022
 *             P.push_back(newpool)
 *         P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *         c = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         c, P = oasis(P, g, c)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_28 = PyTuple_New(1); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_GIVEREF(__pyx_t_12);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_t_12)) __PYX_ERR(0, 1022, __pyx_L1_error);
    __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_28, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1022, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1022, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":1024
 *         c = np.empty(T, dtype=np.float32)
 * 
 *         c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 * 
 *     if penalty == 0:  # get (locally optimal) L0 solution
 */
    __pyx_t_11 = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
      PyObject* sequence = __pyx_t_11;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1024, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_28 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_12 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_28 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_28);
      #else
      __pyx_t_12 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_28 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      #endif
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
      index = 0; __pyx_t_12 = __pyx_t_16(__pyx_t_4); if (unlikely(!__pyx_t_12)) goto __pyx_L90_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_12);
      index = 1; __pyx_t_28 = __pyx_t_16(__pyx_t_4); if (unlikely(!__pyx_t_28)) goto __pyx_L90_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_28);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1024, __pyx_L1_error)
      __pyx_t_16 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L91_unpacking_done;
      __pyx_L90_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_16 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1024, __pyx_L1_error)
      __pyx_L91_unpacking_done:;
    }
    if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1024, __pyx_L1_error)
    __pyx_t_17 = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_t_28); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_12);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1024, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_12));
    __pyx_t_12 = 0;
    __pyx_cur_scope->__pyx_v_P = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

    /* "caiman/source_extraction/cnmf/oasis.pyx":1000
 *             RSS = res.dot(res)
 * 
 *     if decimate > 1:  # deal with full data             # <<<<<<<<<<<<<<
 *         y = fluor
 *         lam *= (1 - g)
 */
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":1026
 *         c, P = oasis(P, g, c)
 * 
 *     if penalty == 0:  # get (locally optimal) L0 solution             # <<<<<<<<<<<<<<
 *         y = y - b
 *         if s_min == 0:
 */
  __pyx_t_15 = (__pyx_v_penalty == 0);
  if (__pyx_t_15) {

    /* "caiman/source_extraction/cnmf/oasis.pyx":1027
 * 
 *     if penalty == 0:  # get (locally optimal) L0 solution
 *         y = y - b             # <<<<<<<<<<<<<<
 *         if s_min == 0:
 *             lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 */
    __pyx_t_11 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_28 = PyNumber_Subtract(((PyObject *)__pyx_v_y), __pyx_t_11); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (!(likely(((__pyx_t_28) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_28, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1027, __pyx_L1_error)
    __pyx_t_13 = ((PyArrayObject *)__pyx_t_28);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1027, __pyx_L1_error)
    }
    __pyx_t_13 = 0;
    __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_t_28));
    __pyx_t_28 = 0;

    /* "caiman/source_extraction/cnmf/oasis.pyx":1028
 *     if penalty == 0:  # get (locally optimal) L0 solution
 *         y = y - b
 *         if s_min == 0:             # <<<<<<<<<<<<<<
 *             lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                    for i in range(P.size() - 1)]
 */
    __pyx_t_15 = (__pyx_v_s_min == 0.0);
    if (__pyx_t_15) {

      /* "caiman/source_extraction/cnmf/oasis.pyx":1029
 *         y = y - b
 *         if s_min == 0:
 *             lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)             # <<<<<<<<<<<<<<
 *                    for i in range(P.size() - 1)]
 *             pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 */
      { /* enter inner scope */
        __pyx_t_28 = PyList_New(0); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1029, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);

        /* "caiman/source_extraction/cnmf/oasis.pyx":1030
 *         if s_min == 0:
 *             lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                    for i in range(P.size() - 1)]             # <<<<<<<<<<<<<<
 *             pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 *             res = -y
 */
        __pyx_t_19 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
        __pyx_t_20 = __pyx_t_19;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_20; __pyx_t_1+=1) {
          __pyx_9genexpr12__pyx_v_i = __pyx_t_1;

          /* "caiman/source_extraction/cnmf/oasis.pyx":1029
 *         y = y - b
 *         if s_min == 0:
 *             lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)             # <<<<<<<<<<<<<<
 *                    for i in range(P.size() - 1)]
 *             pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 */
          __pyx_t_11 = PyFloat_FromDouble((((__pyx_cur_scope->__pyx_v_P[(__pyx_9genexpr12__pyx_v_i + 1)]).v / (__pyx_cur_scope->__pyx_v_P[(__pyx_9genexpr12__pyx_v_i + 1)]).w) - (((__pyx_cur_scope->__pyx_v_P[__pyx_9genexpr12__pyx_v_i]).v / (__pyx_cur_scope->__pyx_v_P[__pyx_9genexpr12__pyx_v_i]).w) * pow(((double)__pyx_cur_scope->__pyx_v_g), ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_9genexpr12__pyx_v_i]).l))))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1029, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_28, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 1029, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
      } /* exit inner scope */
      __pyx_v_lls = ((PyObject*)__pyx_t_28);
      __pyx_t_28 = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1031
 *             lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                    for i in range(P.size() - 1)]
 *             pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]             # <<<<<<<<<<<<<<
 *             res = -y
 *             RSS = y.dot(y)
 */
      { /* enter inner scope */
        __pyx_t_28 = PyList_New(0); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1031, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1031, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_argsort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1031, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_lls};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1031, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_slice__27); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1031, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_11 = __pyx_t_4; __Pyx_INCREF(__pyx_t_11);
          __pyx_t_1 = 0;
          __pyx_t_27 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1031, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 1031, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_27)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1031, __pyx_L1_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 1031, __pyx_L1_error)
              #else
              __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1031, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1031, __pyx_L1_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 1031, __pyx_L1_error)
              #else
              __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1031, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_27(__pyx_t_11);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1031, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1031, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_9genexpr13__pyx_v_i = __pyx_t_21;
          __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[(__pyx_9genexpr13__pyx_v_i + 1)]).t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1031, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_28, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1031, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } /* exit inner scope */
      __pyx_v_pos = ((PyObject*)__pyx_t_28);
      __pyx_t_28 = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1032
 *                    for i in range(P.size() - 1)]
 *             pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 *             res = -y             # <<<<<<<<<<<<<<
 *             RSS = y.dot(y)
 *             c = np.zeros_like(y)
 */
      __pyx_t_28 = PyNumber_Negative(((PyObject *)__pyx_v_y)); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1032, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      if (!(likely(((__pyx_t_28) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_28, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1032, __pyx_L1_error)
      __pyx_t_7 = ((PyArrayObject *)__pyx_t_28);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
          }
          __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
        }
        __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1032, __pyx_L1_error)
      }
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_res, ((PyArrayObject *)__pyx_t_28));
      __pyx_t_28 = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1033
 *             pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 *             res = -y
 *             RSS = y.dot(y)             # <<<<<<<<<<<<<<
 *             c = np.zeros_like(y)
 *             P.resize(0)
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_dot); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_v_y)};
        __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1033, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_28); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
      __pyx_v_RSS = __pyx_t_33;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1034
 *             res = -y
 *             RSS = y.dot(y)
 *             c = np.zeros_like(y)             # <<<<<<<<<<<<<<
 *             P.resize(0)
 *             newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_zeros_like); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, ((PyObject *)__pyx_v_y)};
        __pyx_t_28 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      if (!(likely(((__pyx_t_28) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_28, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1034, __pyx_L1_error)
      __pyx_t_7 = ((PyArrayObject *)__pyx_t_28);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          }
          __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
        }
        __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1034, __pyx_L1_error)
      }
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_28));
      __pyx_t_28 = 0;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1035
 *             RSS = y.dot(y)
 *             c = np.zeros_like(y)
 *             P.resize(0)             # <<<<<<<<<<<<<<
 *             newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 *             P.push_back(newpool)
 */
      try {
        __pyx_cur_scope->__pyx_v_P.resize(0);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1035, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":1036
 *             c = np.zeros_like(y)
 *             P.resize(0)
 *             newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)             # <<<<<<<<<<<<<<
 *             P.push_back(newpool)
 *             for p in pos:
 */
      __pyx_t_33 = 0.0;
      __pyx_t_18 = 1.0;
      __pyx_t_1 = 0;
      __pyx_t_21 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_21 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1036, __pyx_L1_error)
      __pyx_v_newpool.v = __pyx_t_33;
      __pyx_v_newpool.w = __pyx_t_18;
      __pyx_v_newpool.t = __pyx_t_1;
      __pyx_v_newpool.l = __pyx_t_21;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1037
 *             P.resize(0)
 *             newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 *             P.push_back(newpool)             # <<<<<<<<<<<<<<
 *             for p in pos:
 *                 i = 0
 */
      try {
        __pyx_cur_scope->__pyx_v_P.push_back(__pyx_v_newpool);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1037, __pyx_L1_error)
      }

      /* "caiman/source_extraction/cnmf/oasis.pyx":1038
 *             newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 *             P.push_back(newpool)
 *             for p in pos:             # <<<<<<<<<<<<<<
 *                 i = 0
 *                 while P[i].t + P[i].l <= p:
 */
      __pyx_t_28 = __pyx_v_pos; __Pyx_INCREF(__pyx_t_28);
      __pyx_t_21 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_28);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1038, __pyx_L1_error)
          #endif
          if (__pyx_t_21 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_28, __pyx_t_21); __Pyx_INCREF(__pyx_t_4); __pyx_t_21++; if (unlikely((0 < 0))) __PYX_ERR(0, 1038, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_28, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1038, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1039
 *             P.push_back(newpool)
 *             for p in pos:
 *                 i = 0             # <<<<<<<<<<<<<<
 *                 while P[i].t + P[i].l <= p:
 *                     i += 1
 */
        __pyx_cur_scope->__pyx_v_i = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1040
 *             for p in pos:
 *                 i = 0
 *                 while P[i].t + P[i].l <= p:             # <<<<<<<<<<<<<<
 *                     i += 1
 *                 # split current pool at pos
 */
        while (1) {
          __pyx_t_4 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1040, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_11 = PyObject_RichCompare(__pyx_t_4, __pyx_v_p, Py_LE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1040, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 1040, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (!__pyx_t_15) break;

          /* "caiman/source_extraction/cnmf/oasis.pyx":1041
 *                 i = 0
 *                 while P[i].t + P[i].l <= p:
 *                     i += 1             # <<<<<<<<<<<<<<
 *                 # split current pool at pos
 *                 j, k = P[i].t, P[i].l
 */
          __pyx_cur_scope->__pyx_v_i = (__pyx_cur_scope->__pyx_v_i + 1);
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":1043
 *                     i += 1
 *                 # split current pool at pos
 *                 j, k = P[i].t, P[i].l             # <<<<<<<<<<<<<<
 *                 q = h[:j - p + k]
 *                 newpool.v = q.dot(y[p:j + k])
 */
        __pyx_t_1 = (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t;
        __pyx_t_22 = (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l;
        __pyx_v_j = __pyx_t_1;
        __pyx_v_k = __pyx_t_22;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1044
 *                 # split current pool at pos
 *                 j, k = P[i].t, P[i].l
 *                 q = h[:j - p + k]             # <<<<<<<<<<<<<<
 *                 newpool.v = q.dot(y[p:j + k])
 *                 newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k
 */
        __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1044, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = PyNumber_Subtract(__pyx_t_11, __pyx_v_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1044, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_k); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1044, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyNumber_Add(__pyx_t_4, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1044, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PySlice_New(Py_None, __pyx_t_12, Py_None); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1044, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_h), __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1044, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1045
 *                 j, k = P[i].t, P[i].l
 *                 q = h[:j - p + k]
 *                 newpool.v = q.dot(y[p:j + k])             # <<<<<<<<<<<<<<
 *                 newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k
 *                 P.insert(P.begin() + i + 1, newpool)
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1045, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = PyInt_FromSsize_t((__pyx_v_j + __pyx_v_k)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1045, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySlice_New(__pyx_v_p, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1045, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_y), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1045, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1045, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_12); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1045, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_newpool.v = __pyx_t_18;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1046
 *                 q = h[:j - p + k]
 *                 newpool.v = q.dot(y[p:j + k])
 *                 newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k             # <<<<<<<<<<<<<<
 *                 P.insert(P.begin() + i + 1, newpool)
 *                 q = h[:p - j]
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_q};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1046, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_12); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1046, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_v_p); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1046, __pyx_L1_error)
        __pyx_t_12 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = PyNumber_Subtract(__pyx_t_12, __pyx_v_p); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyInt_FromSsize_t(__pyx_v_k); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = PyNumber_Add(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1046, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_newpool.w = __pyx_t_18;
        __pyx_v_newpool.t = __pyx_t_22;
        __pyx_v_newpool.l = __pyx_t_1;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1047
 *                 newpool.v = q.dot(y[p:j + k])
 *                 newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k
 *                 P.insert(P.begin() + i + 1, newpool)             # <<<<<<<<<<<<<<
 *                 q = h[:p - j]
 *                 P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 */
        try {
          __pyx_cur_scope->__pyx_v_P.insert(((__pyx_cur_scope->__pyx_v_P.begin() + __pyx_cur_scope->__pyx_v_i) + 1), __pyx_v_newpool);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 1047, __pyx_L1_error)
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":1048
 *                 newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k
 *                 P.insert(P.begin() + i + 1, newpool)
 *                 q = h[:p - j]             # <<<<<<<<<<<<<<
 *                 P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 *                 for t in [i, i + 1]:
 */
        __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = PyNumber_Subtract(__pyx_v_p, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1048, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PySlice_New(Py_None, __pyx_t_12, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_h), __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1048, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF_SET(__pyx_v_q, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1049
 *                 P.insert(P.begin() + i + 1, newpool)
 *                 q = h[:p - j]
 *                 P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j             # <<<<<<<<<<<<<<
 *                 for t in [i, i + 1]:
 *                     c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = PySlice_New(__pyx_t_11, __pyx_v_p, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_y), __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_11};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_12); if (unlikely((__pyx_t_18 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_v_q};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_12); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_1 = __pyx_v_j;
        __pyx_t_12 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = PyNumber_Subtract(__pyx_v_p, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).v = __pyx_t_18;
        (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).w = __pyx_t_33;
        (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t = __pyx_t_1;
        (__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).l = __pyx_t_22;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1050
 *                 q = h[:p - j]
 *                 P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 *                 for t in [i, i + 1]:             # <<<<<<<<<<<<<<
 *                     c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]
 *                 # calc RSS
 */
        __pyx_t_4 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1050, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_i + 1)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1050, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1050, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_4);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_4)) __PYX_ERR(0, 1050, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_12);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_12)) __PYX_ERR(0, 1050, __pyx_L1_error);
        __pyx_t_4 = 0;
        __pyx_t_12 = 0;
        __pyx_t_12 = __pyx_t_11; __Pyx_INCREF(__pyx_t_12);
        __pyx_t_22 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        for (;;) {
          if (__pyx_t_22 >= 2) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_22); __Pyx_INCREF(__pyx_t_11); __pyx_t_22++; if (unlikely((0 < 0))) __PYX_ERR(0, 1050, __pyx_L1_error)
          #else
          __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_12, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1050, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1050, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_v_t = __pyx_t_1;

          /* "caiman/source_extraction/cnmf/oasis.pyx":1051
 *                 P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 *                 for t in [i, i + 1]:
 *                     c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]             # <<<<<<<<<<<<<<
 *                 # calc RSS
 *                 RSS -= res[j:j + k].dot(res[j:j + k])
 */
          __pyx_t_11 = PyFloat_FromDouble((fmax(0.0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).v) / ((double)(__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).w))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1051, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).l); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = PySlice_New(Py_None, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1051, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_h), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyNumber_Multiply(__pyx_t_11, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1051, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_11 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).l)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1051, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_3 = PySlice_New(__pyx_t_4, __pyx_t_11, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely((PyObject_SetItem(((PyObject *)__pyx_v_c), __pyx_t_3, __pyx_t_5) < 0))) __PYX_ERR(0, 1051, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "caiman/source_extraction/cnmf/oasis.pyx":1050
 *                 q = h[:p - j]
 *                 P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 *                 for t in [i, i + 1]:             # <<<<<<<<<<<<<<
 *                     c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]
 *                 # calc RSS
 */
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1053
 *                     c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]
 *                 # calc RSS
 *                 RSS -= res[j:j + k].dot(res[j:j + k])             # <<<<<<<<<<<<<<
 *                 res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]
 *                 RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 */
        __pyx_t_12 = PyFloat_FromDouble(__pyx_v_RSS); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = PyInt_FromSsize_t((__pyx_v_j + __pyx_v_k)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = PySlice_New(__pyx_t_3, __pyx_t_11, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_res), __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_j + __pyx_v_k)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_29 = PySlice_New(__pyx_t_11, __pyx_t_3, Py_None); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_res), __pyx_t_29); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __pyx_t_29 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_29)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_29);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_29, __pyx_t_3};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1053, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_4 = PyNumber_InPlaceSubtract(__pyx_t_12, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_RSS = __pyx_t_33;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1054
 *                 # calc RSS
 *                 RSS -= res[j:j + k].dot(res[j:j + k])
 *                 res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]             # <<<<<<<<<<<<<<
 *                 RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 *                 if RSS < thresh:
 */
        __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_j + __pyx_v_k)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = PySlice_New(__pyx_t_4, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_c), __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = PyInt_FromSsize_t((__pyx_v_j + __pyx_v_k)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PySlice_New(__pyx_t_12, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_y), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_j + __pyx_v_k)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = PySlice_New(__pyx_t_4, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely((PyObject_SetItem(((PyObject *)__pyx_v_res), __pyx_t_12, __pyx_t_3) < 0))) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1055
 *                 RSS -= res[j:j + k].dot(res[j:j + k])
 *                 res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]
 *                 RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])             # <<<<<<<<<<<<<<
 *                 if RSS < thresh:
 *                     break
 */
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_RSS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyInt_FromSsize_t((__pyx_v_j + __pyx_v_k)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_29 = PySlice_New(__pyx_t_5, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_res), __pyx_t_29); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_dot); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_cur_scope->__pyx_v_i]).t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_j + __pyx_v_k)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = PySlice_New(__pyx_t_4, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_res), __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_29))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_29);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_29);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_29, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_5};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_29, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        }
        __pyx_t_29 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_t_12); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_29); if (unlikely((__pyx_t_33 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        __pyx_v_RSS = __pyx_t_33;

        /* "caiman/source_extraction/cnmf/oasis.pyx":1056
 *                 res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]
 *                 RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 *                 if RSS < thresh:             # <<<<<<<<<<<<<<
 *                     break
 *         else:
 */
        __pyx_t_15 = (__pyx_v_RSS < __pyx_v_thresh);
        if (__pyx_t_15) {

          /* "caiman/source_extraction/cnmf/oasis.pyx":1057
 *                 RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 *                 if RSS < thresh:
 *                     break             # <<<<<<<<<<<<<<
 *         else:
 *             c, s = oasisAR1(y, g, s_min=s_min if s_min > 0 else -s_min * sn * sqrt(1 - g))
 */
          goto __pyx_L100_break;

          /* "caiman/source_extraction/cnmf/oasis.pyx":1056
 *                 res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]
 *                 RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 *                 if RSS < thresh:             # <<<<<<<<<<<<<<
 *                     break
 *         else:
 */
        }

        /* "caiman/source_extraction/cnmf/oasis.pyx":1038
 *             newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 *             P.push_back(newpool)
 *             for p in pos:             # <<<<<<<<<<<<<<
 *                 i = 0
 *                 while P[i].t + P[i].l <= p:
 */
      }
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
      goto __pyx_L107_for_end;
      __pyx_L100_break:;
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
      goto __pyx_L107_for_end;
      __pyx_L107_for_end:;

      /* "caiman/source_extraction/cnmf/oasis.pyx":1028
 *     if penalty == 0:  # get (locally optimal) L0 solution
 *         y = y - b
 *         if s_min == 0:             # <<<<<<<<<<<<<<
 *             lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                    for i in range(P.size() - 1)]
 */
      goto __pyx_L93;
    }

    /* "caiman/source_extraction/cnmf/oasis.pyx":1059
 *                     break
 *         else:
 *             c, s = oasisAR1(y, g, s_min=s_min if s_min > 0 else -s_min * sn * sqrt(1 - g))             # <<<<<<<<<<<<<<
 * 
 *     # construct s
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_28, __pyx_n_s_oasisAR1); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __pyx_t_29 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_g); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_INCREF((PyObject *)__pyx_v_y);
      __Pyx_GIVEREF((PyObject *)__pyx_v_y);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, ((PyObject *)__pyx_v_y))) __PYX_ERR(0, 1059, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_29);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_29)) __PYX_ERR(0, 1059, __pyx_L1_error);
      __pyx_t_29 = 0;
      __pyx_t_29 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_15 = (__pyx_v_s_min > 0.0);
      if (__pyx_t_15) {
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_s_min); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1059, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __pyx_t_5 = PyFloat_FromDouble((((-__pyx_v_s_min) * __pyx_v_sn) * sqrt((1.0 - __pyx_cur_scope->__pyx_v_g)))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1059, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = __pyx_t_5;
        __pyx_t_5 = 0;
      }
      if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_s_min, __pyx_t_3) < 0) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_28, __pyx_t_12, __pyx_t_29); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
        PyObject* sequence = __pyx_t_3;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1059, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_29 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_29 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_29);
        __Pyx_INCREF(__pyx_t_12);
        #else
        __pyx_t_29 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1059, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1059, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_28 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1059, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_28);
        index = 0; __pyx_t_29 = __pyx_t_16(__pyx_t_28); if (unlikely(!__pyx_t_29)) goto __pyx_L108_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_29);
        index = 1; __pyx_t_12 = __pyx_t_16(__pyx_t_28); if (unlikely(!__pyx_t_12)) goto __pyx_L108_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_12);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_28), 2) < 0) __PYX_ERR(0, 1059, __pyx_L1_error)
        __pyx_t_16 = NULL;
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        goto __pyx_L109_unpacking_done;
        __pyx_L108_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        __pyx_t_16 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1059, __pyx_L1_error)
        __pyx_L109_unpacking_done:;
      }
      if (!(likely(((__pyx_t_29) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_29, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1059, __pyx_L1_error)
      if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1059, __pyx_L1_error)
      __pyx_t_7 = ((PyArrayObject *)__pyx_t_29);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
          }
          __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
        }
        __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1059, __pyx_L1_error)
      }
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_29));
      __pyx_t_29 = 0;
      __pyx_t_7 = ((PyArrayObject *)__pyx_t_12);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_v_s, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          }
          __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
        }
        __pyx_pybuffernd_s.diminfo[0].strides = __pyx_pybuffernd_s.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_s.diminfo[0].shape = __pyx_pybuffernd_s.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1059, __pyx_L1_error)
      }
      __pyx_t_7 = 0;
      __pyx_v_s = ((PyArrayObject *)__pyx_t_12);
      __pyx_t_12 = 0;
    }
    __pyx_L93:;

    /* "caiman/source_extraction/cnmf/oasis.pyx":1026
 *         c, P = oasis(P, g, c)
 * 
 *     if penalty == 0:  # get (locally optimal) L0 solution             # <<<<<<<<<<<<<<
 *         y = y - b
 *         if s_min == 0:
 */
  }

  /* "caiman/source_extraction/cnmf/oasis.pyx":1062
 * 
 *     # construct s
 *     s = c.copy()             # <<<<<<<<<<<<<<
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_copy); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_29 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_29)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_29);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_29, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1062, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_v_s, &__Pyx_TypeInfo_nn___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
      __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
    }
    __pyx_pybuffernd_s.diminfo[0].strides = __pyx_pybuffernd_s.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_s.diminfo[0].shape = __pyx_pybuffernd_s.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1062, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __Pyx_XDECREF_SET(__pyx_v_s, ((PyArrayObject *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":1063
 *     # construct s
 *     s = c.copy()
 *     s[0] = 0             # <<<<<<<<<<<<<<
 *     s[1:] -= g * c[:-1]
 *     return c, s, b, g, lam
 */
  __pyx_t_36 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_36 < 0) {
    __pyx_t_36 += __pyx_pybuffernd_s.diminfo[0].shape;
    if (unlikely(__pyx_t_36 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_36 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 1063, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_s.diminfo[0].strides) = 0.0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":1064
 *     s = c.copy()
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]             # <<<<<<<<<<<<<<
 *     return c, s, b, g, lam
 */
  __Pyx_INCREF(__pyx_slice__7);
  __pyx_t_37 = __pyx_slice__7;
  __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_s), __pyx_t_37); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_g); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_29 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_c), __pyx_slice__8); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_28 = PyNumber_Multiply(__pyx_t_12, __pyx_t_29); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = PyNumber_InPlaceSubtract(__pyx_t_3, __pyx_t_28); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  if (unlikely((PyObject_SetItem(((PyObject *)__pyx_v_s), __pyx_t_37, __pyx_t_29) < 0))) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":1065
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]
 *     return c, s, b, g, lam             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_29 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_28 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_g); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_lam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = PyTuple_New(5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __Pyx_GIVEREF((PyObject *)__pyx_v_c);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, ((PyObject *)__pyx_v_c))) __PYX_ERR(0, 1065, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_s);
  __Pyx_GIVEREF((PyObject *)__pyx_v_s);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 1, ((PyObject *)__pyx_v_s))) __PYX_ERR(0, 1065, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_29)) __PYX_ERR(0, 1065, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_28)) __PYX_ERR(0, 1065, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_t_3)) __PYX_ERR(0, 1065, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_28 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_12;
  __pyx_t_12 = 0;
  goto __pyx_L0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":670
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_34);
  __Pyx_XDECREF(__pyx_t_37);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ff.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ll.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.constrained_oasisAR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ff.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ll.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g_converged);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);
  __Pyx_XDECREF((PyObject *)__pyx_v_fluor);
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XDECREF((PyObject *)__pyx_v_ff);
  __Pyx_XDECREF((PyObject *)__pyx_v_ll);
  __Pyx_XDECREF(__pyx_v_oasis1strun);
  __Pyx_XDECREF(__pyx_v_oasis);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_Pt);
  __Pyx_XDECREF(__pyx_v_Pl);
  __Pyx_XDECREF(__pyx_v_baz);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_lls);
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF((PyObject *)__pyx_v_y);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_OASIS(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5__pyx_unpickle_OASIS(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5__pyx_unpickle_OASIS = {"__pyx_unpickle_OASIS", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5__pyx_unpickle_OASIS, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5__pyx_unpickle_OASIS(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_OASIS (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OASIS", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OASIS", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_OASIS") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OASIS", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.__pyx_unpickle_OASIS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_4__pyx_unpickle_OASIS(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6caiman_17source_extraction_4cnmf_5oasis_4__pyx_unpickle_OASIS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OASIS", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x427cb6f, 0x3fa9078, 0x85da4ff):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x427cb6f, 0x3fa9078, 0x85da4ff) = (P, _y, b, d, g, g11g11, g11g12, g12, g2, h, i, lam, r, s_min, t, v, w, yt))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__28, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x427cb6f, 0x3fa9078, 0x85da4ff):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x427cb6f, 0x3fa9078, 0x85da4ff) = (P, _y, b, d, g, g11g11, g11g12, g12, g2, h, i, lam, r, s_min, t, v, w, yt))" % __pyx_checksum
 *     __pyx_result = OASIS.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x427cb6f, 0x3fa9078, 0x85da4ff):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x427cb6f, 0x3fa9078, 0x85da4ff) = (P, _y, b, d, g, g11g11, g11g12, g12, g2, h, i, lam, r, s_min, t, v, w, yt))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = OASIS.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x427cb6f, 0x3fa9078, 0x85da4ff):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x427cb6f, 0x3fa9078, 0x85da4ff) = (P, _y, b, d, g, g11g11, g11g12, g12, g2, h, i, lam, r, s_min, t, v, w, yt))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x427cb6f, 0x3fa9078, 0x85da4ff) = (P, _y, b, d, g, g11g11, g11g12, g12, g2, h, i, lam, r, s_min, t, v, w, yt))" % __pyx_checksum
 *     __pyx_result = OASIS.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OASIS__set_state(<OASIS> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x427cb6f, 0x3fa9078, 0x85da4ff) = (P, _y, b, d, g, g11g11, g11g12, g12, g2, h, i, lam, r, s_min, t, v, w, yt))" % __pyx_checksum
 *     __pyx_result = OASIS.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OASIS__set_state(<OASIS> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = OASIS.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OASIS__set_state(<OASIS> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_OASIS__set_state(OASIS __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_6caiman_17source_extraction_4cnmf_5oasis___pyx_unpickle_OASIS__set_state(((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x427cb6f, 0x3fa9078, 0x85da4ff) = (P, _y, b, d, g, g11g11, g11g12, g12, g2, h, i, lam, r, s_min, t, v, w, yt))" % __pyx_checksum
 *     __pyx_result = OASIS.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OASIS__set_state(<OASIS> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OASIS__set_state(<OASIS> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_OASIS__set_state(OASIS __pyx_result, tuple __pyx_state):
 *     __pyx_result.P = __pyx_state[0]; __pyx_result._y = __pyx_state[1]; __pyx_result.b = __pyx_state[2]; __pyx_result.d = __pyx_state[3]; __pyx_result.g = __pyx_state[4]; __pyx_result.g11g11 = __pyx_state[5]; __pyx_result.g11g12 = __pyx_state[6]; __pyx_result.g12 = __pyx_state[7]; __pyx_result.g2 = __pyx_state[8]; __pyx_result.h = __pyx_state[9]; __pyx_result.i = __pyx_state[10]; __pyx_result.lam = __pyx_state[11]; __pyx_result.r = __pyx_state[12]; __pyx_result.s_min = __pyx_state[13]; __pyx_result.t = __pyx_state[14]; __pyx_result.v = __pyx_state[15]; __pyx_result.w = __pyx_state[16]; __pyx_result.yt = __pyx_state[17]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OASIS(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.__pyx_unpickle_OASIS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_OASIS__set_state(<OASIS> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OASIS__set_state(OASIS __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.P = __pyx_state[0]; __pyx_result._y = __pyx_state[1]; __pyx_result.b = __pyx_state[2]; __pyx_result.d = __pyx_state[3]; __pyx_result.g = __pyx_state[4]; __pyx_result.g11g11 = __pyx_state[5]; __pyx_result.g11g12 = __pyx_state[6]; __pyx_result.g12 = __pyx_state[7]; __pyx_result.g2 = __pyx_state[8]; __pyx_result.h = __pyx_state[9]; __pyx_result.i = __pyx_state[10]; __pyx_result.lam = __pyx_state[11]; __pyx_result.r = __pyx_state[12]; __pyx_result.s_min = __pyx_state[13]; __pyx_result.t = __pyx_state[14]; __pyx_result.v = __pyx_state[15]; __pyx_result.w = __pyx_state[16]; __pyx_result.yt = __pyx_state[17]
 *     if len(__pyx_state) > 18 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6caiman_17source_extraction_4cnmf_5oasis___pyx_unpickle_OASIS__set_state(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool>  __pyx_t_2;
  std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE>  __pyx_t_3;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_4;
  __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE __pyx_t_5[0x3E8];
  Py_ssize_t __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OASIS__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_OASIS__set_state(OASIS __pyx_result, tuple __pyx_state):
 *     __pyx_result.P = __pyx_state[0]; __pyx_result._y = __pyx_state[1]; __pyx_result.b = __pyx_state[2]; __pyx_result.d = __pyx_state[3]; __pyx_result.g = __pyx_state[4]; __pyx_result.g11g11 = __pyx_state[5]; __pyx_result.g11g12 = __pyx_state[6]; __pyx_result.g12 = __pyx_state[7]; __pyx_result.g2 = __pyx_state[8]; __pyx_result.h = __pyx_state[9]; __pyx_result.i = __pyx_state[10]; __pyx_result.lam = __pyx_state[11]; __pyx_result.r = __pyx_state[12]; __pyx_result.s_min = __pyx_state[13]; __pyx_result.t = __pyx_state[14]; __pyx_result.v = __pyx_state[15]; __pyx_result.w = __pyx_state[16]; __pyx_result.yt = __pyx_state[17]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 18 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[18])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_vector_from_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->P = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_y = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->b = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->d = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->g = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((__Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_1, __pyx_t_5, 0x3E8) < 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely((0x3E8) != (0x3E8))) {
    PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(0x3E8), (Py_ssize_t)(0x3E8));
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  memcpy(&(__pyx_v___pyx_result->g11g11[0]), __pyx_t_5, sizeof(__pyx_v___pyx_result->g11g11[0]) * (0x3E8));
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((__Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_1, __pyx_t_5, 0x3E8) < 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely((0x3E8) != (0x3E8))) {
    PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(0x3E8), (Py_ssize_t)(0x3E8));
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  memcpy(&(__pyx_v___pyx_result->g11g12[0]), __pyx_t_5, sizeof(__pyx_v___pyx_result->g11g12[0]) * (0x3E8));
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((__Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_1, __pyx_t_5, 0x3E8) < 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely((0x3E8) != (0x3E8))) {
    PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(0x3E8), (Py_ssize_t)(0x3E8));
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  memcpy(&(__pyx_v___pyx_result->g12[0]), __pyx_t_5, sizeof(__pyx_v___pyx_result->g12[0]) * (0x3E8));
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->g2 = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((__Pyx_carray_from_py___pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE(__pyx_t_1, __pyx_t_5, 0x3E8) < 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely((0x3E8) != (0x3E8))) {
    PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(0x3E8), (Py_ssize_t)(0x3E8));
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  memcpy(&(__pyx_v___pyx_result->h[0]), __pyx_t_5, sizeof(__pyx_v___pyx_result->h[0]) * (0x3E8));
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->i = __pyx_t_6;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->lam = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->r = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->s_min = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->t = __pyx_t_7;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->v = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->w = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_float32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->yt = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_OASIS__set_state(OASIS __pyx_result, tuple __pyx_state):
 *     __pyx_result.P = __pyx_state[0]; __pyx_result._y = __pyx_state[1]; __pyx_result.b = __pyx_state[2]; __pyx_result.d = __pyx_state[3]; __pyx_result.g = __pyx_state[4]; __pyx_result.g11g11 = __pyx_state[5]; __pyx_result.g11g12 = __pyx_state[6]; __pyx_result.g12 = __pyx_state[7]; __pyx_result.g2 = __pyx_state[8]; __pyx_result.h = __pyx_state[9]; __pyx_result.i = __pyx_state[10]; __pyx_result.lam = __pyx_state[11]; __pyx_result.r = __pyx_state[12]; __pyx_result.s_min = __pyx_state[13]; __pyx_result.t = __pyx_state[14]; __pyx_result.v = __pyx_state[15]; __pyx_result.w = __pyx_state[16]; __pyx_result.yt = __pyx_state[17]
 *     if len(__pyx_state) > 18 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[18])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_6 > 18);
  if (__pyx_t_9) {
  } else {
    __pyx_t_8 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_9 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_8 = __pyx_t_9;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_8) {

    /* "(tree fragment)":14
 *     __pyx_result.P = __pyx_state[0]; __pyx_result._y = __pyx_state[1]; __pyx_result.b = __pyx_state[2]; __pyx_result.d = __pyx_state[3]; __pyx_result.g = __pyx_state[4]; __pyx_result.g11g11 = __pyx_state[5]; __pyx_result.g11g12 = __pyx_state[6]; __pyx_result.g12 = __pyx_state[7]; __pyx_result.g2 = __pyx_state[8]; __pyx_result.h = __pyx_state[9]; __pyx_result.i = __pyx_state[10]; __pyx_result.lam = __pyx_state[11]; __pyx_result.r = __pyx_state[12]; __pyx_result.s_min = __pyx_state[13]; __pyx_result.t = __pyx_state[14]; __pyx_result.v = __pyx_state[15]; __pyx_result.w = __pyx_state[16]; __pyx_result.yt = __pyx_state[17]
 *     if len(__pyx_state) > 18 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[18])             # <<<<<<<<<<<<<<
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_update); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = NULL;
    __pyx_t_13 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_13 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_10};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_OASIS__set_state(OASIS __pyx_result, tuple __pyx_state):
 *     __pyx_result.P = __pyx_state[0]; __pyx_result._y = __pyx_state[1]; __pyx_result.b = __pyx_state[2]; __pyx_result.d = __pyx_state[3]; __pyx_result.g = __pyx_state[4]; __pyx_result.g11g11 = __pyx_state[5]; __pyx_result.g11g12 = __pyx_state[6]; __pyx_result.g12 = __pyx_state[7]; __pyx_result.g2 = __pyx_state[8]; __pyx_result.h = __pyx_state[9]; __pyx_result.i = __pyx_state[10]; __pyx_result.lam = __pyx_state[11]; __pyx_result.r = __pyx_state[12]; __pyx_result.s_min = __pyx_state[13]; __pyx_result.t = __pyx_state[14]; __pyx_result.v = __pyx_state[15]; __pyx_result.w = __pyx_state[16]; __pyx_result.yt = __pyx_state[17]
 *     if len(__pyx_state) > 18 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[18])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_OASIS__set_state(<OASIS> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OASIS__set_state(OASIS __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.P = __pyx_state[0]; __pyx_result._y = __pyx_state[1]; __pyx_result.b = __pyx_state[2]; __pyx_result.d = __pyx_state[3]; __pyx_result.g = __pyx_state[4]; __pyx_result.g11g11 = __pyx_state[5]; __pyx_result.g11g12 = __pyx_state[6]; __pyx_result.g12 = __pyx_state[7]; __pyx_result.g2 = __pyx_state[8]; __pyx_result.h = __pyx_state[9]; __pyx_result.i = __pyx_state[10]; __pyx_result.lam = __pyx_state[11]; __pyx_result.r = __pyx_state[12]; __pyx_result.s_min = __pyx_state[13]; __pyx_result.t = __pyx_state[14]; __pyx_result.v = __pyx_state[15]; __pyx_result.w = __pyx_state[16]; __pyx_result.yt = __pyx_state[17]
 *     if len(__pyx_state) > 18 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("caiman.source_extraction.cnmf.oasis.__pyx_unpickle_OASIS__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis_OASIS(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)o);
  new((void*)&(p->P)) std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool> ();
  new((void*)&(p->_y)) std::vector<__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE> ();
  return o;
}

static void __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis_OASIS(PyObject *o) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis_OASIS) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->P);
  __Pyx_call_destructor(p->_y);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_P(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1P_1__get__(o);
}

static PyObject *__pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_g(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1g_1__get__(o);
}

static PyObject *__pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_g2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2g2_1__get__(o);
}

static PyObject *__pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_lam(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3lam_1__get__(o);
}

static PyObject *__pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_s_min(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5s_min_1__get__(o);
}

static PyObject *__pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_b(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1b_1__get__(o);
}

static PyObject *__pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_t(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1t_1__get__(o);
}

static PyObject *__pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_c(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1c_1__get__(o);
}

static PyObject *__pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_s(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1s_1__get__(o);
}

static PyMethodDef __pyx_methods_6caiman_17source_extraction_4cnmf_5oasis_OASIS[] = {
  {"fit_next", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3fit_next, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_2fit_next},
  {"fit_next_tmp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5fit_next_tmp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_4fit_next_tmp},
  {"fit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_7fit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_6fit},
  {"get_c", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_9get_c, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_8get_c},
  {"get_s", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_11get_s, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_10get_s},
  {"get_l_of_last_pool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_13get_l_of_last_pool, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_12get_l_of_last_pool},
  {"get_c_of_last_pool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_15get_c_of_last_pool, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_14get_c_of_last_pool},
  {"remove_last_pool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_17remove_last_pool, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_l_of_pool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_19get_l_of_pool, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"set_poolvalue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_21set_poolvalue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6caiman_17source_extraction_4cnmf_5oasis_OASIS[] = {
  {(char *)"P", __pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_P, 0, (char *)0, 0},
  {(char *)"g", __pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_g, 0, (char *)0, 0},
  {(char *)"g2", __pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_g2, 0, (char *)0, 0},
  {(char *)"lam", __pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_lam, 0, (char *)0, 0},
  {(char *)"s_min", __pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_s_min, 0, (char *)0, 0},
  {(char *)"b", __pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_b, 0, (char *)0, 0},
  {(char *)"t", __pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_t, 0, (char *)0, 0},
  {(char *)"c", __pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_c, 0, (char *)PyDoc_STR("\n        construct and return full calcium trace\n        "), 0},
  {(char *)"s", __pyx_getprop_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_s, 0, (char *)PyDoc_STR("\n        construct and return full deconvolved activity, 'spike rates'\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis_OASIS},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Deconvolution class implementing OASIS\n    Infer the most likely discretized spike train underlying an AR(1) fluorescence trace\n\n    Solves the sparse non-negative deconvolution problem\n    min 1/2|c-y|^2 + lam |s|_1 subject to s_t = c_t-g c_{t-1} >=s_min or =0\n\n    Parameters\n    ----------\n    g : float\n        Parameter of the AR(1) or 1st parameter of the AR(2) process that models the fluorescence impulse response.\n    lam : float, optional, default 0\n        Sparsity penalty parameter lambda.\n    s_min : float, optional, default 0\n        Minimal non-zero activity within each bin (minimal 'spike size').\n    b : float, optional, default 0\n        Baseline that is subtracted.\n    num_empty_samples : int\n        Number of elapsed frames until neuron is added and OASIS initialized\n    g2 : float\n        0 for AR(1) or 2nd parameter of the AR(2) process that models the fluorescence impulse response.\n\n\n    Attributes\n    ----------\n    g, lam, smin, b: see Parameters above\n    p : order of the AR process\n    P : vector of struct of (float, float, int, int)\n        Pools of the active set method, i.e. a sufficient statistics.\n    t : int\n        Number of processed time steps.\n    h : array of float\n        Explicit calcium kernel to avoid duplicated recalculations.\n    d : float\n        Decay factor. Only for AR(2).\n    r : float\n        Rise factor. Only for AR(2).\n    g12, g11g11, g11g12 : arrays of float\n        Precomputed quantities related to the calcium kernel. Only for AR(2).\n\n    References\n    ----------\n    * Friedrich J and Paninski L, NIPS 2016\n    * Friedrich J, Zhou P, and Paninski L, PLOS Computational Biology 2017\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_6caiman_17source_extraction_4cnmf_5oasis_OASIS},
  {Py_tp_getset, (void *)__pyx_getsets_6caiman_17source_extraction_4cnmf_5oasis_OASIS},
  {Py_tp_init, (void *)__pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis_OASIS},
  {0, 0},
};
static PyType_Spec __pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS_spec = {
  "caiman.source_extraction.cnmf.oasis.OASIS",
  sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS_slots,
};
#else

static PyTypeObject __pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS = {
  PyVarObject_HEAD_INIT(0, 0)
  "caiman.source_extraction.cnmf.oasis.""OASIS", /*tp_name*/
  sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis_OASIS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis_OASIS, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Deconvolution class implementing OASIS\n    Infer the most likely discretized spike train underlying an AR(1) fluorescence trace\n\n    Solves the sparse non-negative deconvolution problem\n    min 1/2|c-y|^2 + lam |s|_1 subject to s_t = c_t-g c_{t-1} >=s_min or =0\n\n    Parameters\n    ----------\n    g : float\n        Parameter of the AR(1) or 1st parameter of the AR(2) process that models the fluorescence impulse response.\n    lam : float, optional, default 0\n        Sparsity penalty parameter lambda.\n    s_min : float, optional, default 0\n        Minimal non-zero activity within each bin (minimal 'spike size').\n    b : float, optional, default 0\n        Baseline that is subtracted.\n    num_empty_samples : int\n        Number of elapsed frames until neuron is added and OASIS initialized\n    g2 : float\n        0 for AR(1) or 2nd parameter of the AR(2) process that models the fluorescence impulse response.\n\n\n    Attributes\n    ----------\n    g, lam, smin, b: see Parameters above\n    p : order of the AR process\n    P : vector of struct of (float, float, int, int)\n        Pools of the active set method, i.e. a sufficient statistics.\n    t : int\n        Number of processed time steps.\n    h : array of float\n        Explicit calcium kernel to avoid duplicated recalculations.\n    d : float\n        Decay factor. Only for AR(2).\n    r : float\n        Rise factor. Only for AR(2).\n    g12, g11g11, g11g12 : arrays of float\n        Precomputed quantities related to the calcium kernel. Only for AR(2).\n\n    References\n    ----------\n    * Friedrich J and Paninski L, NIPS 2016\n    * Friedrich J, Zhou P, and Paninski L, PLOS Computational Biology 2017\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6caiman_17source_extraction_4cnmf_5oasis_OASIS, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6caiman_17source_extraction_4cnmf_5oasis_OASIS, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis_OASIS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_freelist_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1[8];
static int __pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 = 0;

static PyObject *__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1)))) {
    o = (PyObject*)__pyx_freelist_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1[--__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1];
    memset(o, 0, sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  p = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o);
  new((void*)&(p->__pyx_v_P)) std::vector<struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool> ();
  return o;
}

static void __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1(PyObject *o) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_P);
  Py_CLEAR(p->__pyx_v_b_nonneg);
  Py_CLEAR(p->__pyx_v_bar);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1)))) {
    __pyx_freelist_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1[__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1++] = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o;
  if (p->__pyx_v_b_nonneg) {
    e = (*v)(((PyObject *)p->__pyx_v_b_nonneg), a); if (e) return e;
  }
  if (p->__pyx_v_bar) {
    e = (*v)(p->__pyx_v_bar, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o;
  tmp = ((PyObject*)p->__pyx_v_b_nonneg);
  p->__pyx_v_b_nonneg = ((PyBoolObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_bar);
  p->__pyx_v_bar = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1},
  {Py_tp_clear, (void *)__pyx_tp_clear_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1},
  {Py_tp_new, (void *)__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1},
  {0, 0},
};
static PyType_Spec __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1_spec = {
  "caiman.source_extraction.cnmf.oasis.__pyx_scope_struct__constrained_oasisAR1",
  sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1_slots,
};
#else

static PyTypeObject __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "caiman.source_extraction.cnmf.oasis.""__pyx_scope_struct__constrained_oasisAR1", /*tp_name*/
  sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1, /*tp_traverse*/
  __pyx_tp_clear_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *__pyx_freelist_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz[8];
static int __pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz = 0;

static PyObject *__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz)))) {
    o = (PyObject*)__pyx_freelist_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz[--__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz];
    memset(o, 0, sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz(PyObject *o) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_Pl);
  Py_CLEAR(p->__pyx_v_Pt);
  Py_CLEAR(p->__pyx_v_y);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz)))) {
    __pyx_freelist_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz[__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz++] = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_Pl) {
    e = (*v)(p->__pyx_v_Pl, a); if (e) return e;
  }
  if (p->__pyx_v_Pt) {
    e = (*v)(p->__pyx_v_Pt, a); if (e) return e;
  }
  if (p->__pyx_v_y) {
    e = (*v)(p->__pyx_v_y, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Pl);
  p->__pyx_v_Pl = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Pt);
  p->__pyx_v_Pt = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_y);
  p->__pyx_v_y = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz},
  {Py_tp_clear, (void *)__pyx_tp_clear_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz},
  {Py_tp_new, (void *)__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz},
  {0, 0},
};
static PyType_Spec __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz_spec = {
  "caiman.source_extraction.cnmf.oasis.__pyx_scope_struct_1_baz",
  sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz_slots,
};
#else

static PyTypeObject __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz = {
  PyVarObject_HEAD_INIT(0, 0)
  "caiman.source_extraction.cnmf.oasis.""__pyx_scope_struct_1_baz", /*tp_name*/
  sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz, /*tp_traverse*/
  __pyx_tp_clear_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *__pyx_freelist_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz[8];
static int __pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz = 0;

static PyObject *__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz)))) {
    o = (PyObject*)__pyx_freelist_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz[--__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz];
    memset(o, 0, sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz(PyObject *o) {
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_Pl);
  Py_CLEAR(p->__pyx_v_Pt);
  Py_CLEAR(p->__pyx_v_y);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz)))) {
    __pyx_freelist_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz[__pyx_freecount_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz++] = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_Pl) {
    e = (*v)(p->__pyx_v_Pl, a); if (e) return e;
  }
  if (p->__pyx_v_Pt) {
    e = (*v)(p->__pyx_v_Pt, a); if (e) return e;
  }
  if (p->__pyx_v_y) {
    e = (*v)(p->__pyx_v_y, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *p = (struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Pl);
  p->__pyx_v_Pl = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Pt);
  p->__pyx_v_Pt = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_y);
  p->__pyx_v_y = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz},
  {Py_tp_clear, (void *)__pyx_tp_clear_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz},
  {Py_tp_new, (void *)__pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz},
  {0, 0},
};
static PyType_Spec __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz_spec = {
  "caiman.source_extraction.cnmf.oasis.__pyx_scope_struct_2_baz",
  sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz_slots,
};
#else

static PyTypeObject __pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz = {
  PyVarObject_HEAD_INIT(0, 0)
  "caiman.source_extraction.cnmf.oasis.""__pyx_scope_struct_2_baz", /*tp_name*/
  sizeof(struct __pyx_obj_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz, /*tp_traverse*/
  __pyx_tp_clear_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
    {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
    {&__pyx_kp_u_L_BFGS_B, __pyx_k_L_BFGS_B, sizeof(__pyx_k_L_BFGS_B), 0, 1, 0, 0},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
    {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
    {&__pyx_kp_s_No_value_specified_for_struct_at_3, __pyx_k_No_value_specified_for_struct_at_3, sizeof(__pyx_k_No_value_specified_for_struct_at_3), 0, 0, 1, 0},
    {&__pyx_kp_s_No_value_specified_for_struct_at_4, __pyx_k_No_value_specified_for_struct_at_4, sizeof(__pyx_k_No_value_specified_for_struct_at_4), 0, 0, 1, 0},
    {&__pyx_n_s_OASIS, __pyx_k_OASIS, sizeof(__pyx_k_OASIS), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS___reduce_cython, __pyx_k_OASIS___reduce_cython, sizeof(__pyx_k_OASIS___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS___setstate_cython, __pyx_k_OASIS___setstate_cython, sizeof(__pyx_k_OASIS___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_fit, __pyx_k_OASIS_fit, sizeof(__pyx_k_OASIS_fit), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_fit_next, __pyx_k_OASIS_fit_next, sizeof(__pyx_k_OASIS_fit_next), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_fit_next_tmp, __pyx_k_OASIS_fit_next_tmp, sizeof(__pyx_k_OASIS_fit_next_tmp), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_get_c, __pyx_k_OASIS_get_c, sizeof(__pyx_k_OASIS_get_c), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_get_c_of_last_pool, __pyx_k_OASIS_get_c_of_last_pool, sizeof(__pyx_k_OASIS_get_c_of_last_pool), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_get_l_of_last_pool, __pyx_k_OASIS_get_l_of_last_pool, sizeof(__pyx_k_OASIS_get_l_of_last_pool), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_get_l_of_pool, __pyx_k_OASIS_get_l_of_pool, sizeof(__pyx_k_OASIS_get_l_of_pool), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_get_s, __pyx_k_OASIS_get_s, sizeof(__pyx_k_OASIS_get_s), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_remove_last_pool, __pyx_k_OASIS_remove_last_pool, sizeof(__pyx_k_OASIS_remove_last_pool), 0, 0, 1, 1},
    {&__pyx_n_s_OASIS_set_poolvalue, __pyx_k_OASIS_set_poolvalue, sizeof(__pyx_k_OASIS_set_poolvalue), 0, 0, 1, 1},
    {&__pyx_n_s_OverflowError, __pyx_k_OverflowError, sizeof(__pyx_k_OverflowError), 0, 0, 1, 1},
    {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_Pl, __pyx_k_Pl, sizeof(__pyx_k_Pl), 0, 0, 1, 1},
    {&__pyx_n_s_Pt, __pyx_k_Pt, sizeof(__pyx_k_Pt), 0, 0, 1, 1},
    {&__pyx_n_s_RSS, __pyx_k_RSS, sizeof(__pyx_k_RSS), 0, 0, 1, 1},
    {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_kp_u__29, __pyx_k__29, sizeof(__pyx_k__29), 0, 1, 0, 0},
    {&__pyx_n_s__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 1},
    {&__pyx_n_s__62, __pyx_k__62, sizeof(__pyx_k__62), 0, 0, 1, 1},
    {&__pyx_n_s_aa, __pyx_k_aa, sizeof(__pyx_k_aa), 0, 0, 1, 1},
    {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
    {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
    {&__pyx_n_s_argsort, __pyx_k_argsort, sizeof(__pyx_k_argsort), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
    {&__pyx_n_s_b_nonneg, __pyx_k_b_nonneg, sizeof(__pyx_k_b_nonneg), 0, 0, 1, 1},
    {&__pyx_n_s_bar, __pyx_k_bar, sizeof(__pyx_k_bar), 0, 0, 1, 1},
    {&__pyx_n_s_baz, __pyx_k_baz, sizeof(__pyx_k_baz), 0, 0, 1, 1},
    {&__pyx_n_s_bb, __pyx_k_bb, sizeof(__pyx_k_bb), 0, 0, 1, 1},
    {&__pyx_n_s_bounds, __pyx_k_bounds, sizeof(__pyx_k_bounds), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_k_caiman_source_extraction_cnmf_oa, sizeof(__pyx_k_caiman_source_extraction_cnmf_oa), 0, 0, 1, 0},
    {&__pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_k_caiman_source_extraction_cnmf_oa_2, sizeof(__pyx_k_caiman_source_extraction_cnmf_oa_2), 0, 0, 1, 1},
    {&__pyx_n_s_cc, __pyx_k_cc, sizeof(__pyx_k_cc), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_constrained_oasisAR1, __pyx_k_constrained_oasisAR1, sizeof(__pyx_k_constrained_oasisAR1), 0, 0, 1, 1},
    {&__pyx_n_s_constrained_oasisAR1_locals_bar, __pyx_k_constrained_oasisAR1_locals_bar, sizeof(__pyx_k_constrained_oasisAR1_locals_bar), 0, 0, 1, 1},
    {&__pyx_n_s_constrained_oasisAR1_locals_bar_2, __pyx_k_constrained_oasisAR1_locals_bar_2, sizeof(__pyx_k_constrained_oasisAR1_locals_bar_2), 0, 0, 1, 1},
    {&__pyx_n_s_constrained_oasisAR1_locals_baz, __pyx_k_constrained_oasisAR1_locals_baz, sizeof(__pyx_k_constrained_oasisAR1_locals_baz), 0, 0, 1, 1},
    {&__pyx_n_s_constrained_oasisAR1_locals_baz_2, __pyx_k_constrained_oasisAR1_locals_baz_2, sizeof(__pyx_k_constrained_oasisAR1_locals_baz_2), 0, 0, 1, 1},
    {&__pyx_n_s_constrained_oasisAR1_locals_oasi, __pyx_k_constrained_oasisAR1_locals_oasi, sizeof(__pyx_k_constrained_oasisAR1_locals_oasi), 0, 0, 1, 1},
    {&__pyx_n_s_constrained_oasisAR1_locals_oasi_2, __pyx_k_constrained_oasisAR1_locals_oasi_2, sizeof(__pyx_k_constrained_oasisAR1_locals_oasi_2), 0, 0, 1, 1},
    {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
    {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
    {&__pyx_n_s_db, __pyx_k_db, sizeof(__pyx_k_db), 0, 0, 1, 1},
    {&__pyx_n_s_decimate, __pyx_k_decimate, sizeof(__pyx_k_decimate), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_dlam, __pyx_k_dlam, sizeof(__pyx_k_dlam), 0, 0, 1, 1},
    {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
    {&__pyx_n_s_dphi, __pyx_k_dphi, sizeof(__pyx_k_dphi), 0, 0, 1, 1},
    {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
    {&__pyx_n_s_ff, __pyx_k_ff, sizeof(__pyx_k_ff), 0, 0, 1, 1},
    {&__pyx_n_s_fit, __pyx_k_fit, sizeof(__pyx_k_fit), 0, 0, 1, 1},
    {&__pyx_n_s_fit_next, __pyx_k_fit_next, sizeof(__pyx_k_fit_next), 0, 0, 1, 1},
    {&__pyx_n_s_fit_next_tmp, __pyx_k_fit_next_tmp, sizeof(__pyx_k_fit_next_tmp), 0, 0, 1, 1},
    {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
    {&__pyx_n_u_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 1, 0, 1},
    {&__pyx_n_s_fluor, __pyx_k_fluor, sizeof(__pyx_k_fluor), 0, 0, 1, 1},
    {&__pyx_n_s_fminbound, __pyx_k_fminbound, sizeof(__pyx_k_fminbound), 0, 0, 1, 1},
    {&__pyx_n_s_foo, __pyx_k_foo, sizeof(__pyx_k_foo), 0, 0, 1, 1},
    {&__pyx_n_u_ftol, __pyx_k_ftol, sizeof(__pyx_k_ftol), 0, 1, 0, 1},
    {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
    {&__pyx_n_s_g11g11, __pyx_k_g11g11, sizeof(__pyx_k_g11g11), 0, 0, 1, 1},
    {&__pyx_n_s_g11g12, __pyx_k_g11g12, sizeof(__pyx_k_g11g12), 0, 0, 1, 1},
    {&__pyx_n_s_g12, __pyx_k_g12, sizeof(__pyx_k_g12), 0, 0, 1, 1},
    {&__pyx_n_s_g2, __pyx_k_g2, sizeof(__pyx_k_g2), 0, 0, 1, 1},
    {&__pyx_n_s_g_converged, __pyx_k_g_converged, sizeof(__pyx_k_g_converged), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_get_c, __pyx_k_get_c, sizeof(__pyx_k_get_c), 0, 0, 1, 1},
    {&__pyx_n_s_get_c_of_last_pool, __pyx_k_get_c_of_last_pool, sizeof(__pyx_k_get_c_of_last_pool), 0, 0, 1, 1},
    {&__pyx_n_s_get_l_of_last_pool, __pyx_k_get_l_of_last_pool, sizeof(__pyx_k_get_l_of_last_pool), 0, 0, 1, 1},
    {&__pyx_n_s_get_l_of_pool, __pyx_k_get_l_of_pool, sizeof(__pyx_k_get_l_of_pool), 0, 0, 1, 1},
    {&__pyx_n_s_get_s, __pyx_k_get_s, sizeof(__pyx_k_get_s), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_u_gtol, __pyx_k_gtol, sizeof(__pyx_k_gtol), 0, 1, 0, 1},
    {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
    {&__pyx_n_s_idx_from_end, __pyx_k_idx_from_end, sizeof(__pyx_k_idx_from_end), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
    {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
    {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
    {&__pyx_n_s_lam, __pyx_k_lam, sizeof(__pyx_k_lam), 0, 0, 1, 1},
    {&__pyx_n_s_ll, __pyx_k_ll, sizeof(__pyx_k_ll), 0, 0, 1, 1},
    {&__pyx_n_s_lls, __pyx_k_lls, sizeof(__pyx_k_lls), 0, 0, 1, 1},
    {&__pyx_n_s_ma, __pyx_k_ma, sizeof(__pyx_k_ma), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
    {&__pyx_n_s_max_iter, __pyx_k_max_iter, sizeof(__pyx_k_max_iter), 0, 0, 1, 1},
    {&__pyx_n_s_maxfun, __pyx_k_maxfun, sizeof(__pyx_k_maxfun), 0, 0, 1, 1},
    {&__pyx_n_u_maxiter, __pyx_k_maxiter, sizeof(__pyx_k_maxiter), 0, 1, 0, 1},
    {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
    {&__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
    {&__pyx_n_s_minimize, __pyx_k_minimize, sizeof(__pyx_k_minimize), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_n_s_newpool, __pyx_k_newpool, sizeof(__pyx_k_newpool), 0, 0, 1, 1},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_num, __pyx_k_num, sizeof(__pyx_k_num), 0, 0, 1, 1},
    {&__pyx_n_s_num_empty_samples, __pyx_k_num_empty_samples, sizeof(__pyx_k_num_empty_samples), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
    {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
    {&__pyx_n_s_oasis, __pyx_k_oasis, sizeof(__pyx_k_oasis), 0, 0, 1, 1},
    {&__pyx_n_s_oasis1strun, __pyx_k_oasis1strun, sizeof(__pyx_k_oasis1strun), 0, 0, 1, 1},
    {&__pyx_n_s_oasisAR1, __pyx_k_oasisAR1, sizeof(__pyx_k_oasisAR1), 0, 0, 1, 1},
    {&__pyx_n_s_opt, __pyx_k_opt, sizeof(__pyx_k_opt), 0, 0, 1, 1},
    {&__pyx_n_s_optimize_b, __pyx_k_optimize_b, sizeof(__pyx_k_optimize_b), 0, 0, 1, 1},
    {&__pyx_n_s_optimize_g, __pyx_k_optimize_g, sizeof(__pyx_k_optimize_g), 0, 0, 1, 1},
    {&__pyx_n_s_options, __pyx_k_options, sizeof(__pyx_k_options), 0, 0, 1, 1},
    {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
    {&__pyx_n_s_penalty, __pyx_k_penalty, sizeof(__pyx_k_penalty), 0, 0, 1, 1},
    {&__pyx_n_s_percentile, __pyx_k_percentile, sizeof(__pyx_k_percentile), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_OASIS, __pyx_k_pyx_unpickle_OASIS, sizeof(__pyx_k_pyx_unpickle_OASIS), 0, 0, 1, 1},
    {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_ravel, __pyx_k_ravel, sizeof(__pyx_k_ravel), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_remove_last_pool, __pyx_k_remove_last_pool, sizeof(__pyx_k_remove_last_pool), 0, 0, 1, 1},
    {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
    {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
    {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
    {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
    {&__pyx_n_s_s_min, __pyx_k_s_min, sizeof(__pyx_k_s_min), 0, 0, 1, 1},
    {&__pyx_n_s_scipy_optimize, __pyx_k_scipy_optimize, sizeof(__pyx_k_scipy_optimize), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_set_poolvalue, __pyx_k_set_poolvalue, sizeof(__pyx_k_set_poolvalue), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_sn, __pyx_k_sn, sizeof(__pyx_k_sn), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
    {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_thresh, __pyx_k_thresh, sizeof(__pyx_k_thresh), 0, 0, 1, 1},
    {&__pyx_n_s_tmp, __pyx_k_tmp, sizeof(__pyx_k_tmp), 0, 0, 1, 1},
    {&__pyx_n_s_tmp2, __pyx_k_tmp2, sizeof(__pyx_k_tmp2), 0, 0, 1, 1},
    {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
    {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
    {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
    {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
    {&__pyx_n_s_xtol, __pyx_k_xtol, sizeof(__pyx_k_xtol), 0, 0, 1, 1},
    {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
    {&__pyx_n_s_yt, __pyx_k_yt, sizeof(__pyx_k_yt), 0, 0, 1, 1},
    {&__pyx_n_s_yt_2, __pyx_k_yt_2, sizeof(__pyx_k_yt_2), 0, 0, 1, 1},
    {&__pyx_n_s_yy, __pyx_k_yy, sizeof(__pyx_k_yy), 0, 0, 1, 1},
    {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
    {&__pyx_n_s_zeros_like, __pyx_k_zeros_like, sizeof(__pyx_k_zeros_like), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 848, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 865, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 68, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(1, 19, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 20, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 83, __pyx_L1_error)
  __pyx_builtin_OverflowError = __Pyx_GetBuiltinName(__pyx_n_s_OverflowError); if (!__pyx_builtin_OverflowError) __PYX_ERR(1, 83, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 86, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 96, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 984, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "FromPyStructUtility":20
 *         value = obj['v']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'v'")             # <<<<<<<<<<<<<<
 *     result.v = value
 *     try:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "FromPyStructUtility":25
 *         value = obj['w']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'w'")             # <<<<<<<<<<<<<<
 *     result.w = value
 *     try:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "FromPyStructUtility":30
 *         value = obj['t']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 't'")             # <<<<<<<<<<<<<<
 *     result.t = value
 *     try:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_3); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "FromPyStructUtility":35
 *         value = obj['l']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'l'")             # <<<<<<<<<<<<<<
 *     result.l = value
 *     return result
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_4); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":984
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "../../../private/var/folders/l9/cx2p5jb916q6gnl7zy00tcg00000gn/T/pip-build-env-_em1bwgj/overlay/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":990
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "caiman/source_extraction/cnmf/oasis.pyx":666
 *     s = c.copy()
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]             # <<<<<<<<<<<<<<
 *     return c, s
 * 
 */
  __pyx_slice__7 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__7)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__7);
  __Pyx_GIVEREF(__pyx_slice__7);
  __pyx_slice__8 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__8)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__8);
  __Pyx_GIVEREF(__pyx_slice__8);

  /* "caiman/source_extraction/cnmf/oasis.pyx":856
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */
  __pyx_tuple__11 = PyTuple_Pack(8, __pyx_n_s_y, __pyx_n_s_t, __pyx_n_s_l, __pyx_n_s_q, __pyx_n_s_g, __pyx_n_s_lam, __pyx_n_s_yy, __pyx_n_s_tmp); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_foo, 856, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 856, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":956
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */
  __pyx_tuple__13 = PyTuple_Pack(9, __pyx_n_s_y, __pyx_n_s_t, __pyx_n_s_l, __pyx_n_s_q, __pyx_n_s_b, __pyx_n_s_g, __pyx_n_s_lam, __pyx_n_s_yy, __pyx_n_s_tmp); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_foo, 956, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 956, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":970
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),             # <<<<<<<<<<<<<<
 *                                     method='L-BFGS-B',
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_float__001, __pyx_float__999); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "caiman/source_extraction/cnmf/oasis.pyx":748
 *     lam = 0  # sn/sqrt(1-g*g)
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_tuple__16 = PyTuple_Pack(11, __pyx_n_s_y, __pyx_n_s_g, __pyx_n_s_c, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_t, __pyx_n_s_T, __pyx_n_s_tmp, __pyx_n_s_P, __pyx_n_s_newpool); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_oasis1strun, 748, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 748, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":787
 *         return c, P
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_tuple__18 = PyTuple_Pack(7, __pyx_n_s_P, __pyx_n_s_g, __pyx_n_s_c, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_tmp); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_oasis, 787, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 787, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":853
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(8, __pyx_n_s_y, __pyx_n_s_g, __pyx_n_s_Pt, __pyx_n_s_Pl, __pyx_n_s_h, __pyx_n_s_foo, __pyx_n_s_foo, __pyx_n_s_i); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_bar, 853, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 853, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":868
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */
  __pyx_tuple__22 = PyTuple_Pack(3, __pyx_n_s_y, __pyx_n_s_Pt, __pyx_n_s_Pl); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_baz, 868, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 868, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":952
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */
  __pyx_tuple__24 = PyTuple_Pack(10, __pyx_n_s_y, __pyx_n_s_opt, __pyx_n_s_Pt, __pyx_n_s_Pl, __pyx_n_s_b, __pyx_n_s_g, __pyx_n_s_h, __pyx_n_s_foo, __pyx_n_s_foo, __pyx_n_s_i); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_bar, 952, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 952, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":968
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_baz, 968, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 968, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":1031
 *             lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                    for i in range(P.size() - 1)]
 *             pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]             # <<<<<<<<<<<<<<
 *             res = -y
 *             RSS = y.dot(y)
 */
  __pyx_slice__27 = PySlice_New(Py_None, Py_None, __pyx_int_neg_1); if (unlikely(!__pyx_slice__27)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__27);
  __Pyx_GIVEREF(__pyx_slice__27);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x427cb6f, 0x3fa9078, 0x85da4ff):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x427cb6f, 0x3fa9078, 0x85da4ff) = (P, _y, b, d, g, g11g11, g11g12, g12, g2, h, i, lam, r, s_min, t, v, w, yt))" % __pyx_checksum
 */
  __pyx_tuple__28 = PyTuple_Pack(3, __pyx_int_69716847, __pyx_int_66752632, __pyx_int_140354815); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "caiman/source_extraction/cnmf/oasis.pyx":140
 *             self._y = [0] * num_empty_samples
 * 
 *     def fit_next(self, yt):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t
 */
  __pyx_tuple__31 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_yt, __pyx_n_s_newpool, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_h, __pyx_n_s_g12, __pyx_n_s_g11g11, __pyx_n_s_g11g12, __pyx_n_s_tmp); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_fit_next, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 140, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":207
 *                 self.P.pop_back()
 * 
 *     def fit_next_tmp(self, yt, num):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t temporarily and return denoised calcium for last num time steps
 */
  __pyx_tuple__33 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_yt, __pyx_n_s_num, __pyx_n_s_newpool, __pyx_n_s_c, __pyx_n_s_t, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_tmp2, __pyx_n_s_tmp, __pyx_n_s_yt_2); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_fit_next_tmp, 207, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 207, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":360
 *         return c
 * 
 *     def fit(self, y):             # <<<<<<<<<<<<<<
 *         """
 *         fit all time steps
 */
  __pyx_tuple__35 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_y, __pyx_n_s_yt); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_fit, 360, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 360, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":368
 *         return self
 * 
 *     def get_c(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium for last num time steps
 */
  __pyx_tuple__37 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_num, __pyx_n_s_c, __pyx_n_s_t, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_tmp2, __pyx_n_s_tmp); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_get_c, 368, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 368, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":430
 *         return c
 * 
 *     def get_s(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return deconvolved activity for last num time steps
 */
  __pyx_tuple__39 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_num, __pyx_n_s_s, __pyx_n_s_t, __pyx_n_s_j); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_get_s, 430, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 430, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":463
 *         return s
 * 
 *     def get_l_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return length of last pool
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_get_l_of_last_pool, 463, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 463, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":469
 *         return self.P[self.i].l
 * 
 *     def get_c_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium of last pool, i.e. the part of c that actually changed
 */
  __pyx_tuple__43 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_c, __pyx_n_s_k, __pyx_n_s_tmp); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_get_c_of_last_pool, 469, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 469, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":497
 *         return c
 * 
 *     def remove_last_pool(self):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 */
  __pyx_tuple__45 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_k); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_remove_last_pool, 497, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 497, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":506
 *         self.P.pop_back()
 * 
 *     def get_l_of_pool(self, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         return self.P[self.i - idx_from_end].l
 * 
 */
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_idx_from_end); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_get_l_of_pool, 506, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 506, __pyx_L1_error)
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "caiman/source_extraction/cnmf/oasis.pyx":509
 *         return self.P[self.i - idx_from_end].l
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         self.P[self.i - idx_from_end].v = val
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_val, __pyx_n_s_idx_from_end); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_set_poolvalue, 509, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 509, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__52 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OASIS__set_state(self, __pyx_state)
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":594
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE lam=0, SINGLE s_min=0):
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 */
  __pyx_tuple__56 = PyTuple_Pack(14, __pyx_n_s_y, __pyx_n_s_g, __pyx_n_s_lam, __pyx_n_s_s_min, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_t, __pyx_n_s_T, __pyx_n_s_tmp, __pyx_n_s_c, __pyx_n_s_s, __pyx_n_s_P, __pyx_n_s_newpool); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_oasisAR1, 594, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 594, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":670
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 */
  __pyx_tuple__58 = PyTuple_Pack(71, __pyx_n_s_y, __pyx_n_s_g, __pyx_n_s_sn, __pyx_n_s_optimize_b, __pyx_n_s_b_nonneg, __pyx_n_s_optimize_g, __pyx_n_s_decimate, __pyx_n_s_max_iter, __pyx_n_s_penalty, __pyx_n_s_s_min, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_t, __pyx_n_s_l, __pyx_n_s_ma, __pyx_n_s_count, __pyx_n_s_T, __pyx_n_s_thresh, __pyx_n_s_v, __pyx_n_s_w, __pyx_n_s_RSS, __pyx_n_s_aa, __pyx_n_s_bb, __pyx_n_s_cc, __pyx_n_s_lam, __pyx_n_s_dlam, __pyx_n_s_b, __pyx_n_s_db, __pyx_n_s_dphi, __pyx_n_s_g_converged, __pyx_n_s_c, __pyx_n_s_s, __pyx_n_s_res, __pyx_n_s_tmp, __pyx_n_s_fluor, __pyx_n_s_h, __pyx_n_s_ff, __pyx_n_s_ll, __pyx_n_s_P, __pyx_n_s_newpool, __pyx_n_s_oasis1strun, __pyx_n_s_oasis1strun, __pyx_n_s_oasis, __pyx_n_s_oasis, __pyx_n_s_idx, __pyx_n_s_Pt, __pyx_n_s_Pl, __pyx_n_s_bar, __pyx_n_s_bar, __pyx_n_s_baz, __pyx_n_s_baz, __pyx_n_s_q, __pyx_n_s_bar, __pyx_n_s_baz, __pyx_n_s_result, __pyx_n_s_lls, __pyx_n_s_pos, __pyx_n_s_p, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(10, 0, 0, 71, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_caiman_source_extraction_cnmf_oa, __pyx_n_s_constrained_oasisAR1, 670, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 670, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_OASIS(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__60 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_OASIS, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float__001 = PyFloat_FromDouble(.001); if (unlikely(!__pyx_float__001)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float__999 = PyFloat_FromDouble(.999); if (unlikely(!__pyx_float__999)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_4 = PyFloat_FromDouble(1e-4); if (unlikely(!__pyx_float_1eneg_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_9 = PyFloat_FromDouble(1e-9); if (unlikely(!__pyx_float_1eneg_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_04 = PyFloat_FromDouble(1e-04); if (unlikely(!__pyx_float_1eneg_04)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_05 = PyFloat_FromDouble(1e-05); if (unlikely(!__pyx_float_1eneg_05)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_66752632 = PyInt_FromLong(66752632L); if (unlikely(!__pyx_int_66752632)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_69716847 = PyInt_FromLong(69716847L); if (unlikely(!__pyx_int_69716847)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_140354815 = PyInt_FromLong(140354815L); if (unlikely(!__pyx_int_140354815)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* NumpyImportArray.init */
  /*
 * Cython has automatically inserted a call to _import_array since
 * you didn't include one when you cimported numpy. To disable this
 * add the line
 *   <void>numpy._import_array
 */
#ifdef NPY_FEATURE_VERSION
#ifndef NO_IMPORT_ARRAY
if (unlikely(_import_array() == -1)) {
    PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import "
    "(auto-generated because you didn't call 'numpy.import_array()' after cimporting numpy; "
    "use '<void>numpy._import_array' to disable if you are certain you don't need it).");
}
#endif
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS_spec, NULL); if (unlikely(!__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS)) __PYX_ERR(0, 29, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS_spec, __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #else
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS = &__pyx_type_6caiman_17source_extraction_4cnmf_5oasis_OASIS;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS->tp_dictoffset && __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OASIS, (PyObject *) __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1_spec, NULL); if (unlikely(!__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1)) __PYX_ERR(0, 670, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1_spec, __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1) < 0) __PYX_ERR(0, 670, __pyx_L1_error)
  #else
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1 = &__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1) < 0) __PYX_ERR(0, 670, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1->tp_dictoffset && __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct__constrained_oasisAR1->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz_spec, NULL); if (unlikely(!__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz)) __PYX_ERR(0, 868, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz_spec, __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz) < 0) __PYX_ERR(0, 868, __pyx_L1_error)
  #else
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz = &__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz) < 0) __PYX_ERR(0, 868, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz->tp_dictoffset && __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_1_baz->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz_spec, NULL); if (unlikely(!__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz)) __PYX_ERR(0, 968, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz_spec, __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz) < 0) __PYX_ERR(0, 968, __pyx_L1_error)
  #else
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz = &__pyx_type_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz) < 0) __PYX_ERR(0, 968, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz->tp_dictoffset && __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis___pyx_scope_struct_2_baz->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 202, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 225, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 809, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 811, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 813, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 815, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 817, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 819, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 821, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 823, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 825, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 827, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_oasis(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_oasis},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "oasis",
      __pyx_k_Extract_neural_activity_from_a_f, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initoasis(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initoasis(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_oasis(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_oasis(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_oasis(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'oasis' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("oasis", __pyx_methods, __pyx_k_Extract_neural_activity_from_a_f, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "oasis" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_oasis(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_caiman__source_extraction__cnmf__oasis) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "caiman.source_extraction.cnmf.oasis")) {
      if (unlikely((PyDict_SetItemString(modules, "caiman.source_extraction.cnmf.oasis", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "caiman/source_extraction/cnmf/oasis.pyx":7
 * """
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * cimport cython
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":11
 * cimport cython
 * from libc.math cimport sqrt, log, exp, fmax, fabs
 * from scipy.optimize import fminbound, minimize             # <<<<<<<<<<<<<<
 * from cpython cimport bool
 * from libcpp.vector cimport vector
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_fminbound);
  __Pyx_GIVEREF(__pyx_n_s_fminbound);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_fminbound)) __PYX_ERR(0, 11, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_minimize);
  __Pyx_GIVEREF(__pyx_n_s_minimize);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_minimize)) __PYX_ERR(0, 11, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_scipy_optimize, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_fminbound); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fminbound, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_minimize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_minimize, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":140
 *             self._y = [0] * num_empty_samples
 * 
 *     def fit_next(self, yt):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_3fit_next, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_fit_next, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_fit_next, __pyx_t_3) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":207
 *                 self.P.pop_back()
 * 
 *     def fit_next_tmp(self, yt, num):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t temporarily and return denoised calcium for last num time steps
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_5fit_next_tmp, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_fit_next_tmp, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_fit_next_tmp, __pyx_t_3) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":360
 *         return c
 * 
 *     def fit(self, y):             # <<<<<<<<<<<<<<
 *         """
 *         fit all time steps
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_7fit, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_fit, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_fit, __pyx_t_3) < 0) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":368
 *         return self
 * 
 *     def get_c(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium for last num time steps
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_9get_c, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_get_c, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_get_c, __pyx_t_3) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":430
 *         return c
 * 
 *     def get_s(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return deconvolved activity for last num time steps
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_11get_s, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_get_s, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_get_s, __pyx_t_3) < 0) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":463
 *         return s
 * 
 *     def get_l_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return length of last pool
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_13get_l_of_last_pool, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_get_l_of_last_pool, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_get_l_of_last_pool, __pyx_t_3) < 0) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":469
 *         return self.P[self.i].l
 * 
 *     def get_c_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium of last pool, i.e. the part of c that actually changed
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_15get_c_of_last_pool, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_get_c_of_last_pool, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_get_c_of_last_pool, __pyx_t_3) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":497
 *         return c
 * 
 *     def remove_last_pool(self):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_17remove_last_pool, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_remove_last_pool, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_remove_last_pool, __pyx_t_3) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":506
 *         self.P.pop_back()
 * 
 *     def get_l_of_pool(self, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         return self.P[self.i - idx_from_end].l
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_19get_l_of_pool, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_get_l_of_pool, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__49);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_get_l_of_pool, __pyx_t_3) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":509
 *         return self.P[self.i - idx_from_end].l
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         self.P[self.i - idx_from_end].v = val
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_21set_poolvalue, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS_set_poolvalue, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__49);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_set_poolvalue, __pyx_t_3) < 0) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_23__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS___reduce_cython, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OASIS, (type(self), 0x427cb6f, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OASIS__set_state(self, __pyx_state)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5OASIS_25__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OASIS___setstate_cython, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6caiman_17source_extraction_4cnmf_5oasis_OASIS);

  /* "caiman/source_extraction/cnmf/oasis.pyx":595
 * 
 * @cython.cdivision(True)
 * def oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE lam=0, SINGLE s_min=0):             # <<<<<<<<<<<<<<
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble(((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)0.0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)0.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "caiman/source_extraction/cnmf/oasis.pyx":594
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE lam=0, SINGLE s_min=0):
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_1oasisAR1, 0, __pyx_n_s_oasisAR1, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oasisAR1, __pyx_t_2) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":672
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,             # <<<<<<<<<<<<<<
 *                          int decimate=1, int max_iter=5, int penalty=1, SINGLE s_min=-3):
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 */
  if (!(likely(((((PyObject *)Py_False)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)Py_False), __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_INCREF(((PyObject *)Py_False));
  __pyx_k__9 = ((PyBoolObject *)((PyObject *)Py_False));
  __Pyx_GIVEREF((PyObject *)((PyObject *)Py_False));
  if (!(likely(((((PyObject *)Py_True)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)Py_True), __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_INCREF(((PyObject *)Py_True));
  __pyx_k__10 = ((PyBoolObject *)((PyObject *)Py_True));
  __Pyx_GIVEREF((PyObject *)((PyObject *)Py_True));

  /* "caiman/source_extraction/cnmf/oasis.pyx":670
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 */
  if (!(likely(((((PyObject *)Py_False)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)Py_False), __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 672, __pyx_L1_error)

  /* "caiman/source_extraction/cnmf/oasis.pyx":672
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,             # <<<<<<<<<<<<<<
 *                          int decimate=1, int max_iter=5, int penalty=1, SINGLE s_min=-3):
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 */
  if (!(likely(((((PyObject *)Py_True)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)Py_True), __pyx_ptype_7cpython_4bool_bool))))) __PYX_ERR(0, 672, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(((int)0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "caiman/source_extraction/cnmf/oasis.pyx":673
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 *                          int decimate=1, int max_iter=5, int penalty=1, SINGLE s_min=-3):             # <<<<<<<<<<<<<<
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(((int)1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(((int)5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(((int)1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(((__pyx_t_6caiman_17source_extraction_4cnmf_5oasis_SINGLE)-3.0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "caiman/source_extraction/cnmf/oasis.pyx":670
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 */
  __pyx_t_7 = PyTuple_New(7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)Py_False));
  __Pyx_GIVEREF(((PyObject *)Py_False));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)Py_False))) __PYX_ERR(0, 670, __pyx_L1_error);
  __Pyx_INCREF(((PyObject *)Py_True));
  __Pyx_GIVEREF(((PyObject *)Py_True));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, ((PyObject *)Py_True))) __PYX_ERR(0, 670, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_2)) __PYX_ERR(0, 670, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4)) __PYX_ERR(0, 670, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_3)) __PYX_ERR(0, 670, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_5)) __PYX_ERR(0, 670, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 6, __pyx_t_6)) __PYX_ERR(0, 670, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_3constrained_oasisAR1, 0, __pyx_n_s_constrained_oasisAR1, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_constrained_oasisAR1, __pyx_t_6) < 0) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OASIS(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6caiman_17source_extraction_4cnmf_5oasis_5__pyx_unpickle_OASIS, 0, __pyx_n_s_pyx_unpickle_OASIS, NULL, __pyx_n_s_caiman_source_extraction_cnmf_oa_2, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_OASIS, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "caiman/source_extraction/cnmf/oasis.pyx":1
 * """Extract neural activity from a fluorescence trace using OASIS,             # <<<<<<<<<<<<<<
 * an active set method for sparse nonnegative deconvolution
 * Created on Mon Apr 4 18:21:13 2016
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_6) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init caiman.source_extraction.cnmf.oasis", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init caiman.source_extraction.cnmf.oasis");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
        
            x = (long)((unsigned long)a - (unsigned long)b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op2))) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_PyLong_IsCompact(op2))) {
            b = __Pyx_PyLong_CompactValue(op2);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op2);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long b = PyInt_AS_LONG(op2);
        
#ifdef HAVE_LONG_LONG
            if (sizeof(PY_LONG_LONG) > sizeof(long)) {
                PY_LONG_LONG result = (PY_LONG_LONG)a * (PY_LONG_LONG)b;
                return (result >= LONG_MIN && result <= LONG_MAX) ?
                    PyInt_FromLong((long)result) : PyLong_FromLongLong(result);
            }
#endif
#if CYTHON_USE_TYPE_SLOTS
            return PyInt_Type.tp_as_number->nb_multiply(op1, op2);
#else
            return PyNumber_Multiply(op1, op2);
#endif
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op2))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op2))) {
            b = __Pyx_PyLong_CompactValue(op2);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op2);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            }
        }
                CYTHON_UNUSED_VAR(a);
                CYTHON_UNUSED_VAR(b);
                #ifdef HAVE_LONG_LONG
                llb = b;
                goto long_long;
                #else
                return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
                #endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("multiply", return NULL)
            result = ((double)a) * (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_PyLong_DigitCount(op1) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparsable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static int
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return -1;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return -1;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return -1;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i]) {
            PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
            return -1;
        }
        if (*ts != ',' && *ts != ')') {
            PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
            return -1;
        }
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim) {
        PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
        return -1;
    }
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return -1;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return 0;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (__pyx_buffmt_parse_array(ctx, &ts) < 0) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
  #if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* KeywordStringCheck */
  static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetAttr3 */
  #if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* RaiseUnexpectedTypeError */
  static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* ArgTypeTest */
  static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallOneArg */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* SliceObject */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* FixUpExtensionType */
  #if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
  static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
  static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
  #if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
  #if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* RaiseClosureNameError */
  static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__29);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetAttr */
  static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
  #if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}
#endif

/* PyObjectCallNoArg */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
  static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
  #if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
  static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType_3_0_8
#define __PYX_HAVE_RT_ImportType_3_0_8
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_8 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_8 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* ImportDottedModule */
  #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__30;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

static PyObject* __pyx_convert__to_py_struct____pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool(struct __pyx_t_6caiman_17source_extraction_4cnmf_5oasis_Pool s) {
    PyObject* res;
    PyObject* member;
    res = __Pyx_PyDict_NewPresized(4); if (unlikely(!res)) return NULL;
    member = PyFloat_FromDouble(s.v); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_v, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyFloat_FromDouble(s.w); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_w, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyInt_FromSsize_t(s.t); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_t, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyInt_FromSsize_t(s.l); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_l, member) < 0)) goto bad;
    Py_DECREF(member);
    return res;
    bad:
    Py_XDECREF(member);
    Py_DECREF(res);
    return NULL;
  }
  /* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    __Pyx_TypeName obj_type_name;
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
                 "'" __Pyx_FMT_TYPENAME "' does not have the buffer interface",
                 obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned int) 1) << (sizeof(unsigned int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__62);
    }
    return name;
}
#endif

/* CheckBinaryVersion */
  static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
